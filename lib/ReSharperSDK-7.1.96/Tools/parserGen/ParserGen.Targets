<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="ParserGenCheckProperties">
  <!-- Enables support for the “ParserGen” build action in the projects. -->

  <Import Project="ParserGen.Tasks" />

  <!-- Deal with the ParserGen output folder structure. -->
  <PropertyGroup>
    <ParserGenOutputBase Condition=" '$(ParserGenOutputBase)' == '' ">$(MSBuildProjectDirectory)\Gen</ParserGenOutputBase>
    <PsiLanguageName Condition=" '$(PsiLanguageName)' == '' ">Albanian</PsiLanguageName>
    <ParserGenHomeDir Condition=" '$(ParserGenHomeDir)' == '' ">$(ReSharperSdkTools)\parserGen</ParserGenHomeDir>    
    <ParserGenJavaHomeDir Condition=" '$(ParserGenJavaHomeDir)' == '' ">$(ReSharperSdkTools)\Java</ParserGenJavaHomeDir>

    <TimestampFile>$(ParserGenOutputBase)/$(PsiLanguageName).timestamp</TimestampFile>
  </PropertyGroup>

  <ItemGroup>
    <!-- Add to the Visual Studio Build Action list on the files. -->
    <AvailableItemName Include="ParserGen" />
    <!-- Calculate output. -->
    <ParserGenOutput Include="$(ParserGenOutputBase)/Parsing/$(PsiLanguageName)/**/*">
      <AutoGen>True</AutoGen>
    </ParserGenOutput>
    <ParserGenOutput Include="$(ParserGenOutputBase)/Psi/$(PsiLanguageName)/**/*">
      <AutoGen>True</AutoGen>
    </ParserGenOutput>
    <ParserGenOutput Include="$(ParserGenOutputBase)/Psi/Test/$(PsiLanguageName)/**/*">
      <AutoGen>True</AutoGen>
    </ParserGenOutput>
    <ParserGenOutput Include="$(TimestampFile)">
      <AutoGen>True</AutoGen>
    </ParserGenOutput>
  </ItemGroup>

  <!-- Dispatch. -->
  <PropertyGroup>
    <GenerateParserGenDependsOn>
      $(GenerateParserGenDependsOn);
      GenerateParserGen_Generate;
      GenerateParserGen_AddToItemGroups;
      GenerateParserGen_UndupeCompile;
    </GenerateParserGenDependsOn>
    <CleanParserGenDependsOn>
      $(CleanParserGenDependsOn);
      CleanParserGen_Clean;
    </CleanParserGenDependsOn>
  </PropertyGroup>

  <!-- Plugin. -->
  <PropertyGroup>
    <!-- Plug into the build process before the Compile target executes. -->
    <PrepareResourcesDependsOn>
      $(GenerateParserGenDependsOn);
      $(PrepareResourcesDependsOn);
    </PrepareResourcesDependsOn>
    <!-- Clean the files, this enables proper Rebuild. -->
    <CleanDependsOn>
      $(CleanDependsOn);
      $(CleanParserGenDependsOn);
    </CleanDependsOn>
  </PropertyGroup>

  <!-- Adds generated files to the Compile item group. -->
  <!-- Originally, it holds the list of files before the parsergen run (eg empty on rebuild). -->
  <!-- If the PSI file changes so that new files are added, they're missing from the Compile item group after generation, hence adding them explicitly here. -->
  <!-- If the PSI file changes so that some files disappear, they're still present in the Compile item group after generation, hence “file could not be found” compilation error. -->
  <!-- Produces the list of the output files for needs-rebuild check and Clean. -->
  <Target Name="GenerateParserGen_AddToItemGroups" Condition="'@(ParserGen)' != ''">
    <!---->
    <!-- Stage 1: collect the generated files, ParserGenOutputSrc item group. -->
    <ItemGroup>
      <!-- Clean prev run results (if more than one parsergen in this project). -->
      <ParserGenOutputSrc Remove="%(ParserGenOutputSrc.Identity)" />
      
      <!-- Re-query for the files generated during the run. -->
      <ParserGenOutputSrc Include="$(ParserGenOutputBase)/Parsing/$(PsiLanguageName)/**/*.cs">
        <AutoGen>True</AutoGen>
      </ParserGenOutputSrc>
      <ParserGenOutputSrc Include="$(ParserGenOutputBase)/Psi/$(PsiLanguageName)/**/*.cs">
        <AutoGen>True</AutoGen>
      </ParserGenOutputSrc>
      <ParserGenOutputSrc Include="$(ParserGenOutputBase)/Psi/Test/$(PsiLanguageName)/**/*.cs">
        <AutoGen>True</AutoGen>
      </ParserGenOutputSrc>

      <!-- Support incremental clean for our files. -->
      <FileWrites Include="%(ParserGenOutputSrc.FullPath)" />
    </ItemGroup>
    
    <!---->
    <!-- Stage 2: remove old “generated” files from the Compile item group. -->
    <ItemGroup>
      <CompileUnfiltered Remove="%(CompileUnfiltered.Identity)" />
      <CompileUnfiltered Include="%(Compile.FullPath)" />
      <Compile Remove="%(Compile.Identity)" />
    </ItemGroup>
    <RemoveItemsInFolder Items="@(CompileUnfiltered)" Directory="$(ParserGenOutputBase)">
      <Output TaskParameter="Items" ItemName="Compile" />
    </RemoveItemsInFolder>

    <!---->
    <!-- Stage 3: add the up-to-date list to the Compile item group. -->
    <ItemGroup>
      <!-- Use the result in the build process. -->
      <Compile Include="%(ParserGenOutputSrc.FullPath)" />
    </ItemGroup>
  </Target>

  <!-- After adding the outputs to the @(Compile) group, we might encounter duplicates — remove them. -->
  <Target Name="GenerateParserGen_UndupeCompile" Condition="'@(ParserGen)' != ''">
    <ItemGroup>
      <CompileUnfiltered Remove="%(CompileUnfiltered.Identity)" />
      <CompileUnfiltered Include="%(Compile.FullPath)" />
      <Compile Remove="%(Compile.Identity)" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(CompileUnfiltered)">
      <Output TaskParameter="Filtered" ItemName="Compile" />
    </RemoveDuplicates>
  </Target>

  <!-- The generation itself. -->
  <ItemGroup>
    <!-- Sources themselves: the .PSI file. -->
    <GenerateParserGenInputs Include="@(ParserGen)" />
    <!-- The tool files that produce the outputs, output invalidates when new tools are available. -->
    <GenerateParserGenInputs Include="$(ParserGenHomeDir)/ParserGen.Tasks" />
    <GenerateParserGenInputs Include="$(ParserGenHomeDir)/ParserGen.Targets" />
    <GenerateParserGenInputs Include="$(ParserGenHomeDir)/ParserGenTask.dll" />
    <GenerateParserGenInputs Include="$(ParserGenHomeDir)/*.jar" />
  </ItemGroup>
  <Target Name="GenerateParserGen_Generate" Inputs="@(GenerateParserGenInputs)" Outputs="$(TimestampFile)" Condition="'@(ParserGen)'!=''">
    <ParserGen InputFile="%(ParserGen.FullPath)" OutputFolder="$(ParserGenOutputBase)" ToolPath="$(ParserGenJavaHomeDir)" ImplementationDir="$(ParserGenHomeDir)" />

    <Message Text="%(ParserGen.FullPath) --(*)--> $(ParserGenOutputBase)/$(PsiLanguageName)" Importance="high" />
    <Delete Files="$(TimestampFile)" />
    <WriteLinesToFile File="$(TimestampFile)" Lines="ParserGen/$(PsiLanguageName)" />
  </Target>

  <!-- Cleans the generated files. -->
  <Target Name="CleanParserGen_Clean">
    <Delete Files="@(ParserGenOutput)" TreatErrorsAsWarnings="true"  />
  </Target>

  <!-- Ensures that necessary properties have been specified. -->
  <Target Name="ParserGenCheckProperties">
    <Error Condition="'$(PsiLanguageName)'=='Albanian' and '@(ParserGen)' != ''" Text="The PsiLanguageName property must be specified in order to use the ParserGen build tool." />
  </Target>

</Project>