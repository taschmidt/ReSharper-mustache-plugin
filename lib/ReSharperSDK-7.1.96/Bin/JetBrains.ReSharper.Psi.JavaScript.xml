<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Psi.JavaScript</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.CacheItems.AnnotationCacheProvider">
            <summary>
            For reading cached files. Provides only 'CreateItemConstructor'.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptCacheProvider.Version">
            <summary>
            version of this provider format (it contributes main cache version.)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.ICacheItem.SymbolTypeGuid">
            <summary>
            Guid of symbol kind for persisting...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.ICacheItem.Name">
            <summary>
            Short name of a symbol
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Framework.MicrosoftAjax.NotDebugFilesFilter">
            <summary>
            Filter out not debugging files (preferes .debug.js to bare .js)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptTypeBinding.GetJsType(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JavaScriptResolveContext)">
            <summary>
            Returns type provided by this binding
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol">
            <summary>
            Customization point for javascript properties
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.GetElementType">
            <summary>
            DeclaredElementType element that is declared by this symbol
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.FindDeclaration(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Restore tree node that declares this symbol
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.IsExplicit">
            <summary>
            Returns true for intentionally declared symbols (like var, {sss:} not just e = ???)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.Offset">
            <summary>
            Offset of symbol declaration in the source file tree
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.SourceFile">
            <summary>
            Owner PSI source file
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.NavigationOffset">
            <summary>
            Offset where name of symbol is specified
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.TopLevel">
            <summary>
            Symbol was declared/used as a top level variable
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.IsGlobalDeclaration">
            <summary>
            Symbol was declared/used in a global java script file (not in HTML)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptSymbol.IsFrameworkDeclaration">
            <summary>
            Symbol belongs to framework
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptLocalBinding.GetScope">
            <summary>
            scope of binding
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ContractAnnotations.Parser.FunctionAnnotationParser.ParseValueExpression" -->
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ContractAnnotations.PreparedAnnotation.WriteArrayElements(System.IO.BinaryWriter,JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Values.JsVariableStateExtended[])">
            <summary>
            Note: doesn't write array length.
            </summary>    
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemoryHiveExt.FilterHive(JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemoryHive,System.Predicate{JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemorySnapshot})">
            <summary>
            
            </summary>
            <param name="hive"></param>
            <param name="filterPredicate"></param>
            <remarks>filterPredicate should not modify snapshot, passed to it!</remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Rules.TableBinaryOpRules.InitTable">
            <summary>
            Should initialize a table used for futher calculations. Please note that this method is being called
            from constructor and, hence, should not assume Derived class will be initialized before its' call.
            </summary>    
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Rules.TableUnaryOpRules.InitTable">
            <summary>
            Should initialize a table used for futher calculations. Please note that this method is being called
            from constructor and, hence, should not assume Derived class will be initialized upon its' call.
            </summary>
            <param name="states"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ValueAnalysisPreprocessingData.DataBuilder.BuildData">
            <summary>
            Returns built ValueAnalysisPreproccessingData. Invalidates builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Js}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Js))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiJavaScriptThemedIcons.Js.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiJavaScriptThemedIcons.Js), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Js&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.Js">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Js Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.Js.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Js}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Js))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.Js.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Js&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.Js.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Js Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.Js"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Js}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Js))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.Js.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Js&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsFunction">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsFunction Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsFunction.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsFunction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsFunction.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsFunction Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsFunction"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsFunction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsLabel">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsLabel Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsLabel.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsLabel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsLabel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsLabel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsLabel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsLabel.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsLabel Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsLabel"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsLabel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsLabel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsLabel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsLabel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsMsAjaxNs Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsMsAjaxNs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsMsAjaxNs))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsMsAjaxNs.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsMsAjaxNs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsMsAjaxNs Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsMsAjaxNs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsMsAjaxNs))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsMsAjaxNs.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsMsAjaxNs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsParameter">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsParameter Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsParameter.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsParameter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsParameter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsParameter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsParameter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsParameter.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsParameter Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsParameter"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsParameter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsParameter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsParameter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsParameter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsProperty">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsProperty Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsProperty.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsProperty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsProperty.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsProperty Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsProperty"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsProperty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsVariable">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsVariable Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsVariable.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsVariable}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsVariable))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsVariable.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsVariable&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsVariable.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsVariable Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons.JsVariable"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.JavaScript.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsVariable}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsVariable))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsVariable.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsVariable&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.CodeStyle.SettingsUprgade.JavaScriptCodeStyleSettings">
            <summary>
            Used for storing and managing of code style settings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.CodeStyle.JavaScriptCodeFormatterBase.FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptLocalElement">
            <summary>
            Local variable of function...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.CommonBindings.NameToExpressionBinding">
            <summary>
            For things like name = expression;
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.CommonBindings.NameToExpressionReturnBinding">
            <summary>
            For things like Object.defineProperty(o, name, { get: expression });
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.CommonBindings.NameToExpressionReverseBinding">
            <summary>
            For things like expression = name;
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.CommonBindings.NameToExpressionExtendBinding">
            <summary>
            For things like $.extend(name, expression);
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.GetPsiServices">
            <summary>
            PsiManager
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.GetReturnType(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JavaScriptResolveContext)">
            <summary>
            When object is a function returns type of the function return value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.GetConstructedType(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JavaScriptResolveContext)">
            <summary>
            If function is an object constructor returns type of the constructed object
            </summary>
            <param name="resolveContext"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.PresentableName">
            <summary>
            Name of type that can be used in presentation...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.IsUnknown">
            <summary>
            Returns if this type contains some meaningful information...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.Signatures">
            <summary>
            Returns signatures of all possible overloads
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.HasSignatures">
            <summary>
            Returns it this symbol can be used as a function (this check is much faster then Signatures.Any())
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.Properties">
            <summary>
            Properties of this object...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptType.ElementType">
            <summary>
            Is this type is instance of Array type returns type of element of array
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.IJavaScriptLocalTypeBinding.GetJsType(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JavaScriptResolveContext)">
            <summary>
            Returns type provided by this binding
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Framework.jQuery.JQueryNotDocumentedFilesFilter">
            <summary>
            Filter out not documented files (preferes -vsdoc.js to bare .js and .min.js)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptFunctionSignature.DocSignature">
            <summary>
            Associated Doc comment signature.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJavaScriptFunctionSignature.SourceFile">
            <summary>
            Source file where signature owner is declared. Required for presentation.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.SymbolFilters.BetterSourceFilesFilter">
            <summary>
            Filters out elements that don't have doc comments (when there are elements with doc comments)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptExpression.GetJsType(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JavaScriptResolveContext,System.Boolean)">
            <summary>
            Returns type of this expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptStatement.ReplaceBy``1(``0)">
            <summary>
            Replace this statement in the tree by the copy of the given statement
            </summary>
            <param name="stmt"></param>
            <returns>The clone of the original statement which was added into the tree </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IReferenceExpressionReference.GetSymbolTable(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JavaScriptResolveContext)">
            <summary>
            Returns symbol table for code completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.Types.JavaScriptArrayType">
            <summary>
            Represents array of elements having particular type. this type extends system Array type.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.Types.JavaScriptFunctionType">
            <summary>
            Represents type of invocable symbol (symbol having signature...)
            this type extends system Array type...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.SymbolFilters.DocCommentsOwnerFilter">
            <summary>
            Filters out elements that don't have doc comments (when there are elements with doc comments)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Services.MinifiedFilesFilter">
            <summary>
            Filter out not documented files (preferes bare .js to .min.js)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Parsing.JavaScriptParser.myStringIntern">
            <summary>
            per-file intern for whitespaces and keywords
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Parsing.JavaScriptParser.myIdentifierIntern">
            <summary>
            global internal for identifiers.
            </summary>
        </member>
    </members>
</doc>
