<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Features.SolBuilderDuo</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuild}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuild&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoBuildSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoBuildSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoCancel Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCancel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCancel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCancel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoCancel Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCancel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCancel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCancel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoClean Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoClean}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoClean))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoClean&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoClean Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoClean}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoClean))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoClean&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoCleanSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCleanSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoCleanSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCleanSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoDebug Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoDebug Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoDebugDontBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoDebugDontBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoDebugSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoDebugSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEnableHeuristics Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEnableHeuristics}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEnableHeuristics Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEnableHeuristics}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilter Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilter Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowAll Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowAll Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowConsole Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowConsole}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowConsole Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowConsole}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowErrors Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowErrors Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowErrorsOnly Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrorsOnly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowErrorsOnly Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrorsOnly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowOutput Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowOutput}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowOutput Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowOutput}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowService Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowService}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowService Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowService}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowWarnings Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowWarnings Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowWarningsAndErrors Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarningsAndErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowWarningsAndErrors Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarningsAndErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRebuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRebuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRebuildSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRebuildSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRepeat Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRepeat}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRepeat))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRepeat&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRepeat Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRepeat}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRepeat))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRepeat&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRun Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRun))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRun Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRun))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRunDontBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRunDontBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRunSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRunSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction">
            <summary>
            Builds either the solution or the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Notifier">
            <summary>
            Notifies that the build is over and the target process is starting.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Notifier.ShowWhenReady(System.Diagnostics.Process)">
            <summary>
            Waits for the process to start pumping, then calls <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Notifier.ShowOnAllDesktops"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.ProjectOrSolution">
            <summary>
            Specifies what to build.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunProjectAction">
            <summary>
            Builds the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunSolutionAction">
            <summary>
            Builds the solution using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction">
            <summary>
            Runs the target application that is specified in the active configiration of the startup project in the current solution.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.mySpawnedProcesses">
            <summary>
            The list of processes spawned by us. They should be killed when doing build-and-run.
            To be accessed from the UI thread only.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.CloseSpawnedProcesses">
            <summary>
            Sends a close control to the processes we have spawned that are still running.
            The processes are not killed, ie any “do you want to close” windows will hold them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.StartProcess">
            <summary>
            Starts the startup project process.
            Reports to the user and returns <c>Null</c> on failures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.OnSpawnedProcessExited(System.Object,System.EventArgs)">
            <summary>
            The process has exited, unwatch it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.NotifyTargetProcessStarted">
            <summary>
            Gets whether to notify of target process started.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitForTargetProcess">
            <summary>
            Gets whether to wait for the target process to exit before running the build-and-run action.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup">
            <summary>
            Popups up a window that says which processes we're waiting for, and closes when done waiting.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.WaitFor(System.Collections.Generic.ICollection{System.Diagnostics.Process})">
            <summary>
            Spawns the popup, returns whether to go on building.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.CheckProcesses">
            <summary>
            Re-check the running processes.
            Update text, close if done.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closing"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.Execute(JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.ItemDesc,JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.IProject[])">
            <summary>
            Isolated build action implementation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.GetSelection(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Gets the selected projects to build (for the build actions that run on selection).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.RunPostBuild(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.ItemDesc.RunOrDebug,JetBrains.Threading.IThreading,JetBrains.VsIntegration.ProjectModel.VSSolutionManager,Microsoft.VisualStudio.Shell.Interop.IVsDebugger2)">
            <summary>
            Runs the post-build action on the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.JetBrains#ActionManagement#IActionHandler#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.JetBrains#ActionManagement#IActionHandler#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderCancelAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderCancelAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderTempActions.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderTempActions.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.myIsExclusive">
            <summary>
            Whether all other kinds should be suppressed when selecting this one.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.myKinds">
            <summary>
            Kinds corresponding to this filter.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache">
            <summary>
            A list of <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash"/> and <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature"/> objects for storing during the build and between sessions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.GetCachePathForSolutionFile(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the standard path for the cache that lives alongside the solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.Load(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache@)">
            <summary>
            Loads the cache and returns the token for later saving it back.
            If the cache is missing, or if the algorithm version is outdated, returns a clean copy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.GetAssemblySurfaceHash(JetBrains.Util.FileSystemPath)">
            <summary>
            Looks up an existing hash by assembly path, if it's available and still valid, or computes a new one.
            Does not throw if missing. The caller does not need to know if it were missing or not.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.RemoveProjectSignature(JetBrains.Util.FileSystemPath)">
            <summary>
            Removes the signature, if present. Does nothing if missing.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.ReplaceProjectSignature(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature)">
            <summary>
            Sets a new signature for the project, removing the old one.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.TryGetProjectBuildSignature(JetBrains.Util.FileSystemPath)">
            <summary>
            Tries to look up the project signature, returns <c>Null</c> if missing. Should NOT create a new one if missing, these are quite different cases.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.CurrentAlgorithm">
            <summary>
            <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.Algorithm"/> for the currently running implementation.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache.Algorithm">
            <summary>
            The algorithm ID of the current implementation.
            Each time the impl is changed, produce a new ID here. 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash">
            <summary>
            Holds a hash of the assembly's public API surface.
            Whenever there is a breaking change in the surface, all of the projects referencing this assembly must be rebuilt.
            The equality is not strict, it checks assembly name, version, and surface hash only (modification time is ignored).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.OptionDumpSignature">
            <summary>
            Whether to dump the XML Signature file to disk. Debug option.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.#ctor(JetBrains.Util.FileSystemPath)">
            <summary>
            Captures the signature from the file.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.#ctor">
            <summary>
            Default ctor, used for serialization.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.StrictEqualityComparer">
            <summary>
            Compares for equality using all the fields, which includes modification time.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.IsUpToDate">
            <summary>
            Checks if this signature is still up-to-date for its file (only timestamp is considered).
            If not, you should create a new one with the ctor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.ComputeHash_Block(JetBrains.Util.FileSystemPath)">
            <summary>
            Old impl. Gets the whole XML signature as a document, writes into a stream, then calcs the hash. Uses a lot of memory on most sizable assemblies.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.ComputeHash_Stream(JetBrains.Util.FileSystemPath)">
            <summary>
            New impl. Streams the XML Signature producer into the hashing stream consumer. Uses much less memory and has better perf.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.EqualsStrict(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash)">
            <summary>
            Includes modification time also.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.GetHashCodeStrict(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash)">
            <summary>
            Includes modification time also.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.Equals(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.AssemblyName">
            <summary>
            The serialized form of the <see cref="T:System.Reflection.AssemblyName"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.FullPath">
            <summary>
            Full path to the assembly. This is the key.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.ModificationTime">
            <summary>
            Modification time of the a
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash.PublicApiHash">
            <summary>
            The public API surface of the assembly, compacted with a hash.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceSerializerOnTheFly">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceSerializerOnTheFly.Run(JetBrains.Metadata.Reader.API.IMetadataAssembly,System.IO.Stream)">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceSerializerOnTheFly.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature">
            <summary>
            When a project is built, records the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceHash"/> of the assemblies that are its project references, to check on the next build whether they have changed or not.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature.HasBreakingChangesAgainst(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature)">
            <summary>
            Compares this signature to the prev one, checks if there were any breaking changes. If no, the build is not necessary.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature.HasChangesAgainst(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature)">
            <summary>
            Compares this signature to the prev one, checks if there were any breaking changes, and if those are breaking changes. If no, the build is not necessary.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature.ProjectFileFullPath">
            <summary>
            The identity of the item.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature.ProjectReferenceOutputs">
            <summary>
            Output DLLs of the things referenced by this project — their public API hashes.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml">
            <summary>
            Runs searches and transformations on an MSBuild project.
            Works on the XML serialized representation of an MSBuild project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.XmlnsMsbuild">
            NOTE: namespace could be extracted from C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild\Microsoft.Build.Core.xsd file 
             
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.CreateUsingTaskElement(System.Xml.XmlDocument,System.Type)">
            <summary>
            MSBuild "UsingTask" element.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.FindBeginLevelComment(System.Int32,System.Xml.XmlElement)">
            <summary>
            There's a comment node in the beginning of each level. Finds it based on any node in the level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.FindEndLevelComment(System.Int32,System.Xml.XmlElement)">
            <summary>
            There's a comment node in the end of each level. Finds it based on any node in the level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.GetBeginLevelCommentText(System.Int32)">
            <summary>
            Marks the beginning of tasks related to the given build level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.GetBuildLevelItemGroupName(System.Int32,System.Nullable{JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.ProjectBuildSignature.ChangesKind})">
            <summary>
            Each build level has a set of projects. MSBuild has an item group for each level (pass <c>Null</c> as <paramref name="changeskind"/>).
            After we execute our heuristics, we toss that set into a few item groups, one for each value of <paramref name="changeskind"/>.
            </summary>
            <param name="nLevel">Build level number (as in solution file).</param>
            <param name="changeskind">Which set of projects (<c>Null</c> for MSBuild original, otherwise projects with given kind of changes).</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.GetEndLevelCommentText(System.Int32)">
            <summary>
            Marks the end of tasks related to the given build level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.GetSolutionBuildLevels(System.Xml.XmlDocument)">
            <summary>
            In a solution-induced project files, looks for per-config build levels.
            The outer list contains levels.
            The inner list contains project identities.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.MakeBuildConditional(System.Xml.XmlDocument,System.Type,System.Action{System.Int32,System.Xml.XmlElement})">
            <summary>
            Augments the Build target of the project so that it asked which projects actually have to be built before starting each of the build levels.
            </summary>
            <param name="xmlProject">A valid MSBuild project. Its structure is expected to be converted from a solution.</param>
            <param name="typeConditionalFilterTaskClass">The class of the task to be called.</param>
            <param name="FAddTasksAroundMsbuildCall">We'd insert one more task call per level for filtering the projects to be built. This allows to insert any more tasks per build level, as required by client. Integer parameter is the zero-based build level number, and the element is the call to the MSBuild task that builds the level.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.MakeBuildConditional_EachTarget(System.Xml.XmlDocument,System.String,System.Type,System.Action{System.Int32,System.Xml.XmlElement})">
            <summary>
            Per-target (Build, Rebuild, Clean).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.MakeBuildConditional_Target_AroundMsbuildTask(System.Xml.XmlElement,System.Type,System.Action{System.Int32,System.Xml.XmlElement})">
            <summary>
            Each build level call (MSBuild on projects of the level) in the target.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.MakeBuildConditional_Target_AroundMsbuildTask_InsertConditionalFilterTask(System.Int32,System.Xml.XmlElement,System.Type)">
            <summary>
            Common task for making the build conditional by filtering out projects to be built in the next level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.MakeBuildConditional_Target_AroundMsbuildTask_TaskItself(System.Xml.XmlElement,System.Int32@)">
            <summary>
            Augmenting the MSBuild task.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.BuildConfiguration">
            <summary>
            Defines the two-component build configuration.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.BuildConfiguration.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.BuildConfiguration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.BuildConfiguration.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.BuildConfiguration.Equals(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.MsbuildProjectTransformerXml.BuildConfiguration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics">
            <summary>
            Heuristics to shorten the build by skipping certain projects.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics.ByDate">
            <summary>
            Classic build mode. If any of the inputs is newer than any of the outputs, the project is built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics.ByApiSurface">
            <summary>
            Hi-speed mode. Like <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics.ByDate"/>, but with one exception: if the breaking input is a project reference, and the public API surface had no breaking changes since the last build, the build of this project can be skipped.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolutionFileConverter">
            <summary>
            From a solution file, produces an MSBuild project file suitable for running a build over it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolutionFileConverter.RunConverter(JetBrains.Util.FileSystemPath,System.Boolean)">
            <summary>
            Runs the MSBuild internal converter.
            </summary>
            <returns>
            MSBuild project, from the solution file.
            Non-empty after the conversion is run.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolutionFileConverter.RunConverter(JetBrains.Util.FileSystemPath,Microsoft.Build.BuildEngine.Engine)">
            <summary>
            Runs the MSBuild internal converter.
            </summary>
            <returns>
            MSBuild project, from the solution file.
            Non-empty after the conversion is run.
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId">
            <summary>
            An ID of the project, as being built by MSBuild.
            Each time the project is built, even within the same build process, it gets a new ID.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId.NodeId">
            <summary>
            The node on which the project is running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId.ProjectContextId">
            <summary>
            The local project Id on the node identified by <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId.NodeId"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.SolBuilderDuoMsbuildEventConverter">
            <summary>
            Converts between MSBuild event and our build event data classes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.SolBuilderDuoMsbuildEventConverter.ConvertFrom(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            Generic method, checks from which args to convert from.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.AssemblySurfaceSerializer">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.AssemblySurfaceSerializer.Run(JetBrains.Metadata.Reader.API.IMetadataAssembly)">
            <summary>
            Takes an assembly and serializes its public API surface into an XML Document.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.BuildLevelConditionalFilterSatellite">
            <summary>
            This task is executed on the build side before building the next pack of non-interdependent projects and filters out those projects that should not be built.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.BuildLevelConditionalFilterSatellite.Execute">
            <summary>
            Executes a task.
            </summary>
            <returns>
            true if the task executed successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.BuildLevelConditionalFilterSatellite.BreakingChanges">
            <summary>
            The filtered-down list of projects on this build level.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.BuildLevelConditionalFilterSatellite.Input">
            <summary>
            The original list of projects on this build level.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.BuildLevelConditionalFilterSatellite.Level">
            <summary>
            Supplemetary parameter for tracing out the progress. The actual build level number.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.IMainMsbuildNode">
            <summary>
            Runs in the process that hosts the MSBuild engine (main node), receives notifications and questions from the build process on all of the nodes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.IMainMsbuildNode.QueryBuildProjects(System.String[])">
            <summary>
            Before building each of the projects, the builder asks whether the project actually has to be built.
            </summary>
            <param name="itemspecs">Identities of the projects to check.</param>
            <returns>Identities of the projects that have to be built.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildNodeData">
            <summary>
            A class that saves the state on each of the MSBuild nodes (including the main one that runs alongside MSBuild engine).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildNodeData.QueryBuildProjects(System.String[])">
            <summary>
            Reports to the host that the given project was considered up-to-date and was not built.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine">
            <summary>
            Runs searches and transformations on an MSBuild project.
            Works on the native MSBuild representation of an MSBuild project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.XmlnsMsbuild">
            NOTE: namespace could be extracted from C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild\Microsoft.Build.Core.xsd file 
             
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.MakeBuildConditional(Microsoft.Build.BuildEngine.Project)">
            <summary>
            Augments the Build target of the project so that it asked which projects actually have to be built before starting each of the build levels.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.BuildConfiguration">
            <summary>
            Defines the two-component build configuration.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.BuildConfiguration.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.BuildConfiguration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.BuildConfiguration.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.BuildConfiguration.Equals(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.MsbuildProjectTransformerEngine.BuildConfiguration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger">
            <summary>
            An MSBuild logger that runs on remote MSBuild nodes and listens to the build events inplace with an ability to filter them down.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Subscribes loggers to specific events. This method is called when the logger is registered with the build engine, before any events are raised.
            </summary>
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)">
            <summary>
            </summary>
            <param name="eventSource">An <see cref="T:Microsoft.Build.Framework.IEventSource" /> object representing the build event source.</param>
            <param name="nodeCount">The number of CPUs.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger.Shutdown">
            <summary>
            Releases the resources allocated to the logger at the time of initialization or during the build. This method is called when the logger is unregistered from the engine, after all events are raised. A host of MSBuild typically unregisters loggers immediately before quitting.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger.BuildEventRedirector">
            <summary>
            Get or set by the build engine to allow node loggers to forward messages to the central logger.
            </summary>
            <returns>
            An <see cref="T:Microsoft.Build.Framework.IEventRedirector" /> representing the event redirector to forward messages to.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger.NodeId">
            <summary>
            Get or set by the build engine or node to inform the forwarding logger on which node it is running.
            </summary>
            <returns>
            An integer representing the node ID on which the build engine is running.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger.Parameters">
            <summary>
            Gets or sets the user-defined parameters of the logger. 
            </summary>
            <returns>
            The logger parameters.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Legacy.SolBuilderDuoMsbuildSecondaryNodeLogger.Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            <returns>
            One of the enumeration values. The default is <see cref="F:Microsoft.Build.Framework.LoggerVerbosity.Normal" />.
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic">
            <summary>
            When we're entering a build level, we'd filter which projects are to be built and which are not.
            This class implements the logic and supporting structures.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic.ProjectDecisions">
            <summary>
            <para>Reports the decisions made for each encountered project (whether it should be built or not).</para>
            <para><c>NULL</c> means the project was totally skipped from the build.</para>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic.ReportProjectHasBreakingChanges(JetBrains.Util.FileSystemPath)">
            <summary>
            Reports the project as having breaking changes (it will be built regularily).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic.ReportProjectHasNoChanges(JetBrains.Util.FileSystemPath)">
            <summary>
            Reports the project as up-to-date (it will not be built regularily, and copy-to-output will not be invoked for it): Started state, up-to-date notification, Completed state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic.ReportProjectHasNonBreakingChanges(JetBrains.Util.FileSystemPath)">
            <summary>
            Reports the project as having nonbreaking changes (it will not be built regularily, but copy-to-output will be possibly invoked for it): Started state, up-to-date notification; Completed state will be set after copying the outputs.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic.ReportProjectSkipped(JetBrains.Util.FileSystemPath)">
            <summary>
            <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic.FilterBuildLevelProjects(System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath},System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath}@,System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath}@,System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath}@)"/> ruled out that the project should not take part in the build at all (note that project-with-no-changes is still taking part in the build, but most of the steps are skipped for it).
            </summary>
            <param name="pathProject"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic.OnBuildLevelBegin(System.Int32,System.Collections.Generic.List{JetBrains.Util.FileSystemPath})">
            <summary>
            Notifies that we've started building a new level.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.AssertIsBuildingStatesConsistent">
            <summary>
            Makes sure each project is built no more than once.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.DeleteWorkingFilesAfterCleanSeverityBuild">
            <summary>
            After a build whose severity is <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity.Clean"/> is completed, deletes all working files of the solution builder.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildAbortedMonitor">
            <summary>
            Monitors the mutex which signals that the build should be aborted ASAP.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildAbortedMonitor.IsBuildAborted">
            <summary>
            Whether the build has been aborted by the controlling entity.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates">
            <summary>
            Manages whether the project is currently being built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates.ProjectsBeingBuilt">
            <summary>
            Lists the projects whose build is currently in the running state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates.IsBuildRunning">
            <summary>
            Whether the whole build process is currently running.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates.ProjectBeingBuilt">
            <summary>
            Info on a project listed in the projects being built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates.ProjectBeingBuilt.ProjectPath">
            <summary>
            Path to the project (this is the project identity).
            This is the object's identity field.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates.ProjectBeingBuilt.IsAnyBuildOperationsReported">
            <summary>
            Whether the project is not just in the running state but also has had any build operations reported for it.
            Does not affect object identity.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates.ProjectBeingBuilt.RunningTargetNames">
            <summary>
            When a target is being built for this project, reports its name.
            Note that it might become <c>Null</c> in between each two targets.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe">
            <summary>
            MSBuild might send multiple or inconclusive events about a project being started for build or completed. Do all the necessary checks before supplying the states to <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates"/> so that to guarantee each project is in the building state only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.myHashProjectsEverStarted">
            <summary>
            Protected with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.myLock"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.myHashProjectsRunning">
            <summary>
            Protected with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.myLock"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.myHashProjectsBuildOperationsEverStarted">
            <summary>
            Protected with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.myLock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.ReportProjectBuildNotRunning(JetBrains.Util.FileSystemPath)">
            <summary>
            Sets the project to the completed state (if it's running — otherwise, <c>False</c> is returned).
            NOTE: we have multiple indications that the project MUST now be completed, and call this method on any of them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.ReportProjectBuildRunning(JetBrains.Util.FileSystemPath)">
            <summary>
            Sets the project to the started state (if it were not ever set in this session — if were, <c>False</c> is returned).
            NOTE: we have multiple indications that the project MUST now be running, and call this method on any of them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.ReportProjectsBuildLevelEnded">
            <summary>
            Close running state for all projects on the level
            Do this even when aborted (eg for nonbreaking-changes projects for which copy-to-output was ran)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.ReportProjectBuildOperationsStarted(JetBrains.Util.FileSystemPath)">
            <summary>
            When MSBuild task is executed on a group of projects in multi-node mode, Project Started is immediately reported for all the projects, even though they're not being built yet (waiting for a free node).
            When we see the first event for a project, report this event as an actual build start for it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.ReportProjectTargetStarted(JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            As build enters building a target on some top-level project, reports the state.
            Note that targets might possibly be nested, eg when executing the <c>CallTarget</c> intrinsic task.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ModifyIsBuildindStatesSafe.ReportProjectTargetFinished(JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            As build leaves building a target on some top-level project, reports the state.
            Note that targets might possibly be nested, eg when executing the <c>CallTarget</c> intrinsic task.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess">
            <summary>
            Places reflection calls into the engine of MSBuild4, mainly for the means of <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.ProjectInfoCollectionModes.TamperingWithProjectInstance"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.GetMaxNodeCount">
            <summary>
            Gets the <c>MaxNodeCount</c> parameter of the <c>BuildParameters</c>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.IsAvailable">
            <summary>
            Whether the required MSBuild4 types were detected in the running environment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.GetProjectInstance(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the <c>ProjectInstance</c> object for the currently building project identified by its path <paramref name="pathProject"/>.
            TODO: need to specify also ToolsVersion for guaranteed disambig.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.BuildManager">
            <summary>
            Gets the build manager instance object, throws if unavailable (see <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.IsAvailable"/>).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.Strings.ProjectTaskInstance_Condition">
            <summary>
            Public Condition property, for reading.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.Strings.ProjectTaskInstance_condition">
            <summary>
            Private condition field, for writing.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.ProjectInstance">
            <summary>
            Exposes reflection access to <c>ProjectInstance</c> class.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.ProjectInstance.GetTaskOutputItemGroupNames(System.String,System.String,JetBrains.Util.OnError)">
            <summary>
            Looks up the task in the target, and collects all of the item group names into which any of the task outputs are emitting items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.ProjectInstance.GetTaskItems(System.String,JetBrains.Util.OnError)">
            <summary>
            Gets task items by name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.ProjectInstance.GetAllTaskItems(JetBrains.Util.OnError)">
            <summary>
            Gets all task items in the project.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.ProjectInstance.SetTaskCondition(System.String,System.String,System.String,JetBrains.Util.OnError)">
            <summary>
            Finds the target/task and changes the condition on it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.ProjectInstance.AddTaskItem(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskItemCollectedInfo,JetBrains.Util.OnError)">
            <summary>
            Adds a new taskitem to the project.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess.ProjectInstance.GetGlobalProperties(JetBrains.Util.OnError)">
            <summary>
            Gets the dictionary of global properties this project was evaluated with, if any.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.ProjectInfoCollectionMode">
            <summary>
            The way we're getting the additional info which we require for our heuristics and build speedups.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.Init_Tampering_ReplaceTargetRunWithItsOutputItems_Begin(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess,JetBrains.Util.FileSystemPath,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Collections.Generic.JetHashSet{JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskItemCollectedInfo}}})">
            <summary>
            The target whose run is to be replaced with cached data is about to run.
            Check if we got the cached data (supply to build engine and suppress all target tasks then), or if we should run the target normally and cache what it supplies.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.Init_Tampering_ReplaceTargetRunWithItsOutputItems_End(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess,JetBrains.Util.FileSystemPath,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Collections.Generic.JetHashSet{JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskItemCollectedInfo}}})">
            <summary>
            The target whose run is to be replaced with cached data has just completed its run.
            If we were running it normally to then collect and cache its output data, do the caching.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.Init_Tampering_EnsureInfoCollectedAfterProjectBuild(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess,JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.BuildLevelProjectsLogic)">
            <summary>
            Project has completed building; make sure we've collected the minimal info out of it (this includes what we need to do heuristics, and does not include cached task items for overridden tasks).
            Does nothing on the Clean scenario.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.Init_Tampering_OnProjectBuildBegin(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess,JetBrains.Util.FileSystemPath)">
            <summary>
            Gather project inputs when project build begins.
            We shouldn't be getting in here in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity.Clean"/> case.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.Init_Tampering_OnBeginResolveAssemblyReferences(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess,JetBrains.Util.FileSystemPath)">
            <summary>
            When we begin the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildFile.Targets.ResolveAssemblyReferences"/> target, sees if we could circumvent running the lengthy task and replace it with supplying cached info.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.Init_Tampering_OnEndResolveAssemblyReferences(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess,JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.SolutionBuildDataProjectHashesCalculator)">
            <summary>
            Just done building <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildFile.Targets.ResolveAssemblyReferences"/> target of some project (and <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.Init_Tampering_OnBeginResolveAssemblyReferences(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.Msbuild4ReflectionAccess,JetBrains.Util.FileSystemPath)"/> method let the task to execute instead of providing with cached info), good time to collect its references.
            <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescriptionCollectedInfo.ReferencedAssemblies"/> is the useful part on which we do the hashes.
            <see cref="!:ProjectDescriptionCollectedInfo.ResolveAssemblyReferenceTaskItems"/> is the cache of the task output to replace the task with cache data injection next time we're about to run it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.CollectProjectInfoOnLevelBegin(JetBrains.Util.FileSystemPath,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            As the build of the level begins, we're called by the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.CollectProjectInfoTask"/> to update collected info on projects taking part in this level.
            In the mode when we're not tampering with MSBuild build process, this is the only chance to collect cached info about the projects (which includes calling a sandbox MSBuild engine to collect project references and get project outputs).
            In the mode when we're tampering with MSBuild build process, we're capturing this information right out of the build process.
            </summary>
            <param name="pathProject">Path to the project file.</param>
            <param name="properties">Properties setting up the build — to be passed to the sandbox MSBuild engine when calling information retrieval targets.</param>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.ProjectInfoCollectionModes.None">
            <summary>
            We're running plain MSBuild build, do not waste time on running sandbox engine or risk calling internal APIs. We do not need the info.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.ProjectInfoCollectionModes.SandboxMsbuildEngine">
            <summary>
            As the build level begins, run a sandbox MSBuild engine for each of the dated projects and read out the results. Classic version, works with any MSBuild, involves only public APIs (but requires some knowledge of the targets semantic and involved item group names).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.ProjectInfoCollector.ProjectInfoCollectionModes.TamperingWithProjectInstance">
            <summary>
            Right during the build, peek into the running <c>RequestBuilder</c> to get the item groups and properties from the <c>ProjectInstance</c>.
            Also, skip the <c>ResolveAssemblyReferences</c> task to replace it with the info collected on the previous run.
            Crafted to work specifically with MSBuild4. Involves calling internal APIs thru reflection.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SolutionBuildDataLoader">
            <summary>
            Loads cached solution build data from the previous run.
            Cleans it up if it's outdated with the new solution/projects state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SolutionBuildDataLoader.SolutionBuildData">
            <summary>
            Gets the cached data on the solution build.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SwitchingMsbuildExeHeuristicsHandler">
            <summary>
            Chooses which heuristics handler to employ.
            Exposes ythe heuristics handler interface to be imported.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.IMsbuildExeHeuristicsHandler">
            <summary>
            In the MSBuild.exe version of SolBuilderDuo, manages the heuristics of when to skip building a project.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.IMsbuildExeHeuristicsHandler.QueryBuildProject(JetBrains.Util.FileSystemPath)">
            <summary>
            Asks whether the project should be handed to MSBuild for building.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.TrackProjectsToBeBuilt">
            <summary>
            Has the list of projects to be built in this session. Updates the list by removing schedulled projects as more projects are built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.TrackProjectsToBeBuilt.myProjectsMustBeBuiltPending">
            <summary>
            Projects from <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.TrackProjectsToBeBuilt.myProjectsMustBeBuiltTotal"/> not yet built by the session. When empty, the build is done.
            <c>Null</c> means build all.
            Contents (not the field) locked with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.TrackProjectsToBeBuilt.myLock"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.TrackProjectsToBeBuilt.myProjectsMustBeBuiltTotal">
            <summary>
            These projects must be built by the session. After building them it's no need to proceed.
            <c>Null</c> to build all.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.TrackProjectsToBeBuilt.IsAllRequiredProjectsDone">
            <summary>
            We had to build only a few projects, and those are already thru.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.UploadEventsOnIsBuildingStates">
            <summary>
            As project/whole build running state changes in <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.IsBuildingStates"/>, uploads events to the client.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.CollectProjectInfoTask">
            <summary>
            After we made MSBuild calc referenced assemblies for us, notify our MainNode of the resulting list.
            It will then upload all of the collected info to the project description, and collect some more that cannot be done right within MSBuild (eg input files list).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskBase">
            <summary>
            Base MSBuild task.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskBase.Execute">
            <summary>
            Executes a task.
            </summary>
            <returns>
            true if the task executed successfully; otherwise, false.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.CollectProjectInfoTask.Project">
            <summary>
            The project we're processing. Called once per each project on the level (<see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.CollectProjectInfoTask.Properties"/> might be different in Configuration|Platform for each project).
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.CollectProjectInfoTask.Properties">
            <summary>
            Properties like Configuration and Platform for the <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.CollectProjectInfoTask.Project"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelBeginTask">
            <summary>
            The very first task to be called on a build level.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelBeginTask.Level">
            <summary>
            Supplemetary parameter for tracing out the progress. The actual build level number.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelBeginTask.Projects">
            <summary>
            The original list of projects on this build level.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask">
            <summary>
            The very last task to be called on a build level.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.BreakingChanges">
            <summary>
            The projects on this build level (from <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.Projects"/>) that have breaking changes.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.Level">
            <summary>
            Supplemetary parameter for tracing out the progress. The actual build level number.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.NoChanges">
            <summary>
            The projects on this build level (from <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.Projects"/>) that have no changes.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.NonBreakingChanges">
            <summary>
            The projects on this build level (from <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.Projects"/>) that have non-breaking changes.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.LevelEndTask.Projects">
            <summary>
            The original list of projects on this build level.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildEngineProjectOperations">
            <summary>
            Can extract information from project files by the means of the MSBuild Engine, without using our Project Model.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildEngineProjectOperations.MsbuildAreInputsNewerThanOutputsNoReferencedProjects(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine)">
            <summary>
            Checks if the project has to be rebuilt, ignoring its project references.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildEngineProjectOperations.MsbuildCollectProjectInfo(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Uses MSBuild to read the project file, evaluate props/itemgroups, and collect its input/output files.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildEngineProjectOperations.MsbuildCopyReferencesToOutputFolder(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine)">
            <summary>
            Causes the project to copy its referenced DLLs and project outputs to its output folder.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildEngineProjectOperations.MsbuildCreateProjectBuildSignature(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache)">
            <summary>
            For a project, builds its up-to-date signature, so that it then could be compared to the one in the cache.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildEngineProjectOperations.MsbuildGetProjectTargetDir(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine)">
            <summary>
            The directory with target files of the project (might not be existing on disk if not yet built).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildEngineProjectOperations.MsbuildGetReferencedAssemblies(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine)">
            <summary>
            Gets the assemblies referenced by the project. This includes both DLL references and output assemblies of the project references.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBootstrapTask">
            <summary>
            This task is emitted into the small bootstrap MSBuild project. It emits the main build file before execution is passed to that file.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask">
            <summary>
            This task is executed on the build side before building the next pack of non-interdependent projects and filters out those projects that should not be built.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.BreakingChanges">
            <summary>
            The projects on this build level (from <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.Input"/>) that have breaking changes.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.Input">
            <summary>
            The original list of projects on this build level.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.Level">
            <summary>
            Supplemetary parameter for tracing out the progress. The actual build level number.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.NoChanges">
            <summary>
            The projects on this build level (from <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.Input"/>) that have no changes.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.NonBreakingChanges">
            <summary>
            The projects on this build level (from <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeBuildLevelConditionalFilterTask.Input"/>) that have non-breaking changes.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeByDateHeuristicsHandler">
            <summary>
            Implements <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics.ByDate"/> — yields decision to MSBuild proper.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer">
            <summary>
            Adds needed tasks when the solution file is transformed into an MSBuild project file.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.ItemGroupName_ReferencedAssemblies">
            <summary>
            References gotten out of MSBuild task on the project being inspected.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.ItemGroupName_ReferencedAssembliesWithMetadata">
            <summary>
            <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.ItemGroupName_ReferencedAssemblies"/>, with metadata identifying the originating project.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.AddTasks(System.Int32,System.Xml.XmlElement)">
            <summary>
            Adds needed tasks when the solution file is transformed into an MSBuild project file.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.AddTasks_SetBuildProjectReferencesFalseOnMsbuildTask(System.Xml.XmlElement)">
            <summary>
            Even though BuildingSolutionFile property is True, sometimes MSBuild would recurse into building referenced projects.
            Force preventing this by setting BuildProjectReferences to False explicitly.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.AddTasks_CollectProjectInfo(System.Int32,System.Xml.XmlElement)">
            <summary>
            Adds task call.
            The task takes the list of projects and returns those of them whose assembly references must be updated. This allows to avoid requesting that info from MSBuild for up-to-date projects.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.AddTasks_CopyReferencesToOutputFolder(System.Int32,System.Xml.XmlElement)">
            <summary>
            After executing MSBuild task on level, for those project we've skipped due to the heuristics (but only those with nonbreaking changes; don't touch totally unchanged projects), we should copy outputs of their references to their output folder.
            Note: could be skipped if all of the involved projects have the same targetdir.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.CopyAllOtherAttributesFromMsbuildTask(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            When creating a new MSBuild task, copies all of the attributes from the sample task if they're missing from the new one.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.GetXmlForSolutionFile(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine)">
            <summary>
            Uses MSBuild Engine to convert the plaintext SLN file into an MSBuild project.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.GetProjectFullPathByTaskItem(Microsoft.Build.Framework.ITaskItem,JetBrains.Util.FileSystemPath)">
            <summary>
            Gets a project full path by a project identity, which is either a solution-relative project item spec, or a full project file path.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.GetProjectItemsByFullSpec(JetBrains.Util.FileSystemPath,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ITaskItem})">
            <summary>
            Gets full paths of project items (be they absolute or relative).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.TasksImplementation">
            <summary>
            Tasks we inject all dispatch into methods of this class after converting parameters from MSBuild types into our types.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.MsbuildExeSolutionFileTransformer.TasksImplementation.CollectProjectInfo(Microsoft.Build.Framework.ITaskItem,System.String[])">
            <summary>
            We've collected some info right in MSBuild solution script, report to ProjectDescription.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescription">
            <summary>
            Part of <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescription.AreInputFilesNewerThanOutputFiles">
            <summary>
            Checks if there are any <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescriptionCollectedInfo.InputFiles"/> newer than any <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescriptionCollectedInfo.OutputFiles"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescription.GetCollectedInfo">
            <summary>
            Gets <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescription.CollectedInfo"/>, throws if null.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescription.CollectedInfo">
            <summary>
            Before building the projects in the level, we collect their info (or use what's cached from previous runs).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescriptionCollectedInfo.CachedTargetOutputItems">
            <summary>
            Task items (keyed by the name of the target which produced them), cached for the next run.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescriptionCollectedInfo.DetectChangesAgainstCurrentAssemblies(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache)">
            <summary>
            Checks the hashes recorded here (from the last successful build) and checks against the up-to-date filesystem state.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskItemCollectedInfoBlob">
            <summary>
            A list of <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskItemCollectedInfo"/> serialized as a blob — for quick reading/writing with BinaryFormatter.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine">
            <summary>
            An MSBuild engine separate from what's running our main build, needed for reading project properties (sometimes this cannot be done with MSBuild from the main solution file).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Components.SandboxMsbuildEngine.WithMsbuildProject(JetBrains.Util.FileSystemPath,System.Collections.Generic.IDictionary{System.String,System.String},System.Action{Microsoft.Build.BuildEngine.Project})">
            <summary>
            Spawns a live MSBuild engine and loads the project — for evaluating properties/item-groups, and executing tasks.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData">
            <summary>
            Complete data we need to serialize between the builds to optimize access and execute heuristics.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetAllSolutionSatelliteFiles(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the list of all of the files we create beside the solution to conduct the build.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetBootstrapProjFilePath(JetBrains.Util.FileSystemPath)">
            <summary>
            We feed this into MSBuild.exe so that it emitted the solution build file (<see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetSolutionMsbuildProjFilePath(JetBrains.Util.FileSystemPath)"/>) — hence bootstrapped — and then built that emitted solution file.
            </summary>
            <seealso cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetAllSolutionSatelliteFiles(JetBrains.Util.FileSystemPath)"/>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetSolutionBuildDataFilePath(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the standard path for the cache that lives alongside the solution file.
            </summary>
            <seealso cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetAllSolutionSatelliteFiles(JetBrains.Util.FileSystemPath)"/>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetSolutionMsbuildProjFilePath(JetBrains.Util.FileSystemPath)">
            <summary>
            As we patch the solution file with conditionals and heuristics, we save it there and feed into MSBuild.exe.
            </summary>
            <seealso cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.GetAllSolutionSatelliteFiles(JetBrains.Util.FileSystemPath)"/>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.Load_BinaryFormatter(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath)">
            <summary>
            Loads the cache and returns the token for later saving it back.
            If the cache is missing, or if the algorithm version is outdated, returns a clean copy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.Load_XamlSerializer(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath)">
            <summary>
            Loads the cache and returns the token for later saving it back.
            If the cache is missing, or if the algorithm version is outdated, returns a clean copy.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.CurrentAlgorithm">
            <summary>
            <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.Algorithm"/> for the currently running implementation.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData.Algorithm">
            <summary>
            The algorithm ID of the current implementation.
            Each time the impl is changed, produce a new ID here. 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionDescription">
            <summary>
            Part of <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionBuildData"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionDescription.IsProjectDescriptionValid(JetBrains.Util.FileSystemPath)">
            <summary>
            Checks that the project description is present and is not empty. Does NOT check its up-to-dateness.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.SolutionDescription.IsValid">
            <summary>
            Whether this object has been populated with any info.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.TaskItemCollectedInfo">
            <summary>
            Represents <see cref="T:Microsoft.Build.Framework.ITaskItem"/> for storing in the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.ProjectDescriptionCollectedInfo"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload">
            <summary>
            Runs in the MSBuild.exe main node process, belongs to the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode">main node</see>, uploads events thru a pipe to the client (eg UI in VS).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.myBinaryFormatter">
            <summary>
            Cached upload serializer.
            Protected with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.myLockUploadPipe"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.myCacheUploadPipe">
            <summary>
            Don't use, backend of <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.GetUploadPipe"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.myLockUploadPipe">
            <summary>
            Locks upload (in case MSBuild in some version chooses to send secondary node messages in parallel).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.mySerializationBuffer">
            <summary>
            <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.myBinaryFormatter"/> buffer.
            MUST NOT serialize directly into the pipe stream, because the pipe works in message mode, in which case one write is one message =&gt; must write the whole data in one chunk, which is violated by binary formatter (uses multiple small writes into the stream).
            Protected with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.myLockUploadPipe"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.UploadEvent(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerBaseEvent)">
            <summary>
            Uploads the given build event to the pipe, setting up the connection as needed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.GetUploadPipe">
            <summary>
            Connects and holds the pipe for uploading the build events.
            Must be protected with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.myLockUploadPipe"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerBaseEvent">
            <summary>
            Base class of events transmitted over the pipe (<see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeBuildEventsUpload.GetUploadPipe"/>).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerLogEvent">
            <summary>
            Reports a build log event.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerLogEvent.BuildEvent">
            <summary>
            The event data itself (could be a derived class).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerLogEvent.ProjectPath">
            <summary>
            The project the event belong to, or <c>Null</c> if it's a non-project event.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerProjectBuildStateEvent">
            <summary>
            Notifies of build state changes for a project or the session in the whole.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerProjectBuildStateEvent.BuildState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerProjectBuildStateEvent.ProjectPath">
            <summary>
            Path to the project, or <c>Null</c> if it's session-global.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter">
            <summary>
            Runs on the client side, spawns and controls an MSBuild.exe node to perform the build, replies to its requests.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.DispatcherMain">
            <summary>
            Main thread of the object.
            On this thread the object is created, and on this thread the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> can be modified.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.DispatcherWorker">
            <summary>
            Thread on which we execute the request/responses and can wait synchronously without stopping the UI.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.myIsRemoteBuildCompleted">
            <summary>
            Set to <c>True</c> when we receive the Build Complete signal. See if sending one is currently implemented.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.Heuristics">
            <summary>
            Which heuristics to use to determine if a certain project should be built or not.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.IncomingAbort">
            <summary>
            Aborts the current build, if it's running.
            Safe to call at any time.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.InstanceId">
            <summary>
            Unique ID of this instance used to identify remote services, mutices, etc.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.IsConcurrent">
            <summary>
            Whether we're allowed to spawn multiple msbuild nodes to build non-interdependent projects in parallel.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.MsbuildPlatformId">
            <summary>
            Identifies the MSBuild version to run.
            Currently, the possible reasonable choices are the 2.0, 3.5 and 4.0 NetFX versions.
            If <c>Null</c>, the default platform will be used.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.RequiredBuildEventImportance">
            <summary>
            Specifies which events, by priority, should be allowed thru the pipe to the session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.State">
            <summary>
            Gets the current state of the engine.
            Changes on the original thread only.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.GetIsAbortedEventName(System.String)">
            <summary>
            Name of the mutex to check on whether we should abort the build.
            </summary>
            <param name="sInstanceId"><see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.InstanceId"/> of the instance owning the mutex.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.MapBuildSeverityToMsbuildTargetName(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity)">
            <summary>
            <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity"/> of the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> =&gt; MSBuild standard target name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BeginRun(JetBrains.DataFlow.Lifetime)">
            <summary>
            Starts running the build for the specific target.
            The build proceeds async, check at the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.State"/> property.
            </summary>
            <param name="lifetimeParent"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.AssertState(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.States)">
            <summary>
            Expects a specific state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.WorkerRun(JetBrains.DataFlow.ObsoleteLifetimeAndDefinitionAtTheSameTime)">
            <summary>
            Runs in the worker thread all the time we're busy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.WorkerRun_PushMarkAllProjectsAsPending(JetBrains.DataFlow.Lifetime)">
            <summary>
            Marks <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.Session"/> projects as pending when starting, as excluded if there're still pending upon stopping.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.WorkerRun_RenderBuildFile">
            <summary>
            Takes the .sln file and converts into an MSBuild project with an ability to exclude selected projects from the build.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.WorkerRun_SpawnMsbuildNodeAndWait(JetBrains.Util.FileSystemPath,System.Action{JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerBaseEvent})">
            <summary>
            Runs the MSBuild.exe process that does all of the build.
            </summary>
            <param name="pathBuildFile">The top-level project to build with MSBuild.</param>
            <param name="FSubmitEvent">Reports build events in an efficient fashion.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.WorkerRun_SpawnMsbuildNodeAndWait_RedirectOutStreams(System.Diagnostics.Process,System.Action{JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerBaseEvent})">
            <summary>
            Redirects StdOut and StdErr into Session's build events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.WorkerRun_SpawnMsbuildNodeAndWait_ReportProcessFail(System.Diagnostics.Process)">
            <summary>
            If MSBuild exit code is a failure code, make sure there're any error messages in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.Session"/> (it's not <see cref="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.IsSuccessful(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)"/>).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.WorkerRun_SpawnMsbuildNodeAndWait_StartInfo(JetBrains.Util.FileSystemPath)">
            <summary>
            Prepares the cmdline for spawning MSBuild.exe (path to exe + args string).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.myEventsCollectedOnWorkerThread">
            <summary>
            Events collected on pipe thread before they're processed on the main thread.
            Protected with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.myLockEventsCollectedOnWorkerThread"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.myGeventCommitOnMainThread">
            <summary>
            A gevent hosted on main thread, commits a pack of build events periodically to prevent excessive marshallings.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.myLockEventsCollectedOnWorkerThread">
            <summary>
            Locks <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.myEventsCollectedOnWorkerThread"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.myPathBuildFile">
            <summary>
            The central build file, to tell its project path from other projects being built and treat as the solution file.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,System.String,JetBrains.Util.FileSystemPath,JetBrains.DataFlow.Lifetime)">
            <summary>
            Inits.
            </summary>
            <param name="session">The session to push events into.</param>
            <param name="instanceId">Engine Instance ID, for naming the pipe.</param>
            <param name="pathBuildFile">The central build file, to tell its project path from other projects being built and treat as the solution file.</param>
            <param name="disposablesRunWorker">Lifetime control.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.CommitBuildEventsOnMainThread">
            <summary>
            Periodically commits the collected events into the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.CommitBuildEventsOnMainThread_Event_TryMapProject(JetBrains.Util.FileSystemPath)">
            <summary>
            Converts received project full path into the build session project.
            A <c>Null</c> input value yields a <c>Null</c> project (meaning it's not a project-bound event, eg a global one).
            An input path corresponding to the solution file also yields <c>Null</c> (build events go to non-solution in this case).
            An unknown path creates a new build session project and returns it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.Init_GeventOnSessionThread(JetBrains.DataFlow.Lifetime)">
            <summary>
            Marshal onto the main thread, create grouping event there.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.Init_PipeReader(System.String,JetBrains.DataFlow.Lifetime)">
            <summary>
            Open pipe, attch reader, initiate reading.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.BuildEventReceiver.ProcessIncomingLoggerEvent(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerBaseEvent)">
            <summary>
            An event coming from the MSBuild logger node.
            Apply to the build session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.States.Invalid">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.States.Initialized">
            <summary>
            The session has been initialized, and it's ready for building.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.States.Building">
            <summary>
            The build is running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeEngineStarter.States.UsedUp">
            <summary>
            The build has run, session cannot be reused.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.RotReader.ObjectReceived">
            <summary>
            There's a new object.
            Fires for each received object.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode">
            <summary>
            Runs on the main node in MSBuild.exe, manages the state throughout individual tasks invoked when conducting the build process.
            NOTE: this is a facade class, must only have static access management methods and component access methods.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.IsBuildAborted">
            <summary>
            Whether the build has been aborted by the controlling entity.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.EventsUpload">
            <summary>
            Runs in the MSBuild.exe main node process, belongs to the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode">main node</see>, uploads events thru a pipe to the client (eg UI in VS).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.Start(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters)">
            <summary>
            Build has started, start the main node also.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.OnBuildLevelBegin(System.Int32,System.Collections.Generic.List{JetBrains.Util.FileSystemPath})">
            <summary>
            Notifies that we've started building a new level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.ReportProjectBuildOperationsStarted(JetBrains.Util.FileSystemPath)">
            <summary>
            When MSBuild task is executed on a group of projects in multi-node mode, Project Started is immediately reported for all the projects, even though they're not being built yet (waiting for a free node).
            When we see the first event for a project, report this event as an actual build start for it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.ReportProjectBuildNotRunning(JetBrains.Util.FileSystemPath)">
            <summary>
            Sets the project to the completed state (if it's running — otherwise, <c>False</c> is returned).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.ReportProjectBuildRunning(JetBrains.Util.FileSystemPath)">
            <summary>
            Sets the project to the started state (if it were not ever set in this session — if were, <c>False</c> is returned).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.CollectProjectInfoOnLevelBegin(JetBrains.Util.FileSystemPath,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            As the build of the level begins, we're called by the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Filtering.CollectProjectInfoTask"/> to update collected info on projects taking part in this level.
            In the mode when we're not tampering with MSBuild build process, this is the only chance to collect cached info about the projects (which includes calling a sandbox MSBuild engine to collect project references and get project outputs).
            In the mode when we're tampering with MSBuild build process, we're capturing this information right out of the build process.
            </summary>
            <param name="pathProject">Path to the project file.</param>
            <param name="properties">Properties setting up the build — to be passed to the sandbox MSBuild engine when calling information retrieval targets.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.ReportProjectTargetStarted(JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            As build enters building a target on some top-level project, reports the state.
            Note that targets might possibly be nested, eg when executing the <c>CallTarget</c> intrinsic task.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.ReportProjectTargetFinished(JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            As build leaves building a target on some top-level project, reports the state.
            Note that targets might possibly be nested, eg when executing the <c>CallTarget</c> intrinsic task.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.EventSourceIds.BuildOperationsStarted">
            <summary>
            When MSBuild task is executed on a group of projects in multi-node mode, Project Started is immediately reported for all the projects, even though they're not being built yet (waiting for a free node).
            When we see the first event for a project, report this event as an actual build start for it.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger">
            <summary>
            Logger for running on the main node of the out-of-process MSBuild.exe build.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myHashProjectsWithErrors">
            <summary>
            Tracks error messages in projects.
            RWLocked with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myLockProjectBuildData"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myHashRootProjects">
            <summary>
            Any projects with <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole"/> == <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.Root"/>, including <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myTopmostRootProjectBuildId"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myLockProjectBuildData">
            <summary>
            Locks access to project maps.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myMapBuildIdToOwningProject">
            <summary>
            Maps a <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId"/> of every building project to the top-level project that's being build and for whose build the dependent build has been invoked. For top-level projects, points to self.
            RWLocked with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myLockProjectBuildData"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myMapBuildIdToProject">
            <summary>
            Build IDs of the projects, as MSBuild reports its starting their build.
            A single project might have more than one Build ID.
            RWLocked with <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myLockProjectBuildData"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myTopLevelProjectsWithBuildOperationsStarted">
            <summary>
            Caches projects for which <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNode.ReportProjectBuildOperationsStarted(JetBrains.Util.FileSystemPath)"/> has been called.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myTopmostRootProjectBuildId">
            <summary>
            As the root target build (main solution file) starts, records its ID here.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.GetMsbuildCommandLineString(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters)">
            <summary>
            Gets a string to be used with MSBuild's "/logger:" parameter for installing this logger.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.RegisterOwnerOfProject(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId)">
            <summary>
            Registers the project to make its owner (one who gets build events from nested projects including <paramref name="id"/>) known.
            </summary>
            <param name="id">To be owned.</param>
            <param name="idOwner">New owner.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ReportBuildLogEvent(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerLogEvent)">
            <summary>
            Finally reports the event from a fully-known project. Called from <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.IEventSource_OnAnyEvent(Microsoft.Build.Framework.BuildEventArgs)"/> for non-out-of-order events, or from <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myOutOfOrderEvents"/> for deferred events when their project gets known.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.TryGetOwner(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId)">
            <summary>
            Gets the owner of the project, if already known.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.IsParentOfRoot(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId)">
            <summary>
            Checks if this ID is the fictional project ID that's reported as a parent of the root project.
            Static.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.IsServiceRunOfSolutionProjectBuild(System.String)">
            <summary>
            Sometimes we spawn a service run of a top-level project build (eg when doing copy-outputs with nonbreaking changes).
            In this case we wouldn't like to treat it as a top-level project (eg encounter multiple start-finish for project etc), so detect these and register as "roots".
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.GetProjectRole(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId)">
            <summary>
            Must be under <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.myLockProjectBuildData"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.IEventSource_OnAnyEvent(Microsoft.Build.Framework.BuildEventArgs)">
            <summary>
            NB: Gets ALL of the events from all of the other handlers, including "project started/finished".
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.IEventSource_OnProjectStarted(Microsoft.Build.Framework.ProjectStartedEventArgs)">
            <summary>
            <see cref="E:Microsoft.Build.Framework.IEventSource.ProjectStarted"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents">
            <summary>
            Sometimes we really get project-build-started events out of order in multi-node environments (possible fix: use our own secondary-node loggers).
            In this case a project build (A) is started by the parent project (B) whose build-started event we have not yet received. Thus, we cannot track the parents chain from (A) to any top-level project (to whom all the build underlying build events should go).
            We put such pairs (A)(B) on the waiting list, keyed by (B), and whenever we finally get a build-started event for (B), we restore the chain. A set of values under the key (B) lists all of the child projects of (B) awaiting it for resolve.
            All of the events coming for projects like (A) while it's on the list are deferred and processed only after we know what (B) really is. 
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.myDeferredEvents">
            <summary>
            When an event is received for a project waiting on the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.myMapParentToPendingProject"/>, it's deferred here until it can be resolved to the owning project and uploaded.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.myMapParentToPendingProject">
            <summary>
            Waiting list for (B),(A) pairs, see class doc.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.myPendingProjects">
            <summary>
            Values from <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.myMapParentToPendingProject"/>, (A)s, for quickly checking build events against them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.IsPendingProject(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId)">
            <summary>
            Tells if this project is on <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.myMapParentToPendingProject"/> and awaits for its owner to get known.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.OnNewProjectGottenOwned">
            <summary>
            We know an owner of some new project, maybe our deferreds could also now get owned.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.RegisterOutOfOrderProject(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId,JetBrains.Util.FileSystemPath,System.Collections.Generic.List{JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeLoggerBaseEvent})">
            <summary>
            Can't resolve project right now, register for sometime later.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.SetOwnerForProject(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId)">
            <summary>
            One of the projects on <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.myMapParentToPendingProject"/> is now ready to be attached to its owner.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.OutOfOrderEvents.UploadDeferredEvents">
            <summary>
            Any deferred events now know their owner? Upload them!
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.ParentOfRoot">
            <summary>
            The fictional project reported as a parent of the root project.
            The very first and very last events on MSBuild4 come from this project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.Root">
            <summary>
            The root project (entry project of the build), plus any service projects under it (down until <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.TopLevel"/> projects).
            Either the solution project itself, or the solution project plus the bootstrapper project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.TopLevel">
            <summary>
            Some project from the solution, being built by the solution file.
            Warning: sometimes a project might be called more than once as top-level, dunno why (in presence of CPP in sol usually) — possibly, to exec its specific targets for getting the list of its outputs (note: currently our project-properties-retrieving tasks could also do this).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.Nested">
            <summary>
            Some project from the solution or not (eg buildtime-generated WPF temporary project files), spawned from some <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.TopLevel"/> project build. Events from it should go to the parent <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.ProjectRole.TopLevel"/> project.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters">
            <summary>
            These parameters are passed from the controlling entity to the MSBuild process.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.#ctor">
            <summary>
            Serialization ctor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.Deserialize(System.String)">
            <summary>
            Reverse to <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.Serialize(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.Serialize(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters)">
            <summary>
            Serializes the info required by the logger in a form suitable for passing into the MSBuild command line (finally ending up in <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.Logging.MsbuildExeMainNodeLogger.Parameters"/> property).
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.IsConcurrent">
            <summary>
            Whether MSBuild is allowed to spawn multiple nodes to build in parallel.
            NOTE: MSBuild tells this to the <c>INodeLogger</c> just as good, but that will make us 3.5-specific, so pass from the calling side.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.BuildHeuristics">
            <summary>
            Heuristics to shorten the build by skipping certain projects.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.BuildSeverity">
            <summary>
            Build/Rebuild/Clean.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.EngineInstanceId">
            <summary>
            Instance ID of this engine, used to identify the controlling entity and connect to it to report progress.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.IsBuildingJustRequiredProjects">
            <summary>
            Meaningful only if <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.ProjectsMustBeBuiltRelative"/> is non-<c>Null</c>.
            <c>False</c>: build the solution normally, but the build can be terminated after all of the projects listed in <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.ProjectsMustBeBuiltRelative"/> are built. This way all of the dependencies of the required projects are also guaranteed to be built.
            <c>True</c>: build ONLY the projects listed in <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.ProjectsMustBeBuiltRelative"/>. Means the controlling entity knows exactly which dependencies are to be built and which are not.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.ProjectsMustBeBuiltRelative">
            <summary>
            <c>Null</c> to build the whole solution, otherwise, a list of projects to build (paths relative to the directory of the <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.SolutionFile"/>, to make the param data shorter).
            See also <see cref="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.IsBuildingJustRequiredProjects"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.RequiredBuildEventImportance">
            <summary>
            Only transmit events of this importance (and higher). Lowers are totally omitted to save time on interprocess communication.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.MsbuildExeMainNodeParameters.SolutionFile">
            <summary>
            Full path to the solution file.
            Note: this is the original solution file, not the augmented emitted build file we're building with MSBuild.exe.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.SolBuilderDuoSettings.UseApiSurfaceHeuristics">
            <summary>
            Whether to use the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics.ByApiSurface"/> mode instead of <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics.ByDate"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.SolBuilderDuoSettings.MsbuildVersion">
            <summary>
            Version of MSBuild to use when building.
            <c>0</c> means "as the runtime version of the application initiating the build" (in case of Visual Studio, this is the same MSBuild VS itself uses for building).
            <see cref="F:System.Int32.MaxValue"/> means use the highest version available on this machine.
            Any other number: <see cref="M:JetBrains.Interop.WinApi.Macros.HIWORD(System.UInt32)"/> is the major version number, <see cref="M:JetBrains.Interop.WinApi.Macros.LOWORD(System.UInt32)"/> is the minor version number.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.SolBuilderDuoSettings.UseMsbuildSolutionBuilderFlag.Ask">
            <summary>
            Ask the user which engine to use when building (when building for the first time).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.SolBuilderDuoSettings.UseMsbuildSolutionBuilderFlag.No">
            <summary>
            Do not override the solution builder with MSBuild engine.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.SolBuilderDuoSettings.UseMsbuildSolutionBuilderFlag.Yes">
            <summary>
            Override the default solution builder with MSBuild engine.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.MsbuildExe.SolutionBuildDataProjectHashesCalculator.ForceUpdateProjectHashes(JetBrains.Util.FileSystemPath)">
            <summary>
            MSBuild is somewhere around building the project (has just built, or is about to build — no difference for hashes, because they depend on project inputs only).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient">
            <summary>
            An interface exposed by the SolBuilderDuo client (runs in the VS process) for the server (satellite process) to call back into.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient.QueryBuildProjects(JetBrains.Util.FileSystemPath[])">
            <summary>
            Requests whether the projects should be built, or could rather be skipped as up-to-date.
            Must be executed sync.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient.ReportBuildCompleted">
            <summary>
            Reports that the build is over.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient.ReportBuildSessionBuildEvent(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventWithLocation)">
            <summary>
            Reports a build event, either per-project or session-global.
            </summary>
            <param name="pathProject">Project, or <c>Null</c> for a session event.</param>
            <param name="evtn">No-location event.</param>
            <param name="evtl">Location-aware event. Even though it could be technically passed as <paramref name="evtn"/>, we need to have both (one of them <c>Null</c>), otherwise the data contract serializer won't allow the derived type thru the pipe.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient.ReportBuildSessionProjectBuildState(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState)">
            <summary>
            The build state of a project has changed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient.ReportServerAddress(System.Int32,System.Uri)">
            <summary>
            When the remote server process completes its initialization, it reports its service to the client.
            </summary>
            <param name="nProcessId">ID of the process, to make sure there isn't any race in multiple attempts in starting a client.</param>
            <param name="uriAddress">URI of the service.</param>
            <returns>Whether the server were accepted and can continue running.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient.Test">
            <summary>
            Tests the channel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoClient.UpdateBuildSignatures(JetBrains.Util.FileSystemPath[])">
            <summary>
            Notifies the client that the projects have been rebuilt and their signatures in the cache should be updated.
            The caller need not wait for the callee to complete on this event.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoServer.AbortBuild">
            <summary>
            If the build is currently running, aborts the build as soon as possible.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoServer.BeginBuild">
            <summary>
            Initiates the build, asynchronously, and returns.
            The return value could indicate a failure to start the build. Subsequent build errors and exceptions get into the session's build events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoServer.Shutdown">
            <summary>
            Exits the satellite process when it's not needed anymore.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoServer.Test">
            <summary>
            Tests the channel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ISolBuilderDuoServer.UploadBuildSession(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionInitialDataSerialized)">
            <summary>
            Submits the initial build session to the satellite process.
            The server session changes are then reflected into the client copy of the session (but not back).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun">
            <summary>
            When loading MSBuild into the satellite process and spawning it as a DLL, controls the build and listens for its events.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.MainThread">
            <summary>
            Gets the dispatcher of the primary thread for this session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Session">
            <summary>
            The <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> that describes the initial params and results.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.State">
            <summary>
            Gets the current state of the engine.
            Changes on the original thread only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.BuildThread">
            <summary>
            Thread on which the build tasks are running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.myMapBuildIdToOwningProject">
            <summary>
            Maps a <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Logging.MsbuildProjectBuildId"/> of every building project to the top-level project that's being build and for whose build the dependent build has been invoked. For top-level projects, points to self.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.myMapBuildIdToProject">
            <summary>
            Build IDs of the projects, as MSBuild reports its starting their build.
            A single project might have more than one Build ID.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.myProjectsMustBeBuiltYet">
            <summary>
            Projects from the must-list, not yet built. When reaches zero count, the following projects could be skipped. If <c>Null</c>, then all of the projects must be built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.myRootProjectBuildId">
            <summary>
            As the root target build starts, records its ID here.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics,System.Boolean)">
            <summary>
            Creates a new MSBuild run over the <see cref="!:session"/> that describes the initial params and results.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.AssertMainThread">
            <summary>
            Constrains execution to the main thread.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.BeginRun">
            <summary>
            Starts running the build for the specific target.
            The build proceeds async, check at the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.State"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.AssertState(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.States)">
            <summary>
            Expects a specific state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.GetBuildTarget">
            <summary>
            Tells the build target from the session params.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.GetProjectFullPathByIdentity(System.String)">
            <summary>
            Gets a project full path by a project identity, which is either a solution-relative project item spec, or a full project file path.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Init_ParseProjects_Levels(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Creates various project-related data structures. And projects themselves, too.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Init_Projects">
            <summary>
            Various project-related structures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.QueryBuildProjects_MainThreadSync(JetBrains.Util.FileSystemPath[],System.Collections.Generic.List{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject},System.Collections.Generic.List{JetBrains.Util.FileSystemPath})">
            <summary>
            Processes <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.QueryBuildProjects"/> on the main thread so that to interact with the projects list and all.
            Tosses <see cref="!:projectpaths"/> into <see cref="!:uptodates"/> and <see cref="!:dirties"/>.
            Caller needs results and thus calls sync.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Abort">
            <summary>
            Aborts the ongoing build. After the projects currently being built are done with, the build stops.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.QueryBuildProjects_NeedMore(System.Collections.Generic.IEnumerable{JetBrains.Util.FileSystemPath})">
            <summary>
            Checks if we've built all of the must-build projects, and can skip all of the following ones.
            Marking the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Excluded"/> status is not needed, as it will be set in place of <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Pending"/> after the build completes.
            </summary>
            <returns>Whether to go on building.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.QueryBuildProjects_UpdateSignatures(JetBrains.Util.FileSystemPath[])">
            <summary>
            When the projects are being rebuild or cleaned up, updates their signatures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Microsoft#Build#Framework#ILogger#Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Subscribes loggers to specific events. This method is called when the logger is registered with the build engine, before any events are raised.
            </summary>
            
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Microsoft#Build#Framework#ILogger#Shutdown">
            <summary>
            Releases the resources allocated to the logger at the time of initialization or during the build. This method is called when the logger is unregistered from the engine, after all events are raised. A host of MSBuild typically unregisters loggers immediately before quitting.
            </summary>
            
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.UpdateBuildSignatures">
            <summary>
            Fires to notify that some of the build signatures have gone out-of-date. Handling might be async.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.QueryBuildProjects">
            <summary>
            Fires to request the list of projects to be built. Handling must be sync.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.RequiredBuildEventImportance">
            <summary>
            Specifies which events, by priority, should be allowed thru the pipe to the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Legacy#IMainMsbuildNode#QueryBuildProjects(System.String[])">
            <summary>
            Before building each of the projects, the builder asks whether the project actually has to be built.
            </summary>
            <param name="itemspecs">Identities of the projects to check.</param>
            <returns>The projects that have to be built.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Microsoft#Build#Framework#ILogger#Parameters">
            <summary>
            Gets or sets the user-defined parameters of the logger. 
            </summary>
            
            <returns>
            The logger parameters.
            </returns>
            
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.Microsoft#Build#Framework#ILogger#Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            
            <returns>
            One of the enumeration values. The default is <see cref="F:Microsoft.Build.Framework.LoggerVerbosity.Normal" />.
            </returns>
            
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.States.Error">
            <summary>
            Erronous state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.States.Initialized">
            <summary>
            The session has been initialized, and it's ready for building.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.States.Building">
            <summary>
            The build is running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.States.UsedUp">
            <summary>
            The build has run, session cannot be reused.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionInitialDataSerialized">
            <summary>
            A static-only initial data from <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> for passing one thru a channel.
            Plus some additional MSBuild-session-specific params.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionInitialDataSerialized.Heuristics">
            <summary>
            MSBuild-specific.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionInitialDataSerialized.IsConcurrent">
            <summary>
            MSBuild-specific.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ProjectModelBuildInputsOutputs">
            <summary>
            When we think about building a project, we're interested in its inputs and outputs.
            Requires Project Model for operation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ProjectModelBuildInputsOutputs.AreInputsNewerThanOutputsNoReferencedProjects(JetBrains.Util.FileSystemPath)">
            <summary>
            Checks if the project has to be rebuilt, ignoring its project references.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ProjectModelBuildInputsOutputs.GetProjectBuildSignature(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.AssemblySurface.AssemblySurfaceCache,JetBrains.Util.FileSystemPath)">
            <summary>
            For a project, builds its up-to-date signature, so that it then could be compared to the one in the cache.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ProjectModelBuildInputsOutputs.GetProjectInputs(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets the list of all project input files.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.ProjectModelBuildInputsOutputs.ProjectInputsVisitor">
            <summary>
            Project inputs as a plain list of paths.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.RemoteResult">
            <summary>
            A safe class for passing exceptions against the service boundary.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter">
            <summary>
            Run on the client side, spawns and controls the satellite process to perform a build as needed.
            The satellite process is spawned from our own satellite exe.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.DispatcherMain">
            <summary>
            Main thread of the object.
            On this thread the object is created, and on this thread the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> can be modified.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.DispatcherWorker">
            <summary>
            Thread on which we execute the request/responses and can wait synchronously without stopping the UI.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.myMapBuildProjectPathCache">
            <summary>
            Build project identity to the project itself.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.myServerProcess">
            <summary>
            When server process is started, keeps its ID.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.myServerService">
            <summary>
            When server process is started, and its service has connected back, keeps that service.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Common.Filtering.SolBuilderDuoHeuristics,System.Boolean)">
            <summary>
            Creates a new MSBuild run over the <see cref="!:session"/> that describes the initial params and results.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.DisposablesRunMain">
            <summary>
            Encloses the scope of the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.States.Building"/> state, disposes of in the main thread.
            Disposed of in <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.BeginRun"/> if it fails, or from within <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.DisposablesRunWorker"/> dispose.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.DisposablesRunWorker">
            <summary>
            Encloses the scope of the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.States.Building"/> state, disposes of on the worker thread.
            Disposed of at the end of the <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.WorkerRun"/> span.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.Heuristics">
            <summary>
            Which heuristics to use to determine if a certain project should be built or not.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.IsConcurrent">
            <summary>
            Whether we're allowed to spawn multiple msbuild nodes to build non-interdependent projects in parallel.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.RequiredBuildEventImportance">
            <summary>
            Specifies which events, by priority, should be allowed thru the pipe to the session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.State">
            <summary>
            Gets the current state of the engine.
            Changes on the original thread only.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.Abort">
            <summary>
            Aborts the current build, if it's running.
            Safe to call at any time.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.BeginRun">
            <summary>
            Starts running the build for the specific target.
            The build proceeds async, check at the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.State"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.DummyTryExec(System.Action)">
            <summary>
            Temp method. We cannot quite delay the execution in many cases; as it's readonly, there's no problem in merging it.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.AssertState(JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.States)">
            <summary>
            Expects a specific state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.AssertServer">
            <summary>
            Makes sure we're connected to a valid server.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.WorkerRun">
            <summary>
            Runs in the worker thread all the time we're busy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.WorkerRun_InvokeRemoteBuild">
            <summary>
            Begins the remote build async, waits for it to complete.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.WorkerRun_PushMarkAllProjectsAsPending">
            <summary>
            Marks <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.Session"/> projects as pending when starting, as excluded if there're pending upon stopping.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.WorkerRun_RegisterService">
            <summary>
            Starts listening for remote requests.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.WorkerRun_SpawnServerProcess">
            <summary>
            Starts the server, waits for it to reply.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.States.Invalid">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.States.Initialized">
            <summary>
            The session has been initialized, and it's ready for building.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.States.Building">
            <summary>
            The build is running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SatelliteEngineStarter.States.UsedUp">
            <summary>
            The build has run, session cannot be reused.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy">
            <summary>
            Runs on the server (satellite), connects to the client on-demand, attempts to revive the channel in case of channel problems.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoClient#QueryBuildProjects(JetBrains.Util.FileSystemPath[])">
            <summary>
            Requests whether the projects should be built, or could rather be skipped as up-to-date.
            Must be executed sync.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoClient#ReportBuildCompleted">
            <summary>
            Reports that the build is over.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoClient#ReportBuildSessionBuildEvent(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventWithLocation)">
            <summary>
            Reports a build event, either per-project or session-global.
            </summary>
            <param name="pathProject">Project, or <c>Null</c> for a session event.</param>
            <param name="evtn">No-location event.</param>
            <param name="evtl">Location-aware event. Even though it could be technically passed as <paramref name="evtn"/>, we need to have both (one of them <c>Null</c>), otherwise the data contract serializer won't allow the derived type thru the pipe.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoClient#ReportBuildSessionProjectBuildState(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState)">
            <summary>
            The build state of a project has changed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoClient#ReportServerAddress(System.Int32,System.Uri)">
            <summary>
            When the remote server process completes its initialization, it reports its service to the client.
            </summary>
            <param name="nProcessId">ID of the process, to make sure there isn't any race in multiple attempts in starting a client.</param>
            <param name="uriAddress">URI of the service.</param>
            <returns>Whether the server were accepted and can continue running.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoClient#Test">
            <summary>
            Tests the channel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoClientProxy.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoClient#UpdateBuildSignatures(JetBrains.Util.FileSystemPath[])">
            <summary>
            Notifies the client that the projects have been rebuilt and their signatures in the cache should be updated.
            The caller need not wait for the callee to complete on this event.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoCommunication.CreateServiceBinding">
            <summary>
            Gets a binding for client/server WCF channels.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite">
            <summary>
            Satellite process for hosting the MSBuild Engine.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.DispatcherMain">
            <summary>
            Main thread of the object.
            On this thread the object is created, and on this thread the <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> can be modified.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.IsBuildCompleted">
            <summary>
            Makes sure we report a completed build no more than once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.myMsbuildSessionRun">
            <summary>
            Implements the build.
            Created when we're uploaded with the build session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.AssertState(System.Nullable{JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun.States})">
            <summary>
            Expects a specific state from <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.myMsbuildSessionRun"/>, or <c>Null</c> if the field should be <c>Null</c> yet.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.BeginBuild_MarshalQueryBuildProject">
            <summary>
            Marshals projects status request/reports from the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.MsbuildInSatelliteSessionRun"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.BeginRun_SchedulleSatelliteShutdown">
            <summary>
            When done, waits for some more secs for questions from the client, and then shuts down.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.Init_RegisterService">
            <summary>
            Starts listening for remote requests.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatellite.JetBrains#ReSharper#Features#SolBuilderDuo#Engine#Satellite#ISolBuilderDuoServer#AbortBuild">
            <summary>
            If the build is currently running, aborts the build as soon as possible.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Engine.Satellite.SolBuilderDuoSatelliteArgument.ConfigFileName">
            <summary>
            Name for the file we install.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.EntryPoint">
            <summary>
            A class for quickly test-running the subsystem.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder">
            <summary>
            An implementation of the solution builder that uses MSBuild for building the projects and can cut the build short by examining the public API surface of the projects.
            The component installs itself as the active implementation, if the options allow.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder.IncomingAbort">
            <summary>
            Aborts the current build, if it's running.
            Safe to call at any time.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder.IsOverridingDevenvActionsNow">
            <summary>
            Whether we should override the devenv actions and invoke our own activities on them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder.InitSelfPromotion(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.SolutionBuilder.SolutionBuilder,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            Promotes self as the active implementation.
            </summary>
            <param name="lifetime"></param>
            <param name="solutionBuilder"></param>
            <param name="settings"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder.BeginRun(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Provider.MsbuildSolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence">
            <summary>
            A textual occurence for presenting the build results messages.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.InitCommon(JetBrains.ProjectModel.IProjectFile,JetBrains.Util.TextRange,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            Common init for both location-bound and location-unbound events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.InitWithLocation(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ProjectModel.IProjectModelElement,JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            Try using the location info from the event, if available and valid.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.InitWithoutLocation(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ProjectModel.IProjectModelElement,JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            No location in evt data, or failed to make use of it.
            Attach to hte project file itself.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache">
            <summary>
            When doing subsequent events for the same file, allows to reuse the document for that file.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.FeatureFlags.TrackLocationChanges">
            <summary>
            When code is edited above the warning, its location is tracked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.FeatureFlags.GroupBuildResultsByMembers">
            <summary>
            Enables grouping by project structure.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView">
            <summary>
            A build session graphical representation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.ProjectViewHeight">
            <summary>
            Specifies the uniform height for all of the project views.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.ProjectViewWidth">
            <summary>
            Specifies the uniform width for all of the project views.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.ComposeProjectColor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus)">
            <summary>
            Chooses the current color for the project, based on its current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.MonospacedTextAbbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            Fits given pixel width at given font characteristics.
            Works for monospaced fonts only =&gt; just turns pixels into charcount, and uses <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.MonospacedTextAbbreviator`1.Run(System.Collections.Generic.ICollection{`0},System.Func{`0,System.String},System.Double,System.Windows.Controls.TextBlock)">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="FItemName">The way of getting the item names.</param>
            <param name="pixelwidth">Max number of pixels of width allowed in the output.</param>
            <param name="renderer">Gives the font properties and margins, serves as the measurer.</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            Treats just string length.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.Run(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String},System.Int32)">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="FItemName">The way of getting the item names.</param>
            <param name="nChars">Max number of characters allowed in the output.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.IsCaps(System.Char)">
            <summary>
            Tells whether the char is CAPS, in our terms.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.CreateData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initial data.
            Just limits all items to the given maxlen (at most).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.GetDefaultAbbreviation(JetBrains.DataFlow.PropertyBag)">
            <summary>
            Take <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.myCharsLimit"/> chars at most (this includes as many caps as possible).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.GetNameParts(`0)">
            <summary>
            Gets the item name, splits it into parts by the Caps.
            Each part is a property bag.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.GetResult">
            <summary>
            Reverses the internal map to make it item-to-name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.ResolveConflicts_ChooseUniqueChars">
            <summary>
            When shortening the abbreviations, we've taken the first chars from each capsed part.
            Try taking some non-first chars instead, if they help making the abbr unique.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.ResolveConflicts_DisambigChars">
            <summary>
            Appends disambig chars to the end of the abbreviation, as a last resort.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.Dashboard.Dim.Base.InactiviyDimFactor">
            <summary>
            Add this much shade to simulate inactive color on an active one.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.MinPreferredRowHeight">
            <summary>
            Add more rows as the rowheight is above this limit (this tradess off indicator height for its width, which is good for reading its text)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.NaturalIndicatorHeight">
            <summary>
            Having constant pixel sizes of borders etc at any scale looks bad, let's render it at this height and than scale to any size required (downscaling included).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.GetRowCountApproxFromFactor(System.Double,System.Windows.Size,System.Int32)">
            <summary>
            An inverse to <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorAspect"/>.
            As there's the <see cref="M:System.Math.Ceiling(System.Double)"/> function that can't exactly be inverted, it has been ignored here. Round the rowcount up or down, depending on the conditions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.RowCountCeiling(System.Double,System.Int32)">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.RowCountFloor(System.Double,System.Int32)">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.RowCountRoundCore(System.Int32,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.Run_ChooseRowCount(System.Windows.Size,System.Int32)">
            <summary>
            Optimizes the count of project indicator rows (total rows is greater by one).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetFullRowIndicatorLogicalSize">
            <summary>
            Same as <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/>, just for an indicator that occupies the whole row (like solution indicator does).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorAspect">
            <summary>
            Indicator width-to-height factor in both logical and visual sizes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize">
            <summary>
            Logical indicator size (the only size the indicator control knows about; always have the same height to preserve line-thickness-to-body-size proportions when the view is resized).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorVisualHeight">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.ViewSize"/>, as seen on screen.
            <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/> is render-transformed to become this.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorVisualSize">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.ViewSize"/>, as seen on screen.
            <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/> is render-transformed to become this.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorVisualWidth">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.ViewSize"/>, as seen on screen.
            <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/> is render-transformed to become this.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Empty">
            <summary>
            Project build hasn't started yet.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.NoChanges">
            <summary>
            Project wasn't built because it's up-to-date.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.NonBreakingChanges">
            <summary>
            Project wasn't built because it has non-breaking changes, but copy-outputs might has been executed for it (and had no warnings).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Ok">
            <summary>
            Project was built, and had no errors or warnings.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Warnings">
            <summary>
            Project was built and had some warnings, but no errors.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Errors">
            <summary>
            Project build was run and had some errors.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.Run(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String})">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="funcItemName">The way of getting the item names.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.IsCaps(System.Char)">
            <summary>
            Tells whether the char is CAPS, in our terms.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.CreateDataWithThreeCaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initial data.
            All items to three caps (at most).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.GetNameParts(`0)">
            <summary>
            Gets the item name, splits it into parts by the Caps.
            Each part is a property bag.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.GetResult">
            <summary>
            Reverses the internal map to make it item-to-name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.Run">
            <summary>
            Central operating method.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.StageResolveWithCaps">
            <summary>
            Resolve conflicts by letting more letters, but only caps.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.StageResolveWithUniqueNoncaps">
            <summary>
            Add unique non-caps letters to the caps.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView">
            <summary>
            Renders the projects, organized in build-levels.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.ProjectViewHeight">
            <summary>
            Specifies the uniform height for all of the project views.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.ProjectViewWidth">
            <summary>
            Specifies the uniform width for all of the project views.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.SetContent(JetBrains.DataFlow.Lifetime,System.Collections.Generic.List{System.Collections.Generic.List{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject}})">
            <summary>
            Removes the old content, fills with the new set of projets.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.ComposeProjectColor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus)">
            <summary>
            Chooses the current color for the project, based on its current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.CreateLevelView(System.Action{System.Windows.UIElement})">
            <summary>
            Creates a view for the level of projects.
            Returns the means for adding projects to the level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.KillOldProcesses">
            <summary>
            Kills all of the processes previosly started from building this solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.StartProcess">
            <summary>
            Starts the startup project process.
            Reports to the user and returns <c>Null</c> on failures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.GetStartupInfo">
            <summary>
            Gets the process start info (executable, cmdline args, and working folder) for the startup project of the solution.
            Throws on fatal errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.GetStartupProject">
            <summary>
            Gets the VS Project for the startup project in the solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.OnAfterGetStartupInfo_HackPlatformProduct(System.Diagnostics.ProcessStartInfo)">
            <summary>
            When running a platform product, see which product we currently have registered for VS.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.WaitForTargetProcess">
            <summary>
            Gets whether to wait for the target process to exit before running the build-and-run action.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuilderDuoAutoShowResults">
            <summary>
            Shows the build results when build finishes.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuilderDuoStatusBarIndicator">
            <summary>
            Tracks build progress in the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuilderDuoView.CurrentSession">
            <summary>
            The most-recently-used build session.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor">
            <summary>
            Opens the Find Results View with the build events from the session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.myFuncDomainFilter">
            <summary>
            Filters down the set of events displayed down to some domain, eg events of a single project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.myFuncPriorityFilter">
            <summary>
            Filters down the set of events displayed based on their priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.myKindFilter">
            <summary>
            If the specific item is present, then the filter passes that kind of events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean},JetBrains.ReSharper.Psi.PsiManager,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Ctor.
            </summary>
            <param name="session">Session that gives the events to show.</param>
            <param name="solution">Current solution, just in case.</param>
            <param name="funcDomainFilter">Allows to limit down the set of <paramref name="session"/> events to show. All-<c>True</c> by default.</param>
            <param name="ψManager"></param>
            <param name="settings"></param>
            <param name="threading"></param>
            <param name="uiTaskExecutor"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.Show(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean},JetBrains.ReSharper.Psi.PsiManager,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Opens the Find Results View with the build events from the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.ShowIfNeeded(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Psi.PsiManager,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Opens the Find Results View with the build events from the session, if there are any significant items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.ShowIfNeeded(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean},JetBrains.ReSharper.Psi.PsiManager,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Opens the Find Results View with the build events from the session, if there are any significant items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.GetEventsFilteredButKind">
            <summary>
            Gets the list of events (solution+project), filtered by domain and priority, but not filtered by kind.
            Here only invariant-thru-life-of-view filters are applied (kind filter might change).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.Init_SelectDefaultKindFilter">
            <summary>
            Based on what we have (errors? only warnings? neither?), select the initial by-kind filter value.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.Init_SetItemsOnFilterChange(JetBrains.Threading.IThreading,JetBrains.Application.Settings.ISettingsStore,JetBrains.ProjectModel.ISolution,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Initially, and then when user changes the filter, fill in with items.
            </summary>
            <param name="threading"></param>
            <param name="settings"></param>
            <param name="solution"></param>
            <param name="uiTaskExecutor"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.HasSignificantEvents">
            <summary>
            Gets whether there are occurences significant enough to be shown.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext">
            <summary>
            Build event, plus additional data.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext.BuildProject">
            <summary>
            The owning build project, or <c>Null</c> if it's solution-owned.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext.Container">
            <summary>
            The owning project model elem: either <see cref="T:JetBrains.ProjectModel.IProject"/> or <see cref="T:JetBrains.ProjectModel.ISolution"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext.Event">
            <summary>
            Event itself.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1">
            <summary>
            Operates a filter that sets or removes individual items.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.myEffective">
            <summary>
            Items currently in effect.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.Apply(System.Boolean,`0[])">
            <summary>
            Applies the new filter.
            </summary>
            <param name="isExclusive">Whether all other kinds should be off. Otherwise, works as Toggle.</param>
            <param name="kinds">Kinds corresponding to this filter.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.IsIncluded(System.Boolean,`0[])">
            <summary>
            Checks if the particular filter is currently in effect.
            </summary>
            <param name="isExclusive">Whether all other kinds should be off.</param>
            <param name="kinds">Kinds corresponding to this filter.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.SetExclusively(`0[])">
            <summary>
            Sets these items on the filter, resets all else.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.Toggle(`0[])">
            <summary>
            Toggles the given items.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.Effective">
            <summary>
            Gets the filter effective at the moment.
            </summary>
        </member>
    </members>
</doc>
