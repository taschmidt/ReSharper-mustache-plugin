<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Daemon</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Recursion}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Recursion))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = DaemonThemedIcons.Recursion.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(DaemonThemedIcons.Recursion), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;DaemonThemedIcons.Recursion&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons.Recursion">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Recursion Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons.Recursion.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Recursion}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Recursion))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DaemonThemedIcons.Recursion.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DaemonThemedIcons.Recursion&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons.Recursion.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Recursion Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons.Recursion"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Resources.DaemonThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Recursion}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Recursion))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DaemonThemedIcons.Recursion.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DaemonThemedIcons.Recursion&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataProvider.GetSelectedElement``1(System.Boolean,System.Boolean)">
            <summary>
            Returns element under caret
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="checkDocumentRange">If documentRange should be cheked for valid</param>
            <param name="ignoreSpaces">If spaces should be ignored</param>
            <returns>Element under caret</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataBuilder">
            <summary>
            Since context actions calculates at working thread, some data must be pre-calculated in UI thread (e.g. using VS API).
            Using class marked with <see cref="T:JetBrains.ReSharper.Feature.Services.Bulbs.ContextActionDataBuilderAttribute"/> 
            and implementing <see cref="T:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataBuilder"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IContextActionDataBuilder.Build(JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl)">
            <summary>
            Calculates and returns IContextActionDataProvider
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+BulbFrame}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.BulbFrame))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = BulbThemedIcons.BulbFrame.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(BulbThemedIcons.BulbFrame), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;BulbThemedIcons.BulbFrame&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.BulbFrame">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BulbFrame Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.BulbFrame.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+BulbFrame}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.BulbFrame))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.BulbFrame.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.BulbFrame&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.BulbFrame.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BulbFrame Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.BulbFrame"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+BulbFrame}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.BulbFrame))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.BulbFrame.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.BulbFrame&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.ContextAction">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ContextAction Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.ContextAction.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+ContextAction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.ContextAction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.ContextAction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.ContextAction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.ContextAction.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ContextAction Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.ContextAction"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+ContextAction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.ContextAction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.ContextAction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.ContextAction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.DisableBulb">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DisableBulb Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.DisableBulb.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+DisableBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.DisableBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.DisableBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.DisableBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.DisableBulb.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DisableBulb Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.DisableBulb"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+DisableBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.DisableBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.DisableBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.DisableBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.Question">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Question Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.Question.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+Question}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.Question))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.Question.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.Question&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.Question.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Question Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.Question"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+Question}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.Question))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.Question.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.Question&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.RedBulb">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RedBulb Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.RedBulb.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+RedBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.RedBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.RedBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.RedBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.RedBulb.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RedBulb Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.RedBulb"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+RedBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.RedBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.RedBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.RedBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.YellowBulb">
             <summary>
              <para>
                <para>Autogenerated identifier class for the YellowBulb Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.YellowBulb.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+YellowBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.YellowBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.YellowBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.YellowBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.YellowBulb.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the YellowBulb Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons.YellowBulb"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Daemon.Src.Bulbs.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+YellowBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.YellowBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.YellowBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.YellowBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.CaretDependentFeatures.CaretDependentFeaturesManager.CaretStateChangedAndDocumentsCommited">
            <summary>
            Fired if focused text control, caret position, viewport range or document is changed.
            Lifetime that is passed to this event must be checked for termination in event handlers.
            Invariants for lifetime passed to this event (if it is not terminated):
            TextControlManager.FocusedTextControl isn't changing
            TextControlManager.FocusedTextControl.Caret.Position isn't changing
            TextControlManager.FocusedTextControl.Scrolling.ViewportRange isn't changing
            TextControlManager.FocusedTextControl.Document isn't changing and is commited
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Daemon">
            <summary>
            Class managing background code analysis
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Daemon.State(JetBrains.DocumentModel.IDocument)">
            <summary>
            Get the daemon state for the given document
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Daemon.ForceReHighlight(JetBrains.DocumentModel.IDocument)">
            <summary>
            Force async rehighlighting process for given document
            </summary>
            <returns><c>false</c> if daemon wasn't started</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Daemon.Invalidate">
            <summary>
            Invalidate daemon state for all documents
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.Daemon.IsSuspended">
            <summary>
            Suspend/resume error highlighting &amp; quickfixes activity
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Daemon.Daemon.DaemonStateChanged">
            <summary>
            Raised when DaemonState of any document is changed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.Daemon.DaemonStateChanged2">
            <summary>
            Raised when DaemonState of any document is changed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Impl.DaemonImpl.OnPsiModulesChange(JetBrains.ReSharper.Psi.PsiModuleChange)">
            <summary>
            remove invalidated daemons
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.DaemonState">
            <summary>
            Normal state flow is the following:
            INVALIDATED->IN_PROGRESS_LOCAL->UP_TO_DATE->IN_PROGRESS_GLOBAL->UP_TO_DATE
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.HIDDEN">
            <summary>
            Daemon doesn't need error stripe for given document.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.UNSUPPORTED">
            <summary>
            Daemon needs error stripe, but doesn't support error state
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.DISABLED">
            <summary>
            Daemon is switched off for given document
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.INVALIDATED">
            <summary>
            Daemon state is not valid for this document (i.e. something changed since last analysis)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.IN_PROGRESS_LOCAL">
            <summary>
            Daemon analysis is currently running local stages
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.IN_PROGRESS_GLOBAL">
            <summary>
            Daemon analysis is currently running global SWA stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.DaemonState.UP_TO_DATE">
            <summary>
            Daemon state is up-to-date for given document
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.DaemonTooltipProviderAttribute">
            <summary>
            Custom tooltip provider for the error.
            Tooltip provider should be solution-level component and implement <see cref="T:JetBrains.TextControl.Markup.IHighlighterTooltipProvider"/> interface
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.GutterMarkMenuLayouter">
            <summary>
            A factory for the gutter mark menu layouters.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.GutterMarkMenuLayouter.CreateSource(JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Creates a popup window context with a layouter for the gutter mark menu.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.GutterMarkMenuLayouter.Create(JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Creates a popup window context with a layouter for the gutter mark menu.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IInheritanceMarkOnGutter.OnClick(System.Drawing.Image)">
            <summary>
            Triggers when the gutter icon gets clicked.
            Passes the icon that should be painted in the popup menu caption in case there's more than one alternative.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.HighlightingSettingsManager.HasNecessarySeverity(JetBrains.ReSharper.Daemon.Severity,JetBrains.ReSharper.Daemon.IHighlighting,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Check if any of the given highlighting list has severity equals or higher than <paramref name="severity"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.IDaemonProcess">
            <summary>
            Represents analysis for one source file. Consists of several <see cref="T:JetBrains.ReSharper.Daemon.IDaemonStageProcess"/> - one for each <see cref="T:JetBrains.ReSharper.Daemon.IDaemonStage"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.ReSharper.Daemon.IDaemonProcess.IsRangeInvalidated(JetBrains.DocumentModel.DocumentRange)" -->
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonProcess.GetStageProcess``1">
            <summary>
            Get one of stage processes with given exact matched type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonProcess.GetStageProcesses``1">
            <summary>
            Get all stage processes with given exact matched type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonProcess.GetCompletedStageProcesses">
            <summary>
            Get already completed (during this process) stage proccessed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonProcess.CreateFibers">
            <summary>
            Create fibers for multi-process thread execution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IDaemonProcess.VisibleRange">
            <summary>
            Area of document that must be analyzed first (before invisible parts) to provide highlighting results to user faster.
            For <see cref="T:JetBrains.ReSharper.Daemon.Impl.VisibleDocumentDaemonProcess"/> it is current <see cref="P:JetBrains.TextControl.ITextControlScrolling.ViewportRange"/> of code editor.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IDaemonProcess.InterruptFlag">
            <summary>
            Signals that current daemon proccess (and relevant daemon stage process) must be interruped. Process (and stage process) must verify this flag periodically
            and throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> if it is true.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IDaemonProcess.CustomData">
            <summary>
            This property is used to pass custom specific data to daemon stages (such as exclude some analysis in test cases).
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IDaemonProcess.FullRehighlightingRequired">
            <summary>
            Can be used by stage process to understand do we need to start/continue analysis.
            Have no default implementation.  For visible documents based on <see cref="P:JetBrains.ReSharper.Daemon.Impl.DaemonImpl.DaemonTimestamp"/> and sometimes previous <see cref="M:JetBrains.ReSharper.Daemon.Daemon.Invalidate"/> call. 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ErrorStripeRequest">
            <summary>
            Defines the requirements for each stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.ErrorStripeRequest.NONE">
            <summary>
            The stage doesn't require error stripe at all
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.ErrorStripeRequest.STRIPE">
            <summary>
            Stage requires error stripe, but can't produce warnings/errors
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Daemon.ErrorStripeRequest.STRIPE_AND_ERRORS">
            <summary>
            The stage requires error stripe and can produce warnings/errors
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.IDaemonStage">
            <summary>
            Represents a "stage" in code analysis process.
            Each stage should have a key that allows stages to refer to each other.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonStage.CreateProcess(JetBrains.ReSharper.Daemon.IDaemonProcess,JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.ReSharper.Daemon.DaemonProcessKind)">
            <summary>
            Creates a code analysis process corresponding to this stage for analysing a file.
            </summary>
            <returns>Code analysis process to be executed or <c>null</c> if this stage is not available for this file.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonStage.NeedsErrorStripe(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Check the error stripe indicator necessity for this stage after processing given <paramref name="sourceFile"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.DaemonStageAttribute">
            <summary>
            Marks the class as a daemon stage for automatic registration
            The marked clas should have default constructor and should implement 
            <see cref="T:JetBrains.ReSharper.Daemon.IDaemonStage"/> interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.InternalMode">
            <summary>
            If set to <c>true</c>, then daemon stage will be run only in internal mode
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.GlobalAnalysisStage">
            <summary>
            If set to <c>true</c>, then daemon stage will be run after analysing the whole solution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.StagesBefore">
            <summary>
            Stages which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageAttribute.StagesAfter">
            <summary>
            Stages which shoud follow this
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.HighlightingInfo">
            <summary>
            Highlighting information which should be returned form stage <see cref="T:JetBrains.ReSharper.Daemon.IDaemonStageProcess"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.ICollection{JetBrains.ReSharper.Daemon.HighlightingInfo})">
            <summary>
            Set highlightings for the whole documents
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.ICollection{JetBrains.ReSharper.Daemon.HighlightingInfo},JetBrains.Util.TextRange)">
            <summary>
            Set highlightings for the specific text range
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.Highlightings">
            <summary>
            Array of result highlightings to be added to the editor
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.FullyRehighlighted">
            <summary>
            Indicates that the whole file was rehighlighted. 
            If file was incrementally rehighlighted, then the range should be returned in <see cref="P:JetBrains.ReSharper.Daemon.DaemonStageResult.RehighlightedRange"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.RehighlightedRange">
            <summary>
            Range in the document for which the highlighting was recalculated. 
            All old highlightings that are inside this range will be removed 
            from the editor and replaced with the returned ones.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.DaemonStageResult.Layer">
            <summary>
            Highlighting key modifier, so one stage could produce highlgihtings for different layers. Usually shouldn't be used
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.IDaemonStageProcess">
            <summary>
            Represents a code analysis process corresponding to one stage when analysing one file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IDaemonStageProcess.Execute(System.Action{JetBrains.ReSharper.Daemon.DaemonStageResult})">
            <summary>
            Executes the process.
            The process should check for <see cref="P:JetBrains.ReSharper.Daemon.IDaemonProcess.InterruptFlag"/> periodically (with intervals less than 100 ms)
            and throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> if it is true. 
            Failing to do so may cause the program to prevent user from typing while analysing the code.
            Stage results should be passed to <param name="commiter"/>. If DaemonStageResult is <c>null</c>, it means that no highlightings available
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IDaemonStageProcess.DaemonProcess">
            <summary>
            Whole daemon process
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.OverlapResolveKind">
            <summary>
            Controls how individual highlightings will be shown if overlaps
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Severity">
            <summary>
            the role of each highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.AttributeId">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ErrorStripeColorHighlighterAttributeId">
            <summary>
            <para>If this highlighter, when applied to a document, is to be shown on the error stripe, defines the ID of another <see cref="T:JetBrains.TextControl.Markup.RegisterHighlighterAttribute"/> whose foreground color gives the error stripe mark color.</para>
            <para>Will be used only if Severity == INFO.</para>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.OverlapResolve">
            <summary>
            Get the ovelap resolving policy for this highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.OverloadResolvePriority">
            <summary>
            Get the ovelap resolving priority for this highlighting (To resolve 2 highlightings with the same range and resolve policy)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar">
            <summary>
            Identifies if the tooltip message should be shown in the status bar when the cursor is over the highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ConfigurableSeverityHighlightingAttribute.ConfigurableSeverityId">
            <summary>
            ID of configurable severity definition
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ConfigurableSeverityHighlightingAttribute.Languages">
            <summary>
            Languages for which this highlighting is
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.RegisterConfigurableSeverityAttribute">
            <summary>
            Register new configurable severity definition
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.RegisterConfigurableSeverityAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,JetBrains.ReSharper.Daemon.Severity,System.Boolean)">
            <summary>
            Register new configurable severity definition
            </summary>
            <param name="id">Unique ID of severity definition. Key to match with implementation</param>
            <param name="compoundItemName">optional value, can join few items under the same header under group (items are matched by compoundItemName equality)</param>
            <param name="group">Group ID of the item. See <see cref="T:JetBrains.ReSharper.Daemon.HighlightingGroupIds"/> for common groups</param>
            <param name="title">title</param>
            <param name="description">description</param>
            <param name="defaultSeverity"></param>
            <param name="solutionAnalysisRequired"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.IHighlighting">
            <summary>
            Base interface for all error highlightings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.IHighlighting.IsValid">
            <summary>
            Returns true if data (PSI, text ranges) associated with highlighting is valid
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IHighlighting.ToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar (if <see cref="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>)
            To override the default mechanism of tooltip, mark the implementation class with 
            <see cref="T:JetBrains.ReSharper.Daemon.DaemonTooltipProviderAttribute"/> attribute, and then this property will not be called
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IHighlighting.ErrorStripeToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar (if <see cref="P:JetBrains.ReSharper.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.IHighlighting.NavigationOffsetPatch">
            <summary>
            Specifies the offset from the Range.StartOffset to set the cursor to when navigating 
            to this highlighting. Usually returns <c>0</c>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ICustomAttributeIdHighlighting">
            <summary>
            Identifies that highlighting attribute ID is computed at runtime
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ICustomAttributeIdHighlighting.AttributeId">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ICustomConfigurableSeverityIdHighlighting">
            <summary>
            Identifies that highlighting severity ID is calculated at runtime
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ICustomConfigurableSeverityIdHighlighting.ConfigurableSeverityId">
            <summary>
            Configurable severity id of this highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ICustomStyleHighlighting">
            <summary>
            Identifies that highlighting computes it's style at runtime
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ICustomStyleHighlighting.Attributes">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.HighlightingExtensions.GetConfigurableSeverityId(JetBrains.ReSharper.Daemon.IHighlighting,JetBrains.ReSharper.Daemon.HighlightingAttributeBase)">
            <summary>
            Returns ConfigurableSeverityId for highlighting if it supports ICustomConfigurableSeverityIdHighlighting or 
            has ConfigurableSeverityHighlightingAttribute, or null otherwise
            If you already have attribute for this highlighting's class, you can pass it to the method to optimize performance.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.ILanguageSpecificDaemonBehavior">
            <summary>
            Language-specific implementation which defines some daemon behavour aspects
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.ILanguageSpecificDaemonBehavior.InitialErrorStripe(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Get the error stripe visibility before analysis starts.
            Should not commit PSI!
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.ILanguageSpecificDaemonBehavior.CanShowErrorBox">
            <summary>
            Check if this language can show error box
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Daemon.Impl.DaemonProcessBase.LastRunTimestamp">
            <summary>
            Aggregated timestamp of <see cref="T:JetBrains.ReSharper.Psi.IPsiSourceFile"/> for which daemon was completed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Impl.DaemonProcessBase.HighlightingOverlapResolver.Compare(JetBrains.ReSharper.Daemon.Impl.DaemonProcessBase.HighlightingOverlapResolver.Highlighting,JetBrains.ReSharper.Daemon.Impl.DaemonProcessBase.HighlightingOverlapResolver.Highlighting)">
            <summary>
            Compare highlightings.
            </summary>
            <returns>0 if both should be present. -1 if <paramref name="i"/> should be removed, +1 if <paramref name="j"/> should be removed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Impl.DaemonProcessBase.HighlightingOverlapResolver.Resolve(System.Collections.Generic.ICollection{JetBrains.ReSharper.Daemon.HighlightingInfo},System.Boolean,JetBrains.Util.TextRange,JetBrains.ReSharper.Daemon.Impl.DaemonProcessBase.HighlightingOverlapResolver.Layer,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Resolve overlapping highlighters. Receives new highlighters in given range (either full document, if <paramref name="fullRehighlight"/> is <c>true</c>, 
            and returns infos to be added and infos to be deleted
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Impl.DaemonStageManager">
            <summary>
            Suports stages in topologically sorted state and manages states lifetime. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.DaemonUtil.GetHighlightingRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Translates tree node range into document. Returns valid range if there if treerange *covers* single document range, 
            and this is the difference from <see cref="M:JetBrains.ReSharper.Psi.Tree.TreeNodeExtensions.GetDocumentRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Daemon.Impl.SolutionAnalysisService">
            <summary>
            Interface which is used by daemon to interact with SWEA
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Daemon.Impl.VisibleDocumentDaemonProcess.Commiter.DaemonResultCommiter.Step">
            <summary>
            Returns <c>true</c> when this commiter is done
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.VisualElements.PsiColorPropertyIconId">
            <summary>
            An ID to the dynamically-generated per-RGB-color icons.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.VisualElements.PsiColorPropertyIconIdOwner">
            <summary>
            Dynamically-generated per-RGB-color icons.
            </summary>
        </member>
    </members>
</doc>
