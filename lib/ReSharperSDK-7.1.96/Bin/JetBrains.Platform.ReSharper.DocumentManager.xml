<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ReSharper.DocumentManager</name>
    </assembly>
    <members>
        <member name="T:JetBrains.DocumentManagers.DocumentsOnProjectFiles">
            <summary>
            For those documents that are created over project files, exposes the mapping, and allows to create documents over project files on-demand.
            Uses <see cref="T:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage"/> as the backing store.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentsOnProjectFiles.GetOrCreateDocument(JetBrains.ProjectModel.IProjectFile,JetBrains.DocumentManagers.IDocumentOverProjectFileFactory)">
            <summary>
            Gets the existing document over the project file, if it has already been created and has not yet expired.
            Creates a new document using the <paramref name="factory"/> and registers in the mapping if there's none existing.
            </summary>
            <param name="profile">The file whose document is requested.</param>
            <param name="factory">The factory that knows how to create the proper document in our environment (standalone, VS, etc).</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentsOnProjectFiles.GetProjectFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            If this document has been created over a project file, returns that project file.
            Otherwise, throws an exception.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.DocumentsOnProjectFiles.UnmapOnProjectFileRemove">
            <summary>
            When file gets removed from the project model, removes its mapping.
            Note: brought out of <see cref="T:JetBrains.DocumentManagers.DocumentsOnProjectFiles"/> proper to prevent its dependency on project model.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.IDocumentOverProjectFileFactory">
            <summary>
            Factory for creating environment-specific documents (standalone, VS, etc) over project files.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.IDocumentOverProjectFileFactory.CreateNewDocument(JetBrains.ProjectModel.IProjectFile)">
            <summary>
             Achtung! Creates a new document each time! Don't use but from <see cref="M:JetBrains.DocumentManagers.DocumentsOnProjectFiles.GetOrCreateDocument(JetBrains.ProjectModel.IProjectFile,JetBrains.DocumentManagers.IDocumentOverProjectFileFactory)"/>.
             Implementation does not need to register in the project-file-to-document map.
             Mind that your document will normally be held on a weak ref.
             </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.IDocumentOverProjectFileFactory_TransactionManager">
            <summary>
            See comment on <see cref="T:JetBrains.DocumentManagers.Transactions.SolutionDocumentTransactionManager"/> as of why it has to implement <see cref="T:JetBrains.DocumentManagers.IDocumentOverProjectFileFactory"/>. This is the core impl of the functionality it exposes.
            DO NOT USE. Go for <see cref="M:JetBrains.DocumentManagers.DocumentsOnProjectFiles.GetOrCreateDocument(JetBrains.ProjectModel.IProjectFile,JetBrains.DocumentManagers.IDocumentOverProjectFileFactory)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.StandaloneDocumentOverSolutionFactory">
            <summary>
            A factory for creating documents that are attached to a solution, but have no project file under them. Special pervert case for generated documents.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.DocumentOperationsOnProjectFilesSynchronization">
            <summary>
            Gets an object to synchronize access to a project-file-to-document mapping — mostly related to creating documents and attaching them to the underlying Shell entities (like VS documents).
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentOperationsOnProjectFilesSynchronization.GetProjectFileSyncObject(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Gets an object to synchronize access to a project-file-to-document mapping — mostly related to creating documents and attaching them to the underlying Shell entities (like VS documents).
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage">
            <summary>
            Just stores the mapping between documents and project files.
            You should rather use the <see cref="T:JetBrains.DocumentManagers.DocumentManager"/> façade in high-level code, or <see cref="T:JetBrains.DocumentManagers.DocumentsOnProjectFiles"/> inside document-vs-project-model cases.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.TryGetDocument(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Gets document by project item, if it's already created.
            Note: for creating documents, use <see cref="M:JetBrains.DocumentManagers.DocumentsOnProjectFiles.GetOrCreateDocument(JetBrains.ProjectModel.IProjectFile,JetBrains.DocumentManagers.IDocumentOverProjectFileFactory)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.ToList">
            <summary>
            Gets a copy of registered mapped items in a form of a list.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.myProjectItemKey">
            <summary>
            Key for backmapping from document to project file. Currently, the mapping is stored on the document's userdata (as document lifetime is CLR-defined, while for a project file there's explicit removal).
            Note: must be a new key instance per component instance, to avoid mixing up documents from different solutions (like, getting project file from another solution). <see cref="T:JetBrains.Util.Key`1"/>'s equality is only by reference, string is just for diag.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.Added">
            <summary>
            Fires when a new mapping gets added.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.RemovedExplicitly">
            <summary>
            Fires when a mapping gets explicitly removed.
            Note that it will NOT fire for each <see cref="F:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.Added"/> item because mappings are weak-references and might expire on their own.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.TryGetProjectFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            If this document has a mapping to a project file, returns that project file.
            Otherwise, returns <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentToProjectFileMappingStorage.TryGetInvalidProjectFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            If this document has a mapping to a project file, returns that project file.
            Also returns project file if one is invalid (ex. was removed from project model but transaction is committing)
            Otherwise, returns <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerOperations.SaveDocument(JetBrains.DocumentModel.IDocument)">
            <summary>
            Saves the specified document
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerOperations.GetUnsavedDocuments">
            <summary>
            Returns all unsaved documents.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerOperations.IsDocumentUnsaved(JetBrains.DocumentModel.IDocument)">
            <summary>
            Returns true if the specified document has not been saved since the last modification
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentManagerOperations.SaveAllDocuments">
            <summary>
            Saves all documents 
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.impl.DocumentManagerOperations.AfterDocumentSaved">
            <summary>
            Raised after a document has been saved.
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.impl.DocumentManagerOperations.BeforeDocumentSaved">
            <summary>
            Raised before a document has been saved. The handlers of this event are given a chance to
            cancel save.
            </summary>
        </member>
        <member name="E:JetBrains.DocumentManagers.impl.DocumentManagerOperations.BeforeDocumentReloaded">
            <summary>
            Raised before a document has been changed externally. The handlers of this event are given a chance to
            cancel the external change.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentOperationsImpl.SynchronizeDocumentContentsWithFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            Forces synchronizing the document with its content source.
            For standalone documents or VS documents not opened in the editor, these are external files.
            For open VS documents, this is the RDT document content.
            Requires a writer lock.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.DocumentOperationsImpl.SynchronizeDocumentContentsWithFile_Standalone(JetBrains.DocumentModel.IDocument)">
            <summary>
            Implements the standalone case for <see cref="M:JetBrains.DocumentManagers.impl.DocumentOperationsImpl.SynchronizeDocumentContentsWithFile(JetBrains.DocumentModel.IDocument)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.StandaloneShellDocumentFactory.CreateIdeDocumentFromText(System.String,System.String,System.Func{JetBrains.DocumentModel.IDocument,JetBrains.Util.ModificationCookie})">
            <summary>
            Creates an <see cref="T:JetBrains.DocumentModel.IDocument"/> from the given text.
            The document implementation is specific to the Shell. In tests, this is the same as <see cref="M:JetBrains.DocumentModel.IDocumentFactory.CreateSimpleDocumentFromText(System.String,System.String,System.Func{JetBrains.DocumentModel.IDocument,JetBrains.Util.ModificationCookie})"/>. In Visual Studio, this is a VS Text Buffer.
            </summary>
            <param name="text">Document text.</param>
            <param name="moniker">Document moniker that uniquely identifies this document.</param>
            <param name="ensureWritableHandler">Queries whether the document is allowed to be written.</param>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.StandaloneShellDocument.MakeReadonly(JetBrains.Util.TextRange)">
            <summary>
            Locks a document range temporarily to prevent it from being edited. To unlock, dispose of the return value.
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.impl.StandaloneShellDocument.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.ProjectFilesRemovedOnDocumentTransactionCommit">
            <summary>
            As project files are removed within a transaction, sometimes processing for them must be delayed, as the transaction might be rolled back or something.
            Listens to project model changes, maintains the list of files removed under transaction, and fires their remove only when transaction gets committed (not rolled back).
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.ProjectFilesRemovedOnDocumentTransactionCommit.ProjectFileRemoved">
            <summary>
            Fires when a project file gets removed.
            If there's no transaction, fires immediately.
            Under a transaction, fires when it's closed.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.RangeMarker">
            <summary>
            Implementation of the <see cref="T:JetBrains.DocumentModel.IRangeMarker"/> interface.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myRangeBeforeTransaction">
            <summary>
            Stores range before transaction.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myIsValid">
            <summary>
            Indicates whether the range marker is valid or not
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myIsGreedyToLeft">
            <summary>
            Indicates whether the range marker is greedy to left
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.RangeMarker.myIsGreedyToRight">
            <summary>
            Indicates whether the range marker is greedy to right
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.RangeMarker.NotifyDocumentChanged(JetBrains.DocumentModel.DocumentChange,System.Int32,JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Notifies a range marker about document change
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.RangeMarker.IsValid">
            <summary>
            Gets or set a value indicating whether the range marker is valid
            <remarks>Setting works only for invalidating marker</remarks>
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.RangeMarkersManagerImpl.InvalidateFileMarkersOnProjectModelChange">
            <summary>
            Listens to solution-specific events on behalf of <see cref="T:JetBrains.DocumentManagers.RangeMarkersManagerImpl"/>.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.RangeMarkersManagerImpl.GetProjectFileRangeMarkersOnDocument">
            <summary>
            Populates <see cref="F:JetBrains.DocumentManagers.RangeMarkersManagerImpl.GetAllRangeMarkersOnDocument"/> with range markers on the project file on which the document has been created (if so).
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.ProjectModelAwareRangeMarkerManager">
            <summary>
            Per-solution range marker manager.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.SolutionDocumentChangeEventsAggregator">
            <summary>
            Listens to changes in all of the living documents, retranslates them to clients as a single event.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.SolutionDocumentChangeEventsAggregator.BeforeAnyDocumentChanged">
            <summary>
            Fires before a document is modified.
            Aggregates the <see cref="E:JetBrains.DocumentModel.IDocument.BeforeDocumentChanged"/> event on all the documents.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.SolutionDocumentChangeEventsAggregator.BeforeAnyDocumentCopyChanged">
            <summary>
            Ask Serjik.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.SolutionDocumentChangeProvider">
            <summary>
            The change provider that's firing <see cref="T:JetBrains.DocumentModel.DocumentChange"/> and <see cref="T:JetBrains.DocumentModel.DocumentCopyChanged"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.SolutionDocumentChangeProvider.AssertOnFileBasedDocumentModification(JetBrains.DocumentModel.Impl.DocumentBase,JetBrains.ProjectModel.IProjectFile)">
            <summary>
            When a file-based document is modified, asserts that it's allowed.
            </summary>
        </member>
        <member name="T:JetBrains.DocumentManagers.DocumentManager">
            <summary>
            Manages file-based documents that are backed with <see cref="T:JetBrains.ProjectModel.IProjectFile"/>s.
            Simple in-memory documents can be created with <see cref="T:JetBrains.DocumentModel.IShellDocumentFactory"/> and used independently of this class.
            Note: this class does not (and MUST NOT) have any own logic, it's only an aggregate of single-responsibility components. This prevents circular dependencies.
            </summary>
        </member>
        <member name="F:JetBrains.DocumentManagers.DocumentManager.OptionDontAssertNonVsDocumentModifications">
            <summary>
            Limits <see cref="M:JetBrains.DocumentManagers.SolutionDocumentChangeProvider.AssertOnFileBasedDocumentModification(JetBrains.DocumentModel.Impl.DocumentBase,JetBrains.ProjectModel.IProjectFile)"/> for legacy code.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.GetOrCreateDocument(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Gets document by project item.
            Creates if it hasn't been created yet for this project file.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.TryGetProjectFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            If this document has been created over a project file, returns that project file.
            Otherwise, returns <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.GetProjectFile(JetBrains.DocumentModel.IDocument)">
            <summary>
            If this document has been created over a project file, returns that project file.
            Otherwise, throws an exception.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.EnsureWritable(JetBrains.DocumentModel.IDocument,System.Action{JetBrains.Util.ModificationCookie})">
            <summary>
            Get clearance for write access to the docment, for example, at the Source Code Control.
            You MUST scope file-based-document modifications with this method.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.DocumentManager.EnsureWritableSuccess(JetBrains.DocumentModel.IDocument,System.Action)">
            <summary>
            Get clearance for write access to the docment, for example, at the Source Code Control.
            Executes the <paramref name="FIfSucceeded"/> action only if the modification query succeeds (<see cref="P:JetBrains.Util.ModificationCookie.EnsureWritableResult"/> is <see cref="F:JetBrains.Util.EnsureWritableResult.SUCCESS"/>).
            You MUST scope file-based-document modifications with this method.
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.DocumentManager.BeforeAnyDocumentChanged">
            <summary>
            Fires before a document is modified.
            Aggregates the <see cref="E:JetBrains.DocumentModel.IDocument.BeforeDocumentChanged"/> event on all the documents.
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.DocumentManager.BeforeAnyDocumentCopyChanged">
            <summary>
            Ask Serjik.
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.DocumentManager.ChangeProvider">
            <summary>
            Gets the change provider that's firing <see cref="T:JetBrains.DocumentModel.DocumentChange"/> and <see cref="T:JetBrains.DocumentModel.DocumentCopyChanged"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DocumentManagers.impl.StandaloneDocument.MakeReadonly(JetBrains.Util.TextRange)">
            <summary>
            Locks a document range temporarily to prevent it from being edited. To unlock, dispose of the return value.
            </summary>
        </member>
        <member name="P:JetBrains.DocumentManagers.impl.StandaloneDocument.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
    </members>
</doc>
