<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Enables support for the “ErrorsGen” build action in the projects. -->

  <PropertyGroup>
    <ErrorsGenHomeDir>$(ProductHomeDir)/Psi.Features/Tools/PsiGen/ToolsBinary</ErrorsGenHomeDir>
  </PropertyGroup>
  <Import Project="ErrorsGen.Tasks" />

  <ItemGroup>
    <!-- Add to the Visual Studio Build Action list on the files. -->
    <AvailableItemName Include="ErrorsGen" />
    <!-- Calculate output. -->
    <ErrorsGenOutput Include="@(ErrorsGen->'%(OutputFile)')">
      <AutoGen>True</AutoGen>
    </ErrorsGenOutput>
  </ItemGroup>

  <!-- Dispatch. -->
  <PropertyGroup>
    <GenerateErrorsGenDependsOn>
      $(GenerateErrorsGenDependsOn);
      GenerateErrorsGen_AddToItemGroups;
      GenerateErrorsGen_UndupeCompile;
      GenerateErrorsGen_Generate;
    </GenerateErrorsGenDependsOn>
    <CleanErrorsGenDependsOn>
      $(CleanErrorsGenDependsOn);
      CleanErrorsGen_Clean;
    </CleanErrorsGenDependsOn>
  </PropertyGroup>

  <!-- Plugin. -->
  <PropertyGroup>
    <!-- Plug into the build process before the Compile target executes. -->
    <PrepareResourcesDependsOn>
      $(GenerateErrorsGenDependsOn);
      $(PrepareResourcesDependsOn);
    </PrepareResourcesDependsOn>
    <!-- Clean the files, this enables proper Rebuild. -->
    <CleanDependsOn>
      $(CleanDependsOn);
      $(CleanErrorsGenDependsOn);
    </CleanDependsOn>
  </PropertyGroup>

  <!-- Produces the list of the output files for needs-rebuild check and Clean. -->
  <Target Name="GenerateErrorsGen_AddToItemGroups">
    <ItemGroup>
      <!-- Use the result in the build process. -->
      <Compile Include="@(ErrorsGenOutput)" />

      <!-- Support incremental clean for our files. -->
      <FileWrites Include="@(ErrorsGenOutput)" />
    </ItemGroup>
  </Target>

  <!-- After adding the outputs to the @(Compile) group, we might encounter duplicates — remove them. -->
  <Target Name="GenerateErrorsGen_UndupeCompile">
    <ItemGroup>
      <CompileUnfiltered Remove="%(CompileUnfiltered.Identity)" />
      <CompileUnfiltered Include="%(Compile.FullPath)" />
      <Compile Remove="%(Compile.Identity)" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(CompileUnfiltered)">
      <Output TaskParameter="Filtered" ItemName="Compile" />
    </RemoveDuplicates>
  </Target>

  <!-- The generation itself. -->
  <ItemGroup>
    <!-- Sources. -->
    <GenerateErrorsGenInputs Include="@(ErrorsGen)" />
    <!-- Tool files. -->
    <GenerateErrorsGenInputs Include="$(ErrorsGenHomeDir)/Bin/ErrorDescriptionGenerator.exe" />
    <GenerateErrorsGenInputs Include="$(ErrorsGenHomeDir)/Bin/ErrorsGen.Targets" />
    <GenerateErrorsGenInputs Include="$(ErrorsGenHomeDir)/Bin/ErrorsGen.Tasks" />
  </ItemGroup>
  <Target Name="GenerateErrorsGen_Generate" Inputs="@(GenerateErrorsGenInputs)" Outputs="@(ErrorsGenOutput)" Condition="'@(ErrorsGen)' != ''">
    <ErrorsGen InputFile="%(ErrorsGen.FullPath)" OutputFile="%(OutputFile)" Namespace="%(Namespace)" Mode="%(Mode)" />
    <Message Text="%(ErrorsGen.FullPath) --(*)--> %(OutputFile)" />
  </Target>

  <!-- Cleans the generated files. -->
  <Target Name="CleanErrorsGen_Clean">
    <Delete Files="@(ErrorsGenOutput)" TreatErrorsAsWarnings="true"  />
  </Target>

</Project>