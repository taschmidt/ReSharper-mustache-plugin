<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Build.Common</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Util.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor">
            <summary>
            Initializes new instance of UsedImplicitlyAttribute
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.UsedImplicitlyAttribute.#ctor(JetBrains.Annotations.ImplicitUseFlags)">
            <summary>
            Initializes new instance of UsedImplicitlyAttribute with specified flags
            </summary>
            <param name="flags">Value of type <see cref="T:JetBrains.Annotations.ImplicitUseFlags"/> indicating usage kind</param>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.Flags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor">
            <summary>
            Initializes new instance of MeansImplicitUseAttribute
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseFlags)">
            <summary>
            Initializes new instance of MeansImplicitUseAttribute with specified flags
            </summary>
            <param name="flags">Value of type <see cref="T:JetBrains.Annotations.ImplicitUseFlags"/> indicating usage kind</param>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.Flags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseFlags.Initialize">
            <summary>
            Indicates implicit intialization of a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseFlags.IncludeMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Infra.AttributeName">
            <summary>
            Names for the task attribute items in the property bag.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.CodeDomEx.WriteCodeToFile(System.CodeDom.CodeCompileUnit,System.String)">
            <summary>
            Writes code in any case, even if it is the same (touches the file date, used in normal build that looks at input/output dates).
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.CodeDomEx.WriteCodeToFileIfDifferent(System.CodeDom.CodeCompileUnit,System.String)">
            <summary>
            Would not overwrite a file if the content is the same, leaving the file date intact. This breaks the standard inputs/outputs dependency logic, so use in special cases only.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildEx.FullPath(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Gets the <c>%(FullPath)</c> metadata of the task item.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Infra.TaskBase">
            <summary>
            The base class for deriving tasks from it, defines the attribute bag.
            </summary>
        </member>
        <member name="F:JetBrains.Build.Common.Infra.TaskBase.myBag">
            <summary>
            <see cref="P:JetBrains.Build.Common.Infra.TaskBase.Bag"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.BagContains(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Checks whether a bag entry is present.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.BagGet``1(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a typed value from the bag. Throws if a value is missing.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.BagGet``1(JetBrains.Build.Common.Infra.AttributeName,``0)">
            <summary>
            Gets a typed value from the bag. Returns the <paramref name="defaultvalue"/> if an entry is missing from the bag.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.BagGetTry``1(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a typed value from the bag. <c>Null</c> (a missing value) is OK.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.BagSet``1(JetBrains.Build.Common.Infra.AttributeName,``0)">
            <summary>
            Puts a typed value to the bag. <c>Null</c> (a missing value) is OK.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.GetStringValue(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a string value from the bag, throws on an error.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.GetValue``1(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a <typeparamref name="T"/> value from the bag, throws on an error.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskBase.Execute">
            <summary>
            When overridden in a derived class, executes the task.
            </summary>
            
            <returns>
            true if the task successfully executed; otherwise, false.
            </returns>
            
        </member>
        <member name="P:JetBrains.Build.Common.Infra.TaskBase.Bag">
            <summary>
            Gets the task attributes bag.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Infra.TaskHelper">
            <summary>
            Static helper methods, externalized from different tasks.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskHelper.GetPathValue(System.Collections.Hashtable,JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a string or <see cref="T:Microsoft.Build.Framework.ITaskItem"/> value from the bag, makes a full path out of it, throws on an error.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskHelper.GetStringValue(System.Collections.Hashtable,JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a string or <see cref="T:Microsoft.Build.Framework.ITaskItem"/> value from the bag, throws on an error.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.TaskHelper.GetValue``1(System.Collections.Hashtable,JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a <typeparamref name="T"/> value from the bag, throws on an error.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Infra.ToolTaskBase">
            <summary>
            A base task for tool-based tasks, defining the attributes bag.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.ToolTaskBase.BagContains(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Checks whether a bag entry is present.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.ToolTaskBase.BagGet``1(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a typed value from the bag. Throws if a value is missing.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.ToolTaskBase.BagGet``1(JetBrains.Build.Common.Infra.AttributeName,``0)">
            <summary>
            Gets a typed value from the bag. Returns the <paramref name="defaultvalue"/> if an entry is missing from the bag.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.ToolTaskBase.BagGetTry``1(JetBrains.Build.Common.Infra.AttributeName)">
            <summary>
            Gets a typed value from the bag. <c>Null</c> (a missing value) is OK.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.ToolTaskBase.BagSet``1(JetBrains.Build.Common.Infra.AttributeName,``0)">
            <summary>
            Puts a typed value to the bag. <c>Null</c> (a missing value) is OK.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.ToolTaskBase.GenerateFullPathToTool">
            <summary>
            Returns the fully qualified path to the executable file.
            </summary>
            
            <returns>
            The fully qualified path to the executable file.
            </returns>
            
        </member>
        <member name="P:JetBrains.Build.Common.Infra.ToolTaskBase.ToolDir">
            <summary>
            Gets or sets the directory in which the tool task executable resides.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Infra.ToolTaskBase.ToolDirEnvName">
            <summary>
            Gets the name of the environment variable that provides the path to the tool in case the <see cref="P:JetBrains.Build.Common.Infra.ToolTaskBase.ToolDir"/> is not defined.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Infra.VsHiveTask">
            <summary>
            A task that defines task input parameters for defining the VS hive.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.VsHiveTask.GetVsHive">
            <summary>
            Gets the Visual Studio hive, which is a concatenation of the version and the hive.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.VsHiveTask.GetVsRootSuffix">
            <summary>
            Gets the Visual Studio root suffix, checks that it's been defined.
            Replaces the dash special value “-” with an empty root suffix.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.VsHiveTask.GetVsVersion">
            <summary>
            Gets the Visual Studio version, checks that it's been defined.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Infra.VsHiveTask.VsRootSuffix">
            <summary>
            Gets or sets the Visual Studio root suffix to work with, a dash “-” means no hive.
            Example: “-” (main hive), “ReSharper” (experimental hive).
            <see cref="P:JetBrains.Build.Common.Infra.VsHiveTask.VsVersion"/> and <see cref="P:JetBrains.Build.Common.Infra.VsHiveTask.VsRootSuffix"/> together form the Visual Studio Hive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Infra.VsHiveTask.VsVersion">
            <summary>
            Gets or sets the Visual Studio version to work with.
            Example: “8.0”.
            <see cref="P:JetBrains.Build.Common.Infra.VsHiveTask.VsVersion"/> and <see cref="P:JetBrains.Build.Common.Infra.VsHiveTask.VsRootSuffix"/> together form the Visual Studio Hive.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.AssertStrongName">
            <summary>
            Throws if any of the input file is missing a strong name.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.AssertStrongName.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.AssertStrongName.InputFiles">
            <summary>
            Specifies the list of the files to check for the strong name.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.CompressRar">
            <summary>
            Compresses a number of files into a RAR archive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CompressRar.InputFiles">
            <summary>
            Gets or sets the list of files to be packed.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CompressRar.OutputFile">
            <summary>
            Gets or sets the resulting archive file.
            </summary>
        </member>
        <member name="T:Microsoft.Build.Tasks.Copy">
            <summary>
            A Copy task that has mostly the same behavior as Microsoft standard task, but can force locked files out of the way.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Tasks.Copy.IsFileContentIdentical(System.String,System.String)">
            <summary>
            Checks if the files are identical by their content, not only attrs and length.
            </summary>
        </member>
        <member name="M:Microsoft.Build.Tasks.Copy.CopyFileForced(System.String,System.String)">
            <summary>
            After the normal copy fails because the dest file is in use, forces the dest file out of the way. Checks if the dest file is any different from the src file first.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Tasks.Copy.Retries">
            <summary>
            Optional. Mimics the Netfx4 API, not used by the task.
            </summary>
        </member>
        <member name="P:Microsoft.Build.Tasks.Copy.RetryDelayMilliseconds">
            <summary>
            Optional. Mimics the Netfx4 API, not used by the task.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Infra.MsbuildPropertiesBase">
            <summary>
            <para>Utilities for working with a set of properties defined in an MSBuild file. Base for tasks to expose them to other medias (C#, WiX, etc).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.TagMustOverride">
            <summary>
            The case-insensitive tag that means the platform #define value must be overridden in the product (or TeamCity, for that matter).
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.GetBuildPropertyComments(Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            Tries to locate XmlDoc comments for the property.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.TryGetBuildPropertyXmlElement(Microsoft.Build.BuildEngine.BuildProperty)">
            <summary>
            MSBuild has XML Elements for its props usually, try ripping those out.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.GetPropertiesRaw">
            <summary>
            Props from the MSBuild file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.MsbuildProject">
            <summary>
            Required. Gets or sets the path to the MSBuild Project file that defines the properties that should be exposed to a CLR language.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.Property.GetTypedValue">
            <summary>
            MSbuild property values are strings. Coerces such string to the actual property value (property type is encoded in the property name).
            Also checks for leftover MustOverride tags.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.PropertyType.#ctor(System.Type,System.String,System.Func{System.Object,System.Object},System.Func{System.Object,System.CodeDom.CodeExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.PropertyType.IsEmptyValueNull">
            <summary>
            Gets whether an empty value on the input property causes a <c>Null</c> value in the resulting defines.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.PropertyTypedValue.#ctor(JetBrains.Build.Common.Infra.MsbuildPropertiesBase.Property,JetBrains.Build.Common.Infra.MsbuildPropertiesBase.PropertyType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Infra.MsbuildPropertiesBase.PropertyTypedValue.EmitInitExpression(System.Boolean)">
            <summary>
            Emits init expression for a field to set it to this value.
            </summary>
            <param name="isConst">Const version (some kind of reasonable string substitute for non-primitive types).</param>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.MsbuildPropertiesToCode">
            <summary>
            <para>Takes a set of properties defined in an MSBuild file, and turns them into code in some programming language (eg C#).</para>
            <para>This emulates #defines-with-values, like in C++, that are missing from C#.</para>
            <para>Only the statically-evaluated property values are considered. You can reference environment variables to allow overrides on a build server, eg TeamCity %env% properties. You can include other MSBuild files, eg to override default values (without TeamCity) defined in the Platform by your Product-specific default values.</para>
            <para>The algorithm takes any properties defined in global Property Groups and takes their evaluated value. The CLR type is inferred from the property name prefix: "Is" means a Boolean, "Num" means an Int32, and so on.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.MsbuildPropertiesToCode.EmitClass_Props(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeTypeDeclaration,System.Collections.Generic.IEnumerable{JetBrains.Build.Common.Infra.MsbuildPropertiesBase.Property})">
            <summary>
            Fields for props into the classes.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.MsbuildPropertiesToCode.EmitClass_Props_Field(JetBrains.Build.Common.Infra.MsbuildPropertiesBase.Property,System.Boolean)">
            <summary>
            Creates a full field decl for a single prop field.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.MsbuildPropertiesToCode.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.MsbuildPropertiesToCode.ClassName">
            <summary>
            Required. Gets or sets the full CLR name of the generated class.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.MsbuildPropertiesToCode.OutputFile">
            <summary>
            Required. Gets or sets the name of the output file in a CLR language. The file extension defines the language.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.MsbuildPropertiesToItemGroup">
            <summary>
            <para>Takes a set of properties defined in an MSBuild file, and turns them into an MSBuild ItemGroup.</para>
            <para>Only the statically-evaluated property values are considered. You can reference environment variables to allow overrides on a build server, eg TeamCity %env% properties. You can include other MSBuild files, eg to override default values (without TeamCity) defined in the Platform by your Product-specific default values.</para>
            <para>The algorithm takes any properties defined in global Property Groups and takes their evaluated value. The CLR type is inferred from the property name prefix: "Is" means a Boolean, "Num" means an Int32, and so on.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.MsbuildPropertiesToItemGroup.CreateTaskItem(JetBrains.Build.Common.Infra.MsbuildPropertiesBase.Property)">
            <summary>
            Creates a task item, fills up with metadata.
            This is also where the typed value is extracted from the property, and related exceptions might occur.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.MsbuildPropertiesToItemGroup.Items">
            <summary>
            <para>Gets the resulting items corresponding to the #defined properties.</para>
            <para>Metadata:</para>
            <para>• Name: Name of the property, including the type-inferring prefix.</para>
            <para>• ValueOriginal: The property value, right out of the MSBuild Property Group evaluator. Basically the string written in the MSBuild file (or TeamCity overrides), as is, but for any possible macros etc.</para>
            <para>• ValueConstString: The property value, parsed and coerced to whatever property type was inferred from the property name, converted then to a C# literal value, as would be used in the <c>Defines::Const</c> C# class (non-string literal values, like ints or bools, are coerced to invariant strings).</para>
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.ReplaceInItemGroup">
            <summary>
            Performs RegexReplace on <see cref="P:Microsoft.Build.Framework.ITaskItem.ItemSpec"/>s of <see cref="T:Microsoft.Build.Framework.ITaskItem"/>s in an <c>ItemGroup</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.CaseSensitive">
            <summary>
            Gets or sets whether the search should be case-sensitive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.FailOnNoMatch">
            <summary>
            Gets or sets whether the task should fail when no replacements were made.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.Input">
            <summary>
            Gives the list of items to replace text in.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.IsMatch">
            <summary>
            Gets whether there were any replacements, that is, the string was ever matched.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.OriginalTextMetadataName">
            <summary>
            Optional. If specified, the original text of each <see cref="P:Microsoft.Build.Framework.ITaskItem.ItemSpec"/> will be written into metadata of the renamed item under this name.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.Output">
            <summary>
            Returns the list of replaced items.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.What">
            <summary>
            Gets or sets the matching pattern.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceInItemGroup.With">
            <summary>
            Gets or sets the replacement string.
            </summary>  
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.ReplaceTextEx">
            <summary>
            Replaces text in the text files against a regexp.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.ReplaceTextEx.ReplaceTextInFile(System.String,System.String,System.Collections.Generic.ICollection{System.Func{System.String,System.String}})">
            <summary>
            Processes a single file.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.ReplaceTextEx.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.CaseSensitive">
            <summary>
            Gets or sets whether the search should be case-sensitive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.InputFiles">
            <summary>
            Gets or sets the files to read for replacing the text.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.OutputFiles">
            <summary>
            Gets or sets the files to write the results into. Must correspond to <see cref="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.InputFiles"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.Patterns">
            <summary>
            <para>Gets or sets the list of patterns to perform the replace against.</para>
            <para>The item spec is insignificant. The <c>What</c> metadata represents the search pattern, and <c>With</c> metadata represents the replacement string.</para>
            <para>Either this or <see cref="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.PatternsText"/> must be specified.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.PatternsText">
            <summary>
            <para>Gets or sets the list of patterns to perform the replace against.</para>
            <para>Each pattern is a pair of strings. The first one represents the search pattern, and the second one represents the replacement string. Strings are separated with <c>U+001E</c> (<c>RS</c>, Record Separator) chars, both within the pair and between the pairs.</para>
            <para>Either this or <see cref="P:JetBrains.Build.Common.Tasks.ReplaceTextEx.Patterns"/> must be specified.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.CreateExperimentalHive">
            <summary>
            Creates a Visual Studio Experimental Hive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreateExperimentalHive.Force">
            <summary>
            Whether to force deletion and recreation of the hive even when it already exists.
            When <c>False</c>, the hive will be copied from the main one if it does not exist yet.
            The InstallDir Registry value is used to make a decision.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreateExperimentalHive.VsRootSuffix">
            <summary>
            The root suffix of the experimental hive. Must not be empty (which designates the main hive).
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreateExperimentalHive.VsVersion">
            <summary>
            A two-component Visual Studio version.
            Example: <c>9.0</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.DecompressRar">
            <summary>
            Decompresses a number of files from a RAR archive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.DecompressRar.InputFile">
            <summary>
            Gets or sets the archive file.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.DecompressRar.OutputFolder">
            <summary>
            Gets or sets the folder to extract the files into.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.GetNativeFileVersion">
            <summary>
            Gets the native (WinAPI) file version. This is not the managed assembly version.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Build">
            <summary>
            Gets the Build version component (out of <c>{Major}.{Minor}.{Build}.{Revision}</c>). 
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Input">
            <summary>
            The file to get the version of.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Major">
            <summary>
            Gets the Major version component (out of <c>{Major}.{Minor}.{Build}.{Revision}</c>). 
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Minor">
            <summary>
            Gets the Minor version component (out of <c>{Major}.{Minor}.{Build}.{Revision}</c>). 
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Revision">
            <summary>
            Gets the Revision version component (out of <c>{Major}.{Minor}.{Build}.{Revision}</c>). 
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Version2">
            <summary>
            Gets the dot-separated two-component version number, <c>{Major}.{Minor}</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Version3">
            <summary>
            Gets the dot-separated three-component version number, <c>{Major}.{Minor}.{Build}</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetNativeFileVersion.Version4">
            <summary>
            Gets the dot-separated four-component version number, <c>{Major}.{Minor}.{Build}.{Revision}</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.GetFileVersionInfoSizeW(System.String,System.UInt32*)">
            <summary>
            Determines whether the operating system can retrieve version information for a specified file. If version information is available, <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.GetFileVersionInfoSizeW(System.String,System.UInt32*)"/> returns the size, in bytes, of that information. 
            </summary>
            <param name="lptstrFilename">[in] Pointer to a null-terminated string that specifies the name of the file of interest. The function uses the search sequence specified by the LoadLibrary function. Windows 95/98/Me: The short path form of the specified file name must be less than 126 characters.</param>
            <param name="lpdwHandle">[out] Pointer to a variable that the function sets to zero.</param>
            <returns>If the function succeeds, the return value is the size, in bytes, of the file's version information. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.GetFileVersionInfoW(System.String,System.UInt32,System.UInt32,System.Void*)">
            <summary>
            Retrieves version information for the specified file. 
            </summary>
            <param name="lptstrFilename">[in] Pointer to a null-terminated string that specifies the name of the file of interest. If a full path is not specified, the function uses the search sequence specified by the LoadLibrary function.Windows 95/98/Me: The short path form of the specified file name must be less than 126 characters.</param> 
            <param name="dwHandle">This parameter is ignored.</param>
            <param name="dwLen">[in] Specifies the size, in bytes, of the buffer pointed to by the lpData parameter. Call the <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.GetFileVersionInfoSizeW(System.String,System.UInt32*)"/> function first to determine the size, in bytes, of a file's version information. The dwLen member should be equal to or greater than that value. If the buffer pointed to by lpData is not large enough, the function truncates the file's version information to the size of the buffer.</param>
            <param name="lpData">[out] Pointer to a buffer that receives the file-version information. You can use this value in a subsequent call to the <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.VerQueryValueW(System.Void*,System.String,System.Void**,System.UInt32*)"/> function to retrieve data from the buffer.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.VerQueryValueW(System.Void*,System.String,System.Void**,System.UInt32*)">
            <summary>
            The <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.VerQueryValueW(System.Void*,System.String,System.Void**,System.UInt32*)"/> function retrieves specified version information from the specified version-information resource. To retrieve the appropriate resource, before you call <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.VerQueryValueW(System.Void*,System.String,System.Void**,System.UInt32*)"/>, you must first call the <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.GetFileVersionInfoSizeW(System.String,System.UInt32*)"/> function, and then the <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.GetFileVersionInfoW(System.String,System.UInt32,System.UInt32,System.Void*)"/> function.
            </summary>
            <param name="pBlock">[in] Pointer to the buffer containing the version-information resource returned by the <see cref="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.GetFileVersionInfoW(System.String,System.UInt32,System.UInt32,System.Void*)"/> function. </param>
            <param name="lpSubBlock">[in] Pointer to a zero-terminated string specifying which version-information value to retrieve. The string must consist of names separated by backslashes (\) and it must have one of the following forms. 
            <para><c>\</c></para>
            <para>Specifies the root block. The function retrieves a pointer to the VS_FIXEDFILEINFO structure for the version-information resource.</para>
            <para><c>\VarFileInfo\Translation</c></para>
            <para>Specifies the translation array in a Var variable information structure—the Value member of this structure. The function retrieves a pointer to this array of language and code page identifiers. An application can use these identifiers to access a language-specific StringTable /// structure (using the szKey member) in the version-information resource.</para>
            <para><c>\StringFileInfo\lang-codepage\string-name</c></para>
            <para>Specifies a value in a language-specific StringTable structure. The lang-codepage name is a concatenation of a language and code page identifier pair found as a DWORD in the translation array for the resource. Here the lang-codepage name must be specified as a hexadecimal string. The string-name name must be one of the predefined strings described in the following Remarks section. The function retrieves a string value specific to the language and code page indicated. </para>
            </param>
            <param name="lplpBuffer">[out] When this method returns, contains the address of a pointer to the requested version information in the buffer pointed to by pBlock. The memory pointed to by lplpBuffer is freed when the associated pBlock memory is freed. </param>
            <param name="puLen">[out] When this method returns, contains a pointer to the size of the requested data pointed to by lplpBuffer: for version information values, the length in TCHARs of the string stored at lplpBuffer; for translation array values, the size in bytes of the array stored at lplpBuffer; and for root block, the size in bytes of the structure.</param>
            <returns>If the specified version-information structure exists, and version information is available, the return value is nonzero. If the address of the length buffer is zero, no value is available for the specified version-information name. If the specified name does not exist or the specified resource is not valid, the return value is zero.</returns>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.GetNativeFileVersion.VersionDll.Helpers.GetFileVersion(System.IO.FileInfo)">
            <summary>
            Gets the WinAPI file version of a native file.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.RegQueryValue">
            <summary>
            Queries for a Registry value.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.RegQueryValue.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegQueryValue.DefaultData">
            <summary>
            Optional. Value data to be used if there's no such Registry Value.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegQueryValue.Exists">
            <summary>
            Gets whether the Registry Value was found.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegQueryValue.Hive">
            <summary>
            <para>Optional. The Registry Hive.</para>
            <para>Available formats are:</para>
            <para>• Registry format, eg <c>HKEY_CLASSES_ROOT</c>.</para>
            <para>If this parameter is not specified, the Hive must be included in the <see cref="P:JetBrains.Build.Common.Tasks.RegQueryValue.Key"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegQueryValue.Key">
            <summary>
            The Registry Key to which the value belongs.
            Can include the Registry Hive in the Registry format (eg <c>HKEY_CLASSES_ROOT</c>), unless <see cref="P:JetBrains.Build.Common.Tasks.RegQueryValue.Hive"/> is specified.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegQueryValue.ValueData">
            <summary>
            Gets the data of the RegistryValue, or <see cref="P:JetBrains.Build.Common.Tasks.RegQueryValue.DefaultData"/> if the value is missing (see <see cref="P:JetBrains.Build.Common.Tasks.RegQueryValue.Exists"/>).
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegQueryValue.ValueName">
            <summary>
            Name of the Registry value to query.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.RegSetValue">
            <summary>
            Sets a Registry value.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.RegSetValue.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegSetValue.Hive">
            <summary>
            <para>Optional. The Registry Hive.</para>
            <para>Available formats are:</para>
            <para>• Registry format, eg <c>HKEY_CLASSES_ROOT</c>.</para>
            <para>If this parameter is not specified, the Hive must be included in the <see cref="P:JetBrains.Build.Common.Tasks.RegSetValue.Key"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegSetValue.Key">
            <summary>
            The Registry Key to which the value belongs.
            Can include the Registry Hive in the Registry format (eg <c>HKEY_CLASSES_ROOT</c>), unless <see cref="P:JetBrains.Build.Common.Tasks.RegSetValue.Hive"/> is specified.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegSetValue.ValueData">
            <summary>
            The value data to be written to the Registry.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegSetValue.ValueName">
            <summary>
            Name of the Registry value to set.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RegSetValue.ValueType">
            <summary>
            Optional. The Registry value type, as of the <see cref="T:Microsoft.Win32.RegistryValueKind"/> enumeration. <see cref="F:Microsoft.Win32.RegistryValueKind.String"/> is the default.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.RemoveItemsInFolder">
            <summary>
            Scans through the item group and removes any items that fall under the given folder.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.RemoveItemsInFolder.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RemoveItemsInFolder.Directory">
            <summary>
            Specifies the directory files in which (recursively) should be excluded from <see cref="P:JetBrains.Build.Common.Tasks.RemoveItemsInFolder.Items"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RemoveItemsInFolder.Items">
            <summary>
            Specifies the list of the files to be filtered down.
            Note: you should not be using the same item group for input and output, as the output contributes to the item group but would not replace it.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.TlbExp">
            <summary>
            Exports a .NET Assembly as a COM Type Library.
            A possible use is checking the assemblies for COM validness so that their CCW aren't gonna have any problems in runtime.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TlbExp.InputFile">
            <summary>
            Specifies the .NET Assembly to convert to a COM Type Library.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TlbExp.OutDir">
            <summary>
            Specifies the resulting COM Type Library file directory. A default TLB file name is used, based on the assembly name.
            Either this or <see cref="P:JetBrains.Build.Common.Tasks.TlbExp.OutputFile"/> must be specified.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TlbExp.OutputFile">
            <summary>
            Specifies the resulting COM Type Library file.
            Either this or <see cref="P:JetBrains.Build.Common.Tasks.TlbExp.OutDir"/> must be specified.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TlbExp.ReferencesDir">
            <summary>
            Optional. Specifies the list of folders to look for assembly references.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TlbExp.Silent">
            <summary>
            Whether the tool output should be silent.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TlbExp.Verbose">
            <summary>
            Whether the tool output should be verbose.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.TypeLibExport">
            <summary>
            Exports a set of .NET Assemblies as COM Type Libraries.
            A possible use is checking the assemblies for COM validness so that their CCW aren't gonna have any problems in runtime.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.TypeLibExport.ExportTypeLib(Microsoft.Build.Framework.ITaskItem,Microsoft.Build.Framework.ITaskItem,System.Func{System.String[],System.Int32},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs ExportTypeLib for a single item.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.TypeLibExport.LoadTlbExpTool">
            <summary>
            Loads the MS implementation.
            We cannot use the class from System.Reflection right away and prefer to use the TlbExp tool code because it constructs a new AppDomain into which the assembly being exported is loaded (and unloaded). This way, the assembly is not locked on disk.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.TypeLibExport.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TypeLibExport.InputFiles">
            <summary>
            Specifies the list of .NET Assemblies to convert to COM Type Libraries.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TypeLibExport.OutputFiles">
            <summary>
            Specifies the list of resulting COM Type Library files.
            Each item in the list must correspond to an item in the <see cref="P:JetBrains.Build.Common.Tasks.TypeLibExport.InputFiles"/> list.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TypeLibExport.Silent">
            <summary>
            Whether the tool output should be silent.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.TypeLibExport.Verbose">
            <summary>
            Whether the tool output should be verbose.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.VerifyAuthenticode">
            <summary>
            Verifies the files signed with Microsoft Authenticode.
            Calls <c>SignTool.exe</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.VerifyAuthenticode.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
            
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.VerifyAuthenticode.InputFiles">
            <summary>
            The input files that will be verified by the task.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.VerifyAuthenticode.Verbose">
            <summary>
            Whether the tool output should be verbose.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.VerifyAuthenticode.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            
            <returns>
            The name of the executable file to run.
            </returns>
            
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.CopyFirstAttempt">
            <summary>
            Overrides the <c>Microsoft.Build.Tasks.Copy</c> task.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.CopyFirstAttempt.CopyFileIfNeeded(Microsoft.Build.Framework.ITaskItem,Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Checks whether the file needs to be copied.
            Does it, if needed.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.CopyFirstAttempt.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CopyFirstAttempt.CopiedFiles">
            <summary>
            Contains the items that were successfully copied.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CopyFirstAttempt.DestinationFiles">
            <summary>
            Specifies the list of files to copy the source files to. This list is expected to be a one-to-one mapping with the list specified in the SourceFiles parameter. That is, the first file specified in SourceFiles will be copied to the first location specified in DestinationFiles, and so forth.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CopyFirstAttempt.DestinationFolder">
            <summary>
            Specifies the directory to which you want to copy the files. This must be a directory, not a file. If the directory does not exist, it is created automatically.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CopyFirstAttempt.OverwriteReadOnlyFiles">
            <summary>
            Overwrite files even if they are marked as read only files.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CopyFirstAttempt.SkipUnchangedFiles">
            <summary>
            If true, skips the copying of files that are unchanged between the source and destination. The Copy task considers files to be unchanged if they have the same size and the same last modified time.
            If you set this parameter to true, you should not use dependency analysis on the containing target, because that only runs the task if the last-modified times of the source files are newer than the last-modified times of the destination files.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CopyFirstAttempt.SourceFiles">
            <summary>
            Specifies the files to copy.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile">
            <summary>
            Generates the publisher policy assemblies for the given set of assemblies and their specific versions.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.AssertVersionComponents(System.Version,System.Int32)">
            <summary>
            Ensures that version has at least <paramref name="components"/> components defined.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.InputFiles">
            <summary>
            Lists the assemblies for which the policies should be generated.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.IntDir">
            <summary>
            Specifies the intermediate folder in which the config files should be created.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.KeyFile">
            <summary>
            Specifies the key file to sign the publisher policy assemblies with; must correspond to the key that was used to sign the original assembly.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.OutDir">
            <summary>
            Specifies the output folder into which the resulting assemblies will be written.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.OutputFile">
            <summary>
            Specifies the output MSBuild project file that will be generated by this task.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.SourceVersionHigh">
            <summary>
            The upper boundary of the source versions range for the publisher policy. Optional; if missed, the actual version of the assembly will be used.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.SourceVersionLow">
            <summary>
            The lower boundary of the source versions range for the publisher policy. Required.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.CreatePublisherPolicyBuildFile.TargetVersion">
            <summary>
            The target version for the publisher policy. Optional; if missed, the actual version of the assembly will be used.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.DateTime">
            <summary>
            Presents the current Date and Time in an arbitrary format.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.DateTime.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.DateTime.IsUtc">
            <summary>
            Gets or sets the UTC time mode.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.DateTime.Format">
            <summary>
            Gets or sets the formatting string.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.DateTime.Value">
            <summary>
            The resulting date/time string.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.Decompress">
            <summary>
            Decompresses a number of files from a ZIP package.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Decompress.InputFile">
            <summary>
            Gets or sets the package file.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Decompress.OutputFolder">
            <summary>
            Gets or sets the folder to extract the files into.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.Delete">
            <summary>
            Overrides the <c>Microsoft.Build.Tasks.Delete</c> task.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Delete.SafeDeleteFile(System.IO.FileInfo)">
            <summary>
            Tries deleting the file, even if it's in use.
            Returns a non-<c>Null</c> string with the moved-out file name if the file-in-use had to be moved out.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Delete.DoFileIn(Microsoft.Build.Framework.ITaskItem)">
            <summary>
            Processes a single file.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Delete.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.GetCustomVersion">
            <summary>
            Gets the custom version number based on the current date and time.
            This way, each new build gets its own build number (provided that they don't run too often).
            The generated version components have the WORD size.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetCustomVersion.BaseDate">
            <summary>
            The base date, in UTC, written against ISO-8601.
            The difference in time from the base date is used to produce the version number, see output parameters for details.
            It is recommended that it be in the past.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetCustomVersion.Build">
            <summary>
            The Build version number component. This component is dynamic and equal to the number of full days between the current date and <see cref="P:JetBrains.Build.Common.Tasks.GetCustomVersion.BaseDate"/>, UTC.
            If the number is negative, it overlaps <c>FFFF</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetCustomVersion.Major">
            <summary>
            The Major version number component. This component is not dynamic.
            If you set an input value for this property, it will be used for the output(unless <c>0</c>, which is treated as "Not Set").
            If the input value is not set or <c>0</c>, the output value of <c>1</c> will be used.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetCustomVersion.Minor">
            <summary>
            The Minor version number component. This component is not dynamic.
            If you set an input value for this property, it will be used. If the input value is not set, the output value of <c>0</c> will be used.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetCustomVersion.Revision">
            <summary>
            The Revision version number component. This component is dynamic and grows proportionally from <c>0</c> to <c>FFFF</c> within one <see cref="P:JetBrains.Build.Common.Tasks.GetCustomVersion.Build"/> number.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.GetCustomVersion.Version4">
            <summary>
            Gets the dot-separated four-component version number, <c>{Major}.{Minor}.{Build}.{Revision}</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.InnovasysHelpLite">
            <summary>
            Builds the Innovasis Help Studio Lite projects.
            </summary>
        </member>
        <member name="F:JetBrains.Build.Common.Tasks.InnovasysHelpLite.myRegexDetailedMessage">
            <summary>
            A message with all the line/cols available.
            </summary>
        </member>
        <member name="F:JetBrains.Build.Common.Tasks.InnovasysHelpLite.myRegexLineWithMessage">
            <summary>
            A line that has either message.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.InnovasysHelpLite.ExecuteTool(System.String,System.String,System.String)">
            <summary>
            Creates a temporoary response (.rsp) file and runs the executable file.
            </summary>
            
            <returns>
            The returned exit code of the executable file. If the task logged errors, but the executable returned an exit code of 0, this method returns -1.
            </returns>
            
            <param name="commandLineCommands">The command line arguments to pass directly to the executable file.</param>
            <param name="responseFileCommands">The command line arguments to place in the .rsp file.</param>
            <param name="pathToTool">The path to the executable file.</param>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.InnovasysHelpLite.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
            
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.InnovasysHelpLite.InputFile">
            <summary>
            Gets or sets the Help Studio project file pathname.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.InnovasysHelpLite.OutDir">
            <summary>
            Gets or sets the output folder path/name.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.InnovasysHelpLite.OutputFile">
            <summary>
            Gets or sets the name of the output file in the <see cref="P:JetBrains.Build.Common.Tasks.InnovasysHelpLite.OutDir"/> folder.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.InnovasysHelpLite.ToolDirEnvName">
            <summary>
            Gets the name of the environment variable that provides the path to the tool in case the <see cref="P:JetBrains.Build.Common.Infra.ToolTaskBase.ToolDir"/> is not defined.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.InnovasysHelpLite.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            
            <returns>
            The name of the executable file to run.
            </returns>
            
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.MsHelp2">
            <summary>
            Compiles the MS-Help files into the Document Explorer format.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.MsHelp2.ExecuteTool(System.String,System.String,System.String)">
            <summary>
            Creates a temporoary response (.rsp) file and runs the executable file.
            </summary>
            
            <returns>
            The returned exit code of the executable file. If the task logged errors, but the executable returned an exit code of 0, this method returns -1.
            </returns>
            
            <param name="commandLineCommands">The command line arguments to pass directly to the executable file.</param>
            <param name="responseFileCommands">The command line arguments to place in the .rsp file.</param>
            <param name="pathToTool">The path to the executable file.</param>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.MsHelp2.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
            
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.MsHelp2.HelpCollectionFile">
            <summary>
            Gets or sets the project (Collection, HxC) file.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.MsHelp2.OutputFile">
            <summary>
            Gets or sets the name of the output (generated, HxS) file.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.MsHelp2.ProjectDir">
            <summary>
            Gets or sets the help project root.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.MsHelp2.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            
            <returns>
            The name of the executable file to run.
            </returns>
            
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.Compress">
            <summary>
            Compresses a number of files into a ZIP package.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Compress.CompressFile(System.IO.Packaging.Package,System.IO.FileInfo,System.IO.Packaging.CompressionOption)">
            <summary>
            Adds a compressed file to the package.
            Returns the input file length.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Compress.CompressionLevel">
            <summary>
            Optional. Gets or sets the compression level against the <see cref="T:System.IO.Packaging.CompressionOption"/> enum. The default is <see cref="F:System.IO.Packaging.CompressionOption.Maximum"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Compress.FilesAdded">
            <summary>
            Gets the number of files added to the compressed package.
            Output parameter.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Compress.InputFiles">
            <summary>
            Gets or sets the list of files to be packed.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Compress.OutputFile">
            <summary>
            Gets or sets the resulting archive file.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Compress.Ratio">
            <summary>
            Gets the estimated ratio, which is the compressed size divided on the uncompressed size.
            Output parameter.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Compress.SizeCompressed">
            <summary>
            Gets the size of the compressed content (the full resulting package).
            Output parameter.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Compress.SizeUncompressed">
            <summary>
            Gets the size of the uncompressed content.
            Output parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.RenReg">
            <summary>
            Supports RegEx rename of files.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.RenReg.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RenReg.Directory">
            <summary>
            Gets or sets the directory to look for the files.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RenReg.What">
            <summary>
            Gets or sets the matching pattern.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.RenReg.With">
            <summary>
            Gets or sets the replacement string.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.Replace">
            <summary>
            Performs RegexReplace on a string.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Replace.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Replace.CaseSensitive">
            <summary>
            Gets or sets whether the search should be case-sensitive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Replace.FailOnNoMatch">
            <summary>
            Gets or sets whether the task should fail when no replacements were made.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Replace.IsMatch">
            <summary>
            Gets whether there were any replacements, that is, the string was ever matched.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Replace.Text">
            <summary>
            On input, specifies the source text on which the replace should be performed.
            On output, gives the results of the replacement.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Replace.What">
            <summary>
            Gets or sets the matching pattern.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Replace.With">
            <summary>
            Gets or sets the replacement string.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.ReplaceText">
            <summary>
            Replaces text in the text files against a regexp.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.ReplaceText.ReplaceTextInFile(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Processes a single file.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.ReplaceText.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceText.CaseSensitive">
            <summary>
            Gets or sets whether the search should be case-sensitive.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceText.InputFiles">
            <summary>
            Gets or sets the files to replace text within.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceText.What">
            <summary>
            Gets or sets the matching pattern.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.ReplaceText.With">
            <summary>
            Gets or sets the replacement string.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.Sign">
            <summary>
            Signs the files with Microsoft Authenticode.
            Note: this file calls the SignTool.exe manually instead of using the MSBuild utilities.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Sign.GenerateCommandLineCommands">
            <summary>
            Returns a string value containing the command line arguments to pass directly to the executable file.
            </summary>
            
            <returns>
            A string value containing the command line arguments to pass directly to the executable file.
            </returns>
            
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.Description">
            <summary>
            Specifies an optional description description of the signed content. 
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.DescriptionUri">
            <summary>
            Specifies an optional URL with more information about the signed content. 
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.InputFiles">
            <summary>
            The input files that will be signed by the task.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.KeyFile">
            <summary>
            The file that contains the private keys to use for signing.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.KeyFilePassword">
            <summary>
            Key file password. Optional.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.TimestampingServer">
            <summary>
            Specifies an optional server to timestamp the files being signed.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.Verbose">
            <summary>
            Whether the tool output should be verbose.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign.ToolName">
            <summary>
            Gets the name of the executable file to run.
            </summary>
            
            <returns>
            The name of the executable file to run.
            </returns>
            
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.Sign_SecurityUtilities">
            <summary>
            Signs the files with Microsoft Authenticode.
            Note: this file calls the MSBuild Security Utilities to sign the file, instead of calling SignTool.exe manually.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Sign_SecurityUtilities.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign_SecurityUtilities.InputFiles">
            <summary>
            The input files that will be signed by the task.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign_SecurityUtilities.KeyFile">
            <summary>
            The file that contains the private keys to use for signing.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign_SecurityUtilities.Password">
            <summary>
            An optional password to the key file.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Sign_SecurityUtilities.TimestampingServer">
            <summary>
            Specifies an optional server to timestamp the files being signed.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.StartDevenv">
            <summary>
            Runs the DEVENV application.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.StartDevenv.GetDevenvInstallDir">
            <summary>
            Gets the DEVENV installation folder.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.StartDevenv.GetHiveArgument">
            <summary>
            Gets the devenv command line argument that specifies the hive (with a trailing space). Could be an empty string.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.StartDevenv.GetDevenvExecutableName">
            <summary>
            Picks the name from attrs, or uses the default.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.StartDevenv.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StartDevenv.Arguments">
            <summary>
            Gets or sets the command-line arguments for the DEVENV application.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StartDevenv.Async">
            <summary>
            Gets or sets whether the operation should be performed asynchronously.
            If sync, we wait for Devenv to finish. Otherwise, we do not.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StartDevenv.DevenvExecutableName">
            <summary>
            Gets or sets the name of the executable to run.
            It may differ for the development Visual Studio.
            Optional.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.StringFormat">
            <summary>
            Invokes the <see cref="M:System.String.Format(System.String,System.Object[])"/> function for the given arguments.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.StringFormat.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StringFormat.Arguments">
            <summary>
            Gets or sets the list of arguments to use in formatting.
            If you need to specify number-specific etc formatting, use <see cref="P:JetBrains.Build.Common.Tasks.StringFormat.ArgumentTypes"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StringFormat.ArgumentTypes">
            <summary>
            If specified, a collection of CLR type names of the <see cref="P:JetBrains.Build.Common.Tasks.StringFormat.Arguments"/>.
            The length of the argument types collection must be equal to the number of <see cref="P:JetBrains.Build.Common.Tasks.StringFormat.Arguments"/>.
            The CLR type names are case-insensitive full names of types from <c>mscorlib</c>, or assembly-qualified names in case of other assemblies.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StringFormat.CultureInfo">
            <summary>
            Specifies the culture info for the formatting, if applicable.
            By default, that's <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StringFormat.Format">
            <summary>
            Gets or sets the format string.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.StringFormat.Result">
            <summary>
            Gets the resulting formatted string.
            </summary>
        </member>
        <member name="T:JetBrains.Build.Common.Tasks.Xlat">
            <summary>
            Translates an input string into the output string against the table.
            </summary>
        </member>
        <member name="M:JetBrains.Build.Common.Tasks.Xlat.ExecuteTask">
            <summary>
            The method to be overriden in inheriting tasks.
            Throw an exception in case of an errror.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Xlat.Input">
            <summary>
            The input string to be translated.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Xlat.Result">
            <summary>
            The translation result.
            </summary>
        </member>
        <member name="P:JetBrains.Build.Common.Tasks.Xlat.Table">
            <summary>
            The translation table.
            The “Input” and “Output” metadata of each item define the translation, the item spec is ignored.
            </summary>
        </member>
    </members>
</doc>
