<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Psi.Web</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirective}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirective))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiWebThemedIcons.AspDirective.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiWebThemedIcons.AspDirective), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirective&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirective">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspDirective Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirective.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirective}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirective))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirective.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirective&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirective.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspDirective Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirective"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirective}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirective))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirective.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirective&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirectiveAttribute">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspDirectiveAttribute Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirectiveAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirectiveAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirectiveAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirectiveAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspDirectiveAttribute Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspDirectiveAttribute"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirectiveAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirectiveAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirectiveAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirectiveAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspHtmlTagAttributeValue Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspHtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspHtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspHtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspHtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspHtmlTagAttributeValue Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Web.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspHtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspHtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspHtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspHtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.RebuildWebsite">
            <summary>
            Builds website async (sync in tests)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.GeneratedFilesDirectory">
            <summary>
            Directory, to which generated files are copied after build
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.GeneratedFilesChanged">
            <summary>
            Signal is fired when new files are created
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.BeforeBuildStarted">
            <summary>
            Called before build started to perform clean-up of cached values
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsPrimaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            Checks whether file in question is a source of some generated data (i.e. file for custom build provider)
            Called while collecting files.
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns>True if the file produces content.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSupplementaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            Checks whether file in question is necessary to compile primary files.
            Called while collecting files.
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns>True if the file matches.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSignificantFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            If the change in a file requires website to be rebuilt, the file is significant. 
            Normally, it returns <see cref="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsPrimaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)"/> or <see cref="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSupplementaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)"/>
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.OnBuildFinished(System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Int64},System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Int64},JetBrains.ReSharper.Psi.Web.BuildProviders.WebsiteBuildResult,JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath)">
            <summary>
            Called when build succeded to process content.
            </summary>
            <param name="primaryFiles">Primary files with their timestamps</param>
            <param name="supplementaryFiles">Supplementary files with their timestamps</param>
            <param name="buildResult">Build result</param>
            <param name="targetPath">Path of the website being built</param>
            <param name="outputPath">Path to compiled output</param>
            <param name="tempDirPath">Path to debug files produced while build</param>
            <returns>Map of generated files to be copied to a folder relative to root.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.Project">
            <summary>
            Project being built
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.LogName">
            <summary>
            Logger string to identify build trace
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppModuleReferencer">
            <remarks>Temporary solution for RSRP-375600</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper.OnProjectFileAdded(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper})">
            <summary>
            Creates/ updates psi source files if knows what to do with incoming file
            </summary>
            <returns>True if and only if file is processed. False otherwise</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper.Priority">
            <summary>
            The higher the priority, the sooner the helper is asked to process files.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppCommonReferenceProviderFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.IWebAppCommonReferenceProviderFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppPsiModuleHandlerHelperFactoryAttribute">
            <summary>
            Attribute for <see cref="!:IWebsitePsiModuleHandlerHelperFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.WebsiteCommonReferenceProviderFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.IWebsiteCommonReferenceProviderFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.WebsitePsiModuleHandlerHelperFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.IWebsitePsiModuleHandlerHelperFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.Properties.IWebsiteAppCodePsiSourceFilePropertiesFactory">
            <summary>
            ProjectFile language-dependent component
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Impl.WebConfig.PsiModules.Website.Modules.IWebConfigModule.GetCommonReferences">
            <summary>
            Common assembly references defined by current web.config and all above
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.WebConfig.Tree.IAddCodeSubDirectoryTag.DirectoryName">
            <summary>
            Relative to the \App_Code or staring with /
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.ITagName.GetDeclaration">
            <summary>
            Returns declaration from which the TagName is built
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.ITagPrefix.GetDeclaration">
            <summary>
            Returns declaration from which the TagPrefix is built
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.PsiModules.IWebProjectFileClassifier">
            <summary>
            ProjectFileType-specific 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.TagPrefixCache.GetSourceFiles(System.String)">
            <summary>
            Returns project files, that may contain holders if tagPrefix declarations
            </summary>
            <param name="tagPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.TagPrefixCache.GetGlobalTagPrefixes(JetBrains.ProjectModel.IModule,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            Tagprefixes for a module, that are defined in framework's web.config or sharepoint's web.config
            </summary>
            <param name="module"></param>
            <param name="resolveContext"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttribute.AttributeNameEqualsTo(System.String)">
            <summary>
            Fast check for AttributeName to reduce memory traffic
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttributeContainer`1.AddAttributeBefore(`0,`0)">
            <summary>
            Adds attribute before the anchor. If anchor == null, the attribute is inserted after the last attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttributeContainer`1.AddAttributeAfter(`0,`0)">
            <summary>
            Adds attribute after the anchor. If anchor == null, the attribute is inserted before the first attribute
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Tree.IWebCodeBlock">
            <summary>
            C# or VB code block or expression inside web page (ASP or Razor)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.ReferencedAssembliesServiceEx.IsProjectReferencingMvc(JetBrains.ProjectModel.IProjectElement,System.Version@)">
            <summary>Is project referencing MVC assembly?</summary>
            <param name="projectElement"></param>
            <param name="version">Version of MVC, if referenced</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.ReferencedAssembliesServiceEx.IsProjectReferencingMvc3(JetBrains.ProjectModel.IProjectElement)">
            <summary>
            Is project referencing MVC assembly version >= 3
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil">
            <summary>
            Code behind (target language of asp generator) language util.
            Note: works with CS and VB but not with JS and other secondary languages.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageViaPsiFast(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language via generated PSI
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindFileViaPsiFast(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind file via generated PSI
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindProjectFileLanguage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageDefinedInFile(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageDefinedInFile(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.Web.Tree.IWebFileWithCodeBehind)">
            <summary>
            Evaluates code-behind language committed PSIs
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.Web.Tree.IWebTreeNode)">
            <summary>
            Evaluates code-behind language committed PSIs
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.WebPathReferenceUtil.GetVirtualPathInWebsite(JetBrains.ReSharper.Psi.IPathDeclaredElement,JetBrains.ProjectModel.IProject)">
            <returns>Relative virtual path relative to website root or FileSystemPath.Empty if fails </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.WebPathReferenceUtil.GetVirtualPathInWebsite(JetBrains.ProjectModel.IProjectItem)">
            <returns>Relative virtual path relative to website root or FileSystemPath.Empty if fails</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetRelevantHolders(JetBrains.ReSharper.Psi.Tree.IFile)">
            <summary>
            Finds all relevant tagPrefix/Name holder.
            The latter items in the enumerable take precedence over the previous ones
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetRelevantHoldersBeforeFile(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.Util.FileSystemPath)">
            <summary>
            Finds all relevant tagPrefix/Name holder in all files except current.
            The latter items in the enumerable take precedence over the previous ones
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetHoldersInFile(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.Util.FileSystemPath)">
            <summary>
            Finds all holder within file specified
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.WebExtensions.IsHtmlPage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Is html or inherited page except ASP
            </summary>
            <param name="psiSourceFile"></param>
            <returns></returns>
        </member>
    </members>
</doc>
