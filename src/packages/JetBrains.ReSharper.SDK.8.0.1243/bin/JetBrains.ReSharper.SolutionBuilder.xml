<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.SolutionBuilder</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildError}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildError))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = SolutionBuilderCompilerThemedIcons.BuildError.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(SolutionBuilderCompilerThemedIcons.BuildError), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildError&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildError">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildError Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildError.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildError}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildError))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildError.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildError&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildError.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildError Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildError"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildError}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildError))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildError.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildError&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildSolution">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildSolution Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildSolution.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildSolution}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildSolution))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildSolution.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildSolution&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildSolution.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildSolution Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildSolution"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildSolution}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildSolution))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildSolution.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildSolution&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildWarning">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildWarning Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildWarning.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildWarning.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildWarning Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.BuildWarning"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+BuildWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.BuildWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.BuildWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.BuildWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CancelBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CancelBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CancelBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+CancelBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.CancelBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.CancelBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.CancelBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CancelBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CancelBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CancelBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+CancelBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.CancelBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.CancelBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.CancelBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CleanProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CleanProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CleanProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+CleanProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.CleanProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.CleanProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.CleanProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CleanProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CleanProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.CleanProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+CleanProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.CleanProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.CleanProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.CleanProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ClearSolution">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ClearSolution Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ClearSolution.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+ClearSolution}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.ClearSolution))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.ClearSolution.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.ClearSolution&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ClearSolution.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ClearSolution Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ClearSolution"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+ClearSolution}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.ClearSolution))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.ClearSolution.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.ClearSolution&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedBuildErrors">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FinishedBuildErrors Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedBuildErrors.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedBuildErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedBuildErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedBuildErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedBuildErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedBuildErrors.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FinishedBuildErrors Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedBuildErrors"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedBuildErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedBuildErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedBuildErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedBuildErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedOK">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FinishedOK Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedOK.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedOK}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedOK))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedOK.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedOK&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedOK.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FinishedOK Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedOK"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedOK}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedOK))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedOK.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedOK&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedUpToDate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FinishedUpToDate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedUpToDate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedUpToDate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedUpToDate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedUpToDate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedUpToDate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedUpToDate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FinishedUpToDate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedUpToDate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedUpToDate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedUpToDate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedUpToDate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedUpToDate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedWarnings">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FinishedWarnings Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedWarnings.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedWarnings.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FinishedWarnings Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.FinishedWarnings"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+FinishedWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.FinishedWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.FinishedWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.FinishedWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressErrors">
             <summary>
              <para>
                <para>Autogenerated identifier class for the InProgressErrors Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressErrors.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+InProgressErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.InProgressErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.InProgressErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.InProgressErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressErrors.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the InProgressErrors Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressErrors"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+InProgressErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.InProgressErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.InProgressErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.InProgressErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressOK">
             <summary>
              <para>
                <para>Autogenerated identifier class for the InProgressOK Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressOK.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+InProgressOK}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.InProgressOK))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.InProgressOK.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.InProgressOK&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressOK.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the InProgressOK Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressOK"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+InProgressOK}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.InProgressOK))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.InProgressOK.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.InProgressOK&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressWarnings">
             <summary>
              <para>
                <para>Autogenerated identifier class for the InProgressWarnings Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressWarnings.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+InProgressWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.InProgressWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.InProgressWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.InProgressWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressWarnings.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the InProgressWarnings Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.InProgressWarnings"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+InProgressWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.InProgressWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.InProgressWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.InProgressWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.Output">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Output Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.Output.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+Output}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.Output))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.Output.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.Output&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.Output.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Output Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.Output"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+Output}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.Output))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.Output.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.Output&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RebuildProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+RebuildProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.RebuildProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.RebuildProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.RebuildProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RebuildProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+RebuildProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.RebuildProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.RebuildProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.RebuildProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildSolution">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RebuildSolution Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildSolution.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+RebuildSolution}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.RebuildSolution))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.RebuildSolution.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.RebuildSolution&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildSolution.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RebuildSolution Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.RebuildSolution"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+RebuildSolution}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.RebuildSolution))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.RebuildSolution.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.RebuildSolution&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewOutput">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ViewOutput Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewOutput.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+ViewOutput}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.ViewOutput))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.ViewOutput.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.ViewOutput&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewOutput.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ViewOutput Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewOutput"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+ViewOutput}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.ViewOutput))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.ViewOutput.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.ViewOutput&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewSource">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ViewSource Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewSource.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+ViewSource}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.ViewSource))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.ViewSource.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.ViewSource&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewSource.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ViewSource Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons.ViewSource"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.Resources.SolutionBuilderCompilerThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderCompilerThemedIcons+ViewSource}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderCompilerThemedIcons.ViewSource))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderCompilerThemedIcons.ViewSource.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderCompilerThemedIcons.ViewSource&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.CollectedFiles">
            <summary>
            Stores the items collected by an <see cref="T:JetBrains.ReSharper.SolutionBuilder.IFilesCollector"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.CollectedFiles.AllFiles">
            <summary>
            All the files included in the project.
            </summary>
        </member>
        <member name="T:JetBrains.ComponentModel.GetInstance`2">
            <summary>
            A class that implements the indexed <c>Instance</c> property.
            Could be used for getting parameterized instances of components. For example, an instance of a Solution component is parameterized by solution.
            </summary>
            <typeparam name="TInstance">Type of the instance that will be returned from the property.</typeparam>
            <typeparam name="TParameter">A parameter of the property.</typeparam>
        </member>
        <member name="M:JetBrains.ComponentModel.GetInstance`2.#ctor(System.Func{`1,`0})">
            <summary>
            Wraps the <paramref name="funcGetter"/> implementation.
            </summary>
        </member>
        <member name="P:JetBrains.ComponentModel.GetInstance`2.Item(`1)">
            <summary>
            Gets the parameterized instance.
            If the instance is not available, an exception is thrown.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The parameterized instance.</returns>
        </member>
        <member name="T:JetBrains.ComponentModel.TryGetInstance`2">
            <summary>
            A class that implements the indexed <c>Instance</c> property.
            Could be used for getting parameterized instances of components. For example, an instance of a Solution component is parameterized by solution.
            </summary>
            <typeparam name="TInstance">Type of the instance that will be returned from the property.</typeparam>
            <typeparam name="TParameter">A parameter of the property.</typeparam>
        </member>
        <member name="M:JetBrains.ComponentModel.TryGetInstance`2.#ctor(System.Func{`1,`0})">
            <summary>
            Wraps the <paramref name="funcGetter"/> implementation.
            </summary>
        </member>
        <member name="P:JetBrains.ComponentModel.TryGetInstance`2.Item(`1)">
            <summary>
            Gets the parameterized instance.
            If the instance is not available, <c>Null</c> is returned.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The parameterized instance.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.BuildOutputDisplay.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.BuildResultsControl.DumpLogs">
            <summary>
            Dumps the collected build output and logs to the appropriate pages in an instant.
            Must be invoked on the UI thread.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree">
            <summary>
            The control for build output
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree.NodeWithErrors">
            <summary>
            Nodes data
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree.NodeWithErrors.ourBoldStyle">
            <summary>
            bold font
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree.NodeWithErrors.myBuildFinished">
            <summary>
            Is build process finished
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree.NodeWithErrors.myName">
            <summary>
            Name of the node
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree.NodeWithErrors.myNErrors">
            <summary>
            Current number of errors and warnings
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree.NodeWithErrors.myNWarnings">
            <summary>
            Current number of errors and warnings
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.BuildResultsTree.NodeWithErrors.Type">
            <summary>
            Solution or Project
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompiler">
            <summary>
            Public facade for the MSBuild Compiler component.
            The implementation should be internal-only.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompiler.Instance">
            <summary>
            Gets the per-solution cached builder.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompiler.TryInstance">
            <summary>
            Gets the per-solution cached builder.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompiler.IMSBuildCompilerImpl">
            <summary>
            An interface for the internal-only implementation.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompiler.IMSBuildCompilerImpl.OutputLine">
            <summary>
            Fires when the compiler sends a line to the output.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Impl.ProjectInfo">
            <summary>
            Project information
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.CompiledResourceInfo.Equals(JetBrains.ReSharper.SolutionBuilder.Impl.CompiledResourceInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.CompiledResourceInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.BuildFileUtil.DeleteFile(JetBrains.Util.FileSystemPath)">
            <summary>
            delete 
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.BuildFileUtil.DeleteFile(JetBrains.Util.FileSystemPath,System.Boolean,System.Boolean)">
            <summary>
            selete file 
            </summary>
            <param name="file"></param>
            <param name="force">delete all if true</param>
            <param name="justLocked">delete just locked file if true</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.BuildFileUtil.DeleteFile(JetBrains.Util.FileSystemPath,System.Boolean)">
            <summary>
            selete file 
            </summary>
            <param name="file"></param>
            <param name="force">delete all if true</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.BuildFileUtil.RemoveShadowFiles(JetBrains.Util.FileSystemPath)">
            <summary>
            used to remove shafow files created in DeleteFile function
            </summary>
            <param name="file"></param>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Impl.ProjectSignature.myCollectedFiles">
            <summary>
            Collected by file collector.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.ProjectSignature.CollectedFiles">
            <summary>
            Collected by file collector.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession">
            <summary>
            The data object for the Solution Builder build session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.BuildEventsNonProject">
            <summary>
            Build events for the session (errors, warnings, console output, and status messages from the engine) that do not fall into any of the projects.
            The success/failure state of the whole build session is derived from presense of any errors messages in these events and the events of all the projects.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.BuildSeverity">
            <summary>
            How severe should the rebuild be.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.Dispatcher">
            <summary>
            Identifies the main thread. All of the non-constant access should occur on this thread.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.Projects">
            <summary>
            The list of projects known to this session, in various build states. Initially empty, filled with project when the build gets <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionState.Running"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.State">
            <summary>
            Build session state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.#ctor(JetBrains.Util.FileSystemPath,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.Util.FileSystemPath[],System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="solutionfile">URI of the solution file to be built.</param>
            <param name="severity">How severe should the build be.</param>
            <param name="pathProjectsMustBeBuilt">The projects that must be built (when we build up to them, we might stop). Empty to build the full set of projects.</param>
            <param name="sConfigurationName">Name of the solution configuration. Project configurations are taken from the configuration manager that maps solution-wide configs to per-project configs.</param>
            <param name="sPlatformName">Name of the solution platform. Project platforms are taken from the configuration manager that maps solution-wide platforms to per-project platforms.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionErrorStatus">
            <summary>
            Whether the build session has errors, warnings, etc, or not.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionErrorStatus.Clean">
            <summary>
            No errors, no warnings.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionErrorStatus.Warnings">
            <summary>
            The project has some warnings (but no errors).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionErrorStatus.Errors">
            <summary>
            The project has some errors (maybe also warnings).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.CreateBuildEventsAddRemove(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.DataFlow.Lifetime)">
            <summary>
            A composite signal that fires whenever a build event is added to session events or to any of the projects in the session.
            A new instance is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.CreateProjectErrorStatus(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a property that accumulates the project error status from the project's build events.
            A new property and new event watcher is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.CreateProjectFullPathCache(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Creates a cache for getting the build setting project by its full path (cache throws if the element is missing).
            Note: every time you call this method, a NEW cache is created, whose lifetime is as long as <paramref name="session"/>'s.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.CreateProjectFullPathCache2(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a cache for getting the build setting project by its full path.
            The cache is live, ie when new projects are added to the session, they also get into the cache.
            Note: every time you call this method, a NEW cache is created, whose lifetime is as long as <paramref name="session"/>'s. Dispose of the cache to break the connection.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.CreateSessionErrorStatus(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a property that accumulates the project error status from the project's build events.
            A new property and new event watcher is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.GetAllBuildEvents(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Gets all of the build events for the current build session, which includes the project-related events for all of the projects and non-project build events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.IsSuccessful(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject)">
            <summary>
            Tells if the project had no compilation errors.
            Looks up its <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.BuildEvents"/> for those of the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind.Error"/> kind.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionEx.IsSuccessful(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Tells if the session had no compilation errors.
            Looks up its <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession.BuildEventsNonProject"/> and <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.BuildEvents"/> of all of the projects for those of the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind.Error"/> kind.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject">
            <summary>
            Represents a single project in the build process.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.BuildEvents">
            <summary>
            Build events for the current project (errors, warnings, console output, and status messages from the engine).
            The success/failure state of the project is derived from presense of any errors messages in the events.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.BuildState">
            <summary>
            State of the project within the current build process.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.FullPath">
            <summary>
            <para>The identity of the project, usually, a path to the project file.</para>
            <para>You MUST NOT assume that this is the project file, or if it is a file at all.</para>
            <para>To transition between the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.FullPath"/> and the corresponding <see cref="T:JetBrains.ProjectModel.IProject"/>, if any, use the <see cref="M:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.GetProjectFullPath(JetBrains.ProjectModel.IProject)"/> and <see cref="M:JetBrains.ProjectModel.ProjectUtil.GetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.FileSystemPath)"/> functions.</para>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject.Name">
            <summary>
            Gets the short name of the project.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState">
            <summary>
            Build state for a project in the build session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Excluded">
            <summary>
            Will not be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Pending">
            <summary>
            Will be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Running">
            <summary>
            Is currently being built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState.Completed">
            <summary>
            Has been built (or skipped due to being up-to-date, see error status).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus">
            <summary>
            Whether the project has errors, warnings, etc, or not.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus.Clean">
            <summary>
            No errors, no warnings.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus.Warnings">
            <summary>
            The project has some warnings (but no errors).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus.Errors">
            <summary>
            The project has some errors (maybe also warnings).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity">
            <summary>
            How severe should the rebuild be.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity.Clean">
            <summary>
            All of the projects should be cleaned up.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity.Rebuild">
            <summary>
            All of the projects should be rebuilt (cleaned up and built).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity.Build">
            <summary>
            Only those project whose inputs were modified in respect to their outputs should be built. This represents the classical build algorithm.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionState">
            <summary>
            Possible build session states.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionState.Waiting">
            <summary>
            The session has just been created and is waiting for someone to run its build (which is not guaranteed to happen).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionState.Running">
            <summary>
            The build is currently running.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionState.Completed">
            <summary>
            The build has completed, either successfully or with errors.
            <see cref="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession"/> is <c>1</c>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent">
            <summary>
            A build event that occured while building of the project.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventImportance">
            <summary>
            The importance of a build event. Originates from the MSBuild importance enum.
            Linear order: the lower the value, the more important is the event.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind">
            <summary>
            Kinds of events logged when building projects or the session itself.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind.Output">
            <summary>
            Messages logged with MSBuild logger. These do not include console output (eg from external tools). Could be of various importance.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind.Service">
            <summary>
            Service messages from the engine: projects, targets, tasks. Usually have low importance.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind.Console">
            <summary>
            Raw console output (StdOut stream) of the MSBuild process. Any fatal failures with running the MSBuild process would also go here.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind.Warning">
            <summary>
            A warning logged with MSBuild logger. MSBuild tasks also would usually capture cmdline tool console output that qualifies against the warning pattern and report to the logger.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventKind.Error">
            <summary>
            A warning logged with MSBuild logger. MSBuild tasks also would usually capture cmdline tool console output that qualifies against the warning pattern and report to the logger.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEventWithLocation">
            <summary>
            A build event, plus file-line-column info.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.EmptySolutionBuilder">
            <summary>
            A stub so that the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.Implementations"/> always had at least one item to have its <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.ActiveImplementation"/> non-<c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder">
            <summary>
            The base interface for manipulating a solution builder.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.BeginRun(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.EmptySolutionBuilder.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.EmptySolutionBuilder.BeginRun(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.EmptySolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.EmptySolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.Implementations">
            <summary>
            Lists the available Solution Builder implementations, of which the one with the highest priority is the <see cref="F:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.ActiveImplementation"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.GetProjectFullPath(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets the SolBuilder-suitable full path identity of the project.
            Preferrably, the project file; otherwise, the project folder.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.IsProject(JetBrains.ProjectModel.IProject)">
            <summary>
            <para>Gets whether this <see cref="T:JetBrains.ProjectModel.IProject"/> is a valid project from SolBuilder's point of view.</para>
            <para>The Project Model contains a number of projects that would not map to any real projects in Visual Studio, but rather to solution folders and various other stuff.</para>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.InitImplementations(JetBrains.DataFlow.Lifetime)">
            <summary>
            List of impls => active.
            Active impls coming and going.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.BeginRun(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.SolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
    </members>
</doc>
