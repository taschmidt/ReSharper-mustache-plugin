<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.I18n.Services</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+BaseCulture}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.BaseCulture))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = Services118nThemedIcons.BaseCulture.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(Services118nThemedIcons.BaseCulture), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;Services118nThemedIcons.BaseCulture&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.BaseCulture">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BaseCulture Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.BaseCulture.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+BaseCulture}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.BaseCulture))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.BaseCulture.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.BaseCulture&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.BaseCulture.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BaseCulture Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.BaseCulture"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+BaseCulture}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.BaseCulture))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.BaseCulture.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.BaseCulture&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.Localization">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Localization Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.Localization.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+Localization}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.Localization))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.Localization.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.Localization&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.Localization.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Localization Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.Localization"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+Localization}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.Localization))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.Localization.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.Localization&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificAndBaseCulture">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SpecificAndBaseCulture Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificAndBaseCulture.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+SpecificAndBaseCulture}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.SpecificAndBaseCulture))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.SpecificAndBaseCulture.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.SpecificAndBaseCulture&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificAndBaseCulture.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SpecificAndBaseCulture Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificAndBaseCulture"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+SpecificAndBaseCulture}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.SpecificAndBaseCulture))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.SpecificAndBaseCulture.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.SpecificAndBaseCulture&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificCulture">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SpecificCulture Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificCulture.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+SpecificCulture}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.SpecificCulture))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.SpecificCulture.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.SpecificCulture&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificCulture.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SpecificCulture Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons.SpecificCulture"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.I18n.Services.Resources.Services118nThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:Services118nThemedIcons+SpecificCulture}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(Services118nThemedIcons.SpecificCulture))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = Services118nThemedIcons.SpecificCulture.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;Services118nThemedIcons.SpecificCulture&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.Refactoring.IResourceInliner.Priority">
            <summary>
            Inliner with the biggest value will be first.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.LocalizableInspector.Optimistic">
            <summary>
            Analyze only localizable elements
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.LocalizableInspector.Pessimistic">
            <summary>
            Analyze all possible elements
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resx.Utils.ResourceCultureEx.GetNameWithoutCulture(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Get name without culture for the specified <paramref name="projectFile"/>.
            </summary>
            <param name="projectFile">resource file.</param>
            <returns>resource name, e.g. for 'SR.ru-ru.resx' returns 'SR'.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resx.Utils.ResourceCultureEx.IsDefaultCulture(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Checks if <paramref name="projectFile"/> is resx file for the default culture.
            </summary>
            <param name="projectFile">resx project file</param>
            <returns><c>true</c> - is default culture; otherwise - <c>false</c></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resx.Utils.ResourceCultureEx.GetCultureName(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Gets the name of the culture.
            </summary>
            <returns><c>String.Empty</c> for default culture</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resx.Utils.ResourceCultureEx.GetCultureName(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Gets the name of the culture.
            </summary>
            <returns><c>String.Empty</c> for default culture</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ResxFileUtil.VerifyResourceFileName(System.String)">
            <summary>
            Get verified resource name for the specified <paramref name="fileName"/>.
            </summary>
            <param name="fileName">resource file.</param>
            <returns>resource name, e.g. for 'SR.ru-ru.resx' returns 'SR'.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ResxFileUtil.IsDefaultCulture(System.String)">
            <summary>
            Checks if <paramref name="fileName"/> is default culture.
            </summary>
            <param name="fileName">resx file name</param>
            <returns><c>true</c> - is default culture; otherwise - <c>false</c></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ResxFileUtil.GetCultureName(System.String)">
            <summary>
            Gets the name of the culture.
            </summary>
            <returns><c>String.Empty</c> for default culture</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Refactoring.RefactoringPageBase.Initialize(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Initializes page. Called before each show of the page which is caused by "Continue" button.
            </summary>
            <param name="progressIndicator"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Refactoring.RefactoringPageBase.RefreshContents(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Refreshes internal page pointers. Returns
            <c>false</c> if refresh is unsuccessfull and refactoring should be canceled.
            </summary>
            <param name="progressIndicator"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Refactoring.RefactoringPageBase.Commit(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Commits page
            </summary>
            <param name="progressIndicator"></param>
            <returns>Next page if any</returns>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.UI.Refactoring.RefactoringPageBase.Title">
            <summary>
            Gets page title
            </summary>
            <value></value>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.UI.Refactoring.RefactoringPageBase.Description">
            <summary>
            Gets page description
            </summary>
            <value></value>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.UI.Refactoring.RefactoringPageBase.View">
            <summary>
            Gets UI control
            </summary>
            <value></value>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.UI.Refactoring.RefactoringPageBase.ContinueEnabled">
            <summary>
            Gets flag indicating whether the Continue button is enabled
            </summary>
            <value></value>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Refactoring.MoveToResourceSecondPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.MoveToResourceSecondPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.MoveToResourceSecondPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateByValue(JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Object)">
            <summary>
            Create literal expression for the specified <paramref name="value"/>.
            </summary>
            <param name="element">PSI module.</param>
            <param name="value">literal value.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateByValue(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.ConstantValue)">
            <summary>
            Create literal expression for the specified <paramref name="value"/>.
            </summary>
            <param name="element">PSI module.</param>
            <param name="value">literal value.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateExpression(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Create expression for the specified <paramref name="element"/>.
            </summary>
            <param name="element">PSI module</param>
            <param name="declaredElement">declared element.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateExpression(JetBrains.ReSharper.Psi.Tree.ITreeNode,System.String,System.Object[])">
            <summary>
            Create expression by <paramref name="format"/> and optional <paramref name="args"/>.
            </summary>
            <param name="element">PSI module.</param>
            <param name="format">Format string is specified with $0, $1, ... as placeholders for arguments</param>
            <param name="args">arguments for placeholders</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateByValue(JetBrains.ReSharper.Psi.IClrDeclaredElement,System.Object)">
            <summary>
            Create literal expression for the specified <paramref name="value"/>.
            </summary>
            <param name="element">PSI module.</param>
            <param name="value">literal value.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateByValue(JetBrains.ReSharper.Psi.IClrDeclaredElement,JetBrains.ReSharper.Psi.ConstantValue)">
            <summary>
            Create literal expression for the specified <paramref name="value"/>.
            </summary>
            <param name="element">PSI module.</param>
            <param name="value">literal value.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateExpression(JetBrains.ReSharper.Psi.IClrDeclaredElement,JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Create expression for the specified <paramref name="element"/>.
            </summary>
            <param name="element">PSI module</param>
            <param name="declaredElement">declared element.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactory.CreateExpression(JetBrains.ReSharper.Psi.IClrDeclaredElement,System.String,System.Object[])">
            <summary>
            Create expression by <paramref name="format"/> and optional <paramref name="args"/>.
            </summary>
            <param name="element">PSI module.</param>
            <param name="format">Format string is specified with $0, $1, ... as placeholders for arguments</param>
            <param name="args">arguments for placeholders</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactoryService.Get(JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Gets instance of <see cref="T:JetBrains.ReSharper.I18n.Services.ElementFactoryService"/> for the specified <paramref name="language"/>.
            </summary>
            <param name="language">factory language.</param>
            <returns>instance of <see cref="T:JetBrains.ReSharper.I18n.Services.ElementFactoryService"/></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactoryService.CreateByValue(JetBrains.ReSharper.Psi.ConstantValue)">
            <summary>
            Create literal expression for the specified <paramref name="value"/>.
            </summary>
            <param name="value">literal value.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactoryService.CreateExpression(JetBrains.ReSharper.Psi.Modules.IPsiModule,JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Create expression for the specified <paramref name="declaredElement"/>.
            </summary>
            <param name="module">psi module</param>
            <param name="declaredElement">declared element.</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.ElementFactoryService.CreateExpression(JetBrains.ReSharper.Psi.Modules.IPsiModule,System.String,System.Object[])">
            <summary>
            Create expression by <paramref name="format"/> and optional <paramref name="args"/>.
            </summary>
            <param name="module">PSI module.</param>
            <param name="format">Format string is specified with $0, $1, ... as placeholders for arguments</param>
            <param name="args">arguments for placeholders</param>
            <returns>if success - instance of <see cref="T:JetBrains.ReSharper.Psi.Tree.IExpression"/>; otherwise - <c>null</c>.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.PsiService.GetInstance(JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.PsiService.GetInstance(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Gets the instance.
            </summary>
            <param name="element">The declared element.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.PsiService.GetArgumentValue(JetBrains.ReSharper.Psi.Tree.IArgument)">
            <summary>
            Gets the argument value.
            </summary>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.PsiService.LanguageType">
            <summary>
            Gets the type of the language.
            </summary>
            <value>The type of the language.</value>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Refactoring.AvailableResourcesRefactoringPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.AvailableResourcesRefactoringPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.AvailableResourcesRefactoringPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.MoveToResourceDrivenWorkflow.PreExecute(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
             Performs pre-execute steps
             </summary>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Refactoring.MoveToResourceFirstPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.MoveToResourceFirstPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.MoveToResourceFirstPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Refactoring.InlineResourceFirstPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.InlineResourceFirstPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.InlineResourceFirstPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Refactoring.MoveResourceFirstPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.MoveResourceFirstPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.MoveResourceFirstPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.Refactoring.RenameResourceFirstPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.RenameResourceFirstPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.Refactoring.RenameResourceFirstPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Resx.SolutionResourceManager.GetAvailableResources(JetBrains.ProjectModel.IProject,System.Predicate{JetBrains.ReSharper.Psi.IPsiSourceFile})">
            <summary>
            Gets available resources for secified <paramref name="project"/> with <paramref name="filter"/>.
            </summary>
            <param name="project">find available resource files for this project.</param>
            <param name="filter">filter resource files result set.</param>
            <returns>resources file set</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.StringUtil.TrimToLength(System.String)">
            <summary>
            Trims text to 40 chars
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.#ctor(System.String,JetBrains.UI.Application.IUIApplication,JetBrains.ReSharper.Daemon.Daemon)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="environment"></param>
            <param name="daemon"></param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.JetBrains#UI#Options#IOptionsPage#ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed
            </summary>
            <returns><c>true</c> if page data is consistent</returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus
            will be put into this page
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.InitializeUI">
            <summary>
            Initializes the UI.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.Activated(System.Boolean)">
            <summary>
            Activateds the specified activated.
            </summary>
            <param name="activated">if set to <c>true</c> [activated].</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.OnValidatePage">
            <summary>
            Called when [validate page].
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.PressOk">
            <summary>
            Presses the ok.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.RefreshHighlightings">
            <summary>
            Refreshes the highlightings.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.JetBrains#UI#Options#IOptionsPage#Control">
            <summary>
            Control to be shown as page
            </summary>
            <value></value>
        </member>
        <member name="P:JetBrains.ReSharper.I18n.Services.UI.Options.OptionPageBase.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
            <value></value>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.UI.Options.LocalizationOptionPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.LocalizationOptionPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.Options.LocalizationOptionPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.I18n.Services.UI.ResourceInplaceEditor.ResourceEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.ResourceInplaceEditor.ResourceEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.I18n.Services.UI.ResourceInplaceEditor.ResourceEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
