<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ReSharper.TextControl</name>
    </assembly>
    <members>
        <member name="T:JetBrains.TextControl.Actions.TextControlActions">
            <summary>
            TODO: review, try to make a common model of VS typing handling and text control impl actions.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeError}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeError))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ErrorStripeThemedIcons.ErrorStripeError.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ErrorStripeThemedIcons.ErrorStripeError), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeError&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeError">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ErrorStripeError Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeError.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeError}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeError))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeError.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeError&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeError.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ErrorStripeError Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeError"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeError}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeError))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeError.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeError&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeInvalid">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ErrorStripeInvalid Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeInvalid.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeInvalid}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeInvalid))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeInvalid.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeInvalid&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeInvalid.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ErrorStripeInvalid Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeInvalid"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeInvalid}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeInvalid))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeInvalid.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeInvalid&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOff">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ErrorStripeOff Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOff.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeOff}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeOff))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeOff.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeOff&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOff.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ErrorStripeOff Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOff"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeOff}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeOff))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeOff.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeOff&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOK">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ErrorStripeOK Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOK.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeOK}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeOK))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeOK.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeOK&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOK.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ErrorStripeOK Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeOK"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeOK}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeOK))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeOK.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeOK&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeRunning">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ErrorStripeRunning Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeRunning.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeRunning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeRunning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeRunning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeRunning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeRunning.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ErrorStripeRunning Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeRunning"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeRunning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeRunning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeRunning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeRunning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeWarning">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ErrorStripeWarning Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeWarning.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeWarning.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ErrorStripeWarning Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons.ErrorStripeWarning"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.TextControl.Src.BaseImpl.ErrorStripeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ErrorStripeThemedIcons+ErrorStripeWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ErrorStripeThemedIcons.ErrorStripeWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ErrorStripeThemedIcons.ErrorStripeWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ErrorStripeThemedIcons.ErrorStripeWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlCaret">
            <summary>
            Text control caret access.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCaret.MoveTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.CaretVisualPlacement)">
            <summary>
            Attempts to move the caret to the requested position.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlCaret.Position">
            <summary>
            Gets the caret position in all of the possible text control position representation.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlCaret.PositionValue">
            <summary>
            Gets the <see cref="P:JetBrains.TextControl.ITextControlCaret.Position"/> value.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlCaret.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.ITextControlCaret.CaretMoved">
            <summary>
            <see cref="P:JetBrains.TextControl.ITextControlCaret.Position"/> change event. Use <see cref="P:JetBrains.TextControl.ITextControlCaret.Position"/> directly whenever possible.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlCaretBase.MoveToCore(JetBrains.TextControl.Coords.ITextControlPos,System.Boolean)">
            <summary>
            Implements moving the caret. Should not affect scrolling. <see cref="M:JetBrains.TextControl.BaseImpl.TextControlCaretBase.MoveTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.CaretVisualPlacement)"/> method default implementation calls this method for the caret positioning part, then applies the scrolling as needed.
            </summary>
            <param name="position">The new caret position. Not prevalidated.</param>
            <param name="bAdvancedScrollMode">Whether the <see cref="M:JetBrains.TextControl.BaseImpl.TextControlCaretBase.MoveTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.CaretVisualPlacement)"/> call has anything but <see cref="F:JetBrains.TextControl.CaretVisualPlacement.DontScrollIfVisible"/> specified as the visual placement parameter. A <c>False</c> value means the “least intrusive” scenario, which could apply to caret placement too.</param>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlScrolling">
            <summary>
            The scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            <para>Explicitly sets the viewport position in the canvas (extent) coordinates.</para>
            <para>Even though you can pass pixel coodinates to <see cref="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.TextControlScrollType)"/> as well, the difference is that this method does not attempt to adjust the scrolling position for the best visibility of the desired point. The viewport left-top corner is positioned as closely to <paramref name="ptCanvas"/> as possible.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.TextControlScrollType)">
            <summary>
            Scrolls the view to make the <paramref name="position"/> visible in the viewport, placing it based on the <paramref name="scrollType"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlScrolling.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlScrolling.ViewportRange">
            <summary>
            <para>Gets the area that the viewport covers over the extent (the whole imaginary field of the scrollable content whose part is visible in the viewport), in the form of a document or text control range.</para>
            <para>Note that the column number or virtual spaces delta is not applicable to this range because the visible columns set varies with lines. Only lines are taken into account.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlScrolling.ViewportRect">
            <summary>
            Gets the area that the viewport covers over the extent (the whole imaginary field of the scrollable content whose part is visible in the viewport), in canvas pixel coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlScrollingBase.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlScrollingBase.ViewportRange">
            <summary>
            Gets the area that the viewport covers over the extent, in visual coordinates (lines and columns).
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlScrollingBase.ViewportRect">
            <summary>
            Gets the area that the viewport covers over the extent, in canvas coordinates (screen pixels).
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.BaseImpl.TextControlSelectionBase">
            <summary>
            Base common impl.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelection.RemoveSelection(System.Boolean)">
            <summary>
            Clears the selection, making the selection range empty and located at the caret location.
            </summary>
            <param name="bCollapseToAnchor">
            <para>If <c>True</c>, collapses to selection anchor point (<see cref="P:JetBrains.TextControl.ITextControlSelection.Ranges"/>).</para>
            <para>If <c>False</c>, collapses to selection active point (<see cref="P:JetBrains.TextControl.ITextControlSelection.Ranges"/>).</para>
            </param>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelection.SetRanges(JetBrains.TextControl.Coords.TextControlPosRange[])">
            <summary>
            <para>Attempts to set the text control selection to the given range.</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> denotes the anchor end of the selection (the fixed point of shift+arrowkeys selection).</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> is the active end of the selection, ie the caret location.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlSelection.Ranges">
            <summary>
            <para>Gets the selection ranges. There is guaranteed to be at least one selection range.</para>
            <para>If there is no selection, this is a single zero-length range at the caret position.</para>
            <para>If a single continuous range is selected ("stream selection" in VS), there is a single range whose <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> is the anchor end of the selection and <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> is its active end.</para>
            <para>If the selection is not continuous (e.g. "box selection" in VS), there is a set of continuous selection ranges, without any particular order, but the first range in the array begins in the anchor point, and the last range in the array ends in the active point.</para>
            <para>In short, this is the non-empty array of continuous selection ranges where <c>First().Start</c> denotes the anchor end of the selection (the fixed point of shift+arrowkeys selection), and <c>Last().End</c> is the active end of the selection, ie the caret location.</para>
            <para>Note that neither ranges nor range ends are ordered against document offsets.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlSelection.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.ITextControlSelection.SelectionChanged">
            <summary>
            <para>Fires when <see cref="P:JetBrains.TextControl.ITextControlSelection.Ranges"/> changes. Using <see cref="P:JetBrains.TextControl.ITextControlSelection.Ranges"/> directly is preferrable.</para>
            <para>The sender of this event is the <see cref="P:JetBrains.TextControl.ITextControlSelection.TextControl"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlSelectionBase.GetAnchorToActiveSpanForContinuousSelection(JetBrains.TextControl.Coords.TextControlPosRange[])">
            <summary>
            In case the text control does not support applying continuous selection, calculates the minimum spanning range and arranges its ends so that the first point is the anchor and the second is the active one. The anchor and active are determined from the given ranges in the same way as on <see cref="P:JetBrains.TextControl.ITextControlSelection.Ranges"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlSelectionBase.Ranges">
            <summary>
            <para>Gets the selection range.</para>
            <para>The <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> is the anchor end of the selection (ie the end with the caret position).</para>
            <para>Note that the <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> and <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> are not guaranteed to be aligned, ie the end offset might go before the start offset.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlSelectionBase.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.BaseImpl.TextControlWindowBase">
            <summary>
            Base impl for text control windows.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlWindow">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindow.CreateViewportAnchor(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates an anchoring rectangle for the viewport of the text control.
            You must dispose of the value after use.
            Supposedly, creating a new anchor is cheap after you ask it for the first time on this text control. Calling this function for learning the viewport screen coordinates is OK.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindow.Focus">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindow.Show">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.Frame">
            <summary>
            <para>Gets the class that represent the frame that sites the text control. This frame knows whether it's visible on screen, and sometimes it can cause the environment to switch so that the frame became visible.</para>
            <para>In Visual Studio, an example of such frames is an editor tab or a tool window, in which case this implementation is based on the VS Window Frame interface.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.IsFocused">
            <summary>
            <para>Gets whether the window is currently focused.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen">
            <summary>
            <para>Gets whether the window is currently visible onscreen, which tries to take into account not only the visibility flag of the text control window, but also whether the window layout allows the text control contents to be visible onscreen.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
            <remarks>Even though <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> is also available thru the <see cref="P:JetBrains.TextControl.ITextControlWindow.Frame"/>, its value is not synchronized with <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/>. This particular property is guaranteed to be high when the text control has keyboard focus, while the frame only reflects what it knows about the environment. Sometimes they do not agree, because not all of the Visual Studio implementation is accurate in details.</remarks>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.Keyboard">
            <summary>
            Fires when any key (including non-character modifier keys, like Ctrl and Shift) is pressed or released in the text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.MouseDown">
            <summary>
            Fires when a mouse button is pressed in this text control.
            You can cancel event processing by default text control mouse handlers by raising <see cref="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.MouseMove">
            <summary>
            Fires when a mouse cursor is moved over text control (or outside, if mouse is captured).
            You can cancel event processing by default text control mouse handlers by raising <see cref="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.MouseUp">
            <summary>
            Fires when a mouse button is released in this text control.
            You can cancel event processing by default text control mouse handlers by raising <see cref="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlWindow.TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.BaseImpl.TextControlWindowBase.myFrame">
            <summary>
            Owning frame (VS frame when in VS).
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.BaseImpl.TextControlWindowBase.myAnchoringRect">
            <summary>
            Anchor for the whole viewport.
            Lazy-created, then kept until dispose.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.BaseImpl.TextControlWindowBase.myIsFocusedUnguarded">
            <summary>
            Put focus changes in here.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.BaseImpl.TextControlWindowBase.myIsFocusedGuarded">
            <summary>
            Can be changed under a guard only. Flows from <see cref="F:JetBrains.TextControl.BaseImpl.TextControlWindowBase.myIsFocusedUnguarded"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.BaseImpl.TextControlWindowBase.myIsVisibleOrFocusedGuarded">
            <summary>
            Put visibility changes in here.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.#ctor(JetBrains.TextControl.ITextControl,JetBrains.UI.WindowManagement.WindowFrame,JetBrains.UI.Application.IUIApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.BaseImpl.TextControlWindowBase.IsLayoutKnownByUser">
            <summary>
            <para>Gets whether the user is likely to know the visual layout of this text control.</para>
            <para>This means that scrollings and caret movements should better be relative to the current position rather than absolute.</para>
            <para>Formally, it's a bool state that raises some time after the control gets visible, and keeps for some small time after it gets hidden. 
            These delays guarantee that (1) short switches back and forth when eg creating from usage in another text control do not affect the picture 
            and (2) after the fresh new text control is opened for the first time the first positioning is done with layout “unknown”.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.CreateViewportAnchorCore(JetBrains.DataFlow.Lifetime)">
            <summary>
            Should create the anchoring rect core object. Do not use caching, the impl already does it instead of calling the method directly.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.FocusCore">
            <summary>
            Should cause the text control to achieve keyboard focus.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.InitExposeTextControlOnWindowFrame">
            <summary>
            Registers on the window frame.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#CreateViewportAnchor(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates an anchoring rectangle for the viewport of the text control.
            You must dispose of the value after use.
            Supposedly, creating a new anchor is cheap after you ask it for the first time on this text control. Calling this function for learning the viewport screen coordinates is OK.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#Focus">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.BaseImpl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#Show">
            <summary>
            Tries to make <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="P:JetBrains.TextControl.ITextControlWindow.IsVisibleOnScreen"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#Frame">
            <summary>
            <para>Gets the class that represent the frame that sites the text control. This frame knows whether it's visible on screen, and sometimes it can cause the environment to switch so that the frame became visible.</para>
            <para>In Visual Studio, an example of such frames is an editor tab or a tool window, in which case this implementation is based on the VS Window Frame interface.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#IsFocused">
            <summary>
            <para>Gets whether the window is currently focused.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#IsVisibleOnScreen">
            <summary>
            <para>Gets whether the window is currently visible onscreen, which tries to take into account not only the visibility flag of the text control window, but also whether the window layout allows the text control contents to be visible onscreen.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
            <remarks>Even though <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> is also available thru the <see cref="P:JetBrains.TextControl.ITextControlWindow.Frame"/>, its value is not synchronized with <see cref="P:JetBrains.TextControl.ITextControlWindow.IsFocused"/>. This particular property is guaranteed to be high when the text control has keyboard focus, while the frame only reflects what it knows about the environment. Sometimes they do not agree, because not all of the Visual Studio implementation is accurate in details.</remarks>
        </member>
        <member name="P:JetBrains.TextControl.BaseImpl.TextControlWindowBase.JetBrains#TextControl#ITextControlWindow#TextControl">
            <summary>
            Gets the owning text control.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.CaretVisualPlacement">
            <summary>
            After positioning the caret in the document, scrolls the text control to reveal the caret position.
            This affects the visual location of the caret after scrolling.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.DontScrollIfVisible">
            <summary>
            Does not do any scrolling if the new caret position is already visible.
            If the caret gets too close to the edge, <see cref="F:JetBrains.TextControl.CaretVisualPlacement.Generic"/> would scroll it away. This mode avoids the effect.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.Generic">
            <summary>
            When moving within the active text control, ensures the caret is not too close to the edge with minimal amount of scrolling.
            When jumping to another text control, places the caret at the predefined position.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.DirectionalUp">
            <summary>
            When moving within the active text control, works almost as <see cref="F:JetBrains.TextControl.CaretVisualPlacement.Generic"/>, but avoids scrolling the caret away from a too-near edge if this means scrolling against the caret movement direction.
            When jumping to another text control, places the caret at the predefined position consistent with generic scrolling in the given direction within the same text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CaretVisualPlacement.DirectionalDown">
            <summary>
            When moving within the active text control, works almost as <see cref="F:JetBrains.TextControl.CaretVisualPlacement.Generic"/>, but avoids scrolling the caret away from a too-near edge if this means scrolling against the caret movement direction.
            When jumping to another text control, places the caret at the predefined position consistent with generic scrolling in the given direction within the same text control.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.ITextControlCoords">
            <summary>
            An entry point to the text control coordinate conversions.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.ITextControlPos">
            <summary>
            Represents an abstracted point on the text control that can be converted to any more or less equivalent representation.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToCanvas">
            <summary>
            Converts the position to canvas coordinates, which are pixel coordinates relative to the (0,0) character in the text view.
            Canvas coordinates of a specific text control character do not change when scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToDocLineColumn">
            <summary>
            Converts the position to document line-column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToDocOffset">
            <summary>
            Converts the position to an offset from the beginning of the document text.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToDocOffsetAndVirtual">
            <summary>
            Converts the position to an offset from the beginning of the document text, plus, if the position represented a point in the editor virtual space, the number of virtual spaces from the last real document character to the addressed position.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToScreen">
            <summary>
            Converts the position to screen pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.ITextControlPos.ToTextControlLineColumn">
            <summary>
            Converts the position to text control line-column coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.ITextControlPos.TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas">
            <summary>
            Coordinate conversion from canvas pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosCanvas.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn">
            <summary>
            Coordinate conversion from document line/column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocLineColumn.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual">
            <summary>
            Coordinate conversion from document offset with virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosDocOffsetAndVirtual.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained">
            <summary>
            Stores a retained coordinate snapshot.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.OptionDontRetainPixels">
            <summary>
            Allows to exclude <see cref="!:ToScreen"/> and <see cref="!:ToCanvas"/> pixel coordinates from precalculation.
            <see cref="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained"/>-type properties won't be reliable on change regarding these, but each calculation won't be so slow.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.myPosOriginal">
            <summary>
            The position from which this retained position has been created by pre-calculating all of the transformations.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.#ctor(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Creates a snapshot of all the <paramref name="pos"/> aspects.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.#ctor(JetBrains.TextControl.ITextControl)">
            <summary>
            Only for <see cref="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.CreateEmpty(JetBrains.TextControl.ITextControl)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.CreateEmpty(JetBrains.TextControl.ITextControl)">
            <summary>
            Creates an all-<c>Null</c> position. Text control must be specified in any case.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.Freeze(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Creates a snapshot of all the <paramref name="pos"/> aspects.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToCanvas">
            <summary>
            Converts the position to canvas coordinates, which are pixel coordinates relative to the (0,0) character in the text view.
            Canvas coordinates of a specific text control character do not change when scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToDocLineColumn">
            <summary>
            Converts the position to document line-column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToDocOffset">
            <summary>
            Converts the position to an offset from the beginning of the document text.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToDocOffsetAndVirtual">
            <summary>
            Converts the position to an offset from the beginning of the document text, plus, if the position represented a point in the editor virtual space, the number of virtual spaces from the last real document character to the addressed position.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToScreen">
            <summary>
            Converts the position to screen pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#ToTextControlLineColumn">
            <summary>
            Converts the position to text control line-column coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosRetained.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen">
            <summary>
            Coordinate conversion from screen pixel coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosScreen.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn">
            <summary>
            Coordinate conversion from text control line/column coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.Equals(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="iother"/> parameter; otherwise, false.
            </returns>
            <param name="iother">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.JetBrains#TextControl#Coords#ITextControlPos#ToRetainedPos">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.ITextControlPos.ToRetainedPos"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Coords.PositionKinds.TextControlPosTextControlLineColumn.JetBrains#TextControl#Coords#ITextControlPos#TextControl">
            <summary>
            Gets the text control that will be translating the position to various coordinate systems.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore">
            <summary>
            Implements the few methods that make it possible to implement the multitude of conversions supported by <see cref="T:JetBrains.TextControl.Coords.ITextControlCoords"/>-<see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.#ctor(JetBrains.TextControl.ITextControl)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Canvas_To_TextControlLineColumn(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocLineColumn_To_DocOffset(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Standard implementation that uses platform doc line index.
            May be out of sync with VS model at times.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocLineColumn_To_TextControlLineColumn(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocOffset_To_DocLineColumn(JetBrains.TextControl.DocOffsetAndVirtual)">
            <summary>
            Standard implementation that uses platform doc line index.
            May be out of sync with VS model at times.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.DocOffset_To_TextControlLineColumn(JetBrains.TextControl.DocOffsetAndVirtual)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Screen_To_TextControlLineColumn(System.Drawing.Point)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Canvas(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_DocLineColumn(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_DocOffset(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Screen(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Conversion method.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.GetViewportLocation">
            <summary>
            Location of the viewport within the canvas coord space. Ie scrolling position.
            For transitions between canvas and viewport coords.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Screen_To_Viewport(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Viewport_To_Screen(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.TextControlCoords">
            <summary>
            Implements the creation of <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> from various sources.
            Supply with the conversion core.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Coords.TextControlPosRange">
            <summary>
            Defines a range between two <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.TextControlPosRange.End">
            <summary>
            Range end. This position belongs to <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.TextControl"/>.
            Note that it's not guaranteed that <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> goes before <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.TextControlPosRange.Start">
            <summary>
            Range start. This position belongs to <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.TextControl"/>.
            Note that it's not guaranteed that <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> goes before <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Coords.TextControlPosRange.TextControl">
            <summary>
            Both <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.Start"/> and <see cref="F:JetBrains.TextControl.Coords.TextControlPosRange.End"/> belong to this text control.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocLineColumnRange(JetBrains.TextControl.ITextControl,JetBrains.DocumentModel.DocLineColumnRange)">
            <summary>
            Creates a text control range in universal positions based on the document range.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="range">The range, in document coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Creates a text control range in universal positions based on the document range. See also the <see cref="!:FromDocRange(JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl,int,int)"/> overload that supports unnormalized ranges.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="range">The range, in document coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocRange(JetBrains.TextControl.ITextControl,System.Int32,System.Int32)">
            <summary>
            Creates a text control range in universal positions based on the document range. Unlike the <see cref="M:JetBrains.TextControl.Coords.TextControlPosRange.FromDocRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)"/> overload, accepts unnormalized ranges.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="start">The range start, in document coordinates.</param>
            <param name="end">The range end, in document coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.FromTextControlLineCol(JetBrains.TextControl.ITextControl,JetBrains.VsIntegration.TextControl.TextControlLineColumnRange)">
            <summary>
            Creates a text control range in universal positions based on the text control line-col coordinates.
            </summary>
            <param name="textcontrol">The text control that will be used for translating the range into the text control coordinate space.</param>
            <param name="range">The range, in text control line-col coordinates.</param>
            <returns>Text control range in universal coordinates.</returns>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToDocLineColumnRangeNormalized">
            <summary>
            Converts both ends to the document range.
            Normalizes the range, so that the start goes before the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToDocLineColumnRangeUnnormalized">
            <summary>
            Converts both ends to the document range.
            Does not normalize the range, the start might go after the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToDocRangeNormalized">
            <summary>
            Converts both ends to the document range.
            Makes sure the range is properly normalized, ie the start goes before the end. Raw ranges of the document selection, for instance, might be inverted if user selects with shift+left.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToRetained">
            <summary>
            Normally, an <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> starts as a position of a specific kind and calculates the conversions as needed.
            The <see cref="M:JetBrains.TextControl.Coords.TextControlPosRange.ToRetained"/> method allows to precalculate all of the positions for the given moment in time, which provides for retaining the values in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> even after the unmanaged text control gets destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToTextControlLineColumnRangeNormalized">
            <summary>
            Converts both ends to the text control line-column range.
            Normalizes the range, so that the start goes before the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToTextControlLineColumnRangeUnnormalized">
            <summary>
            Converts both ends to the text control line-column range.
            Does not normalize the range, the start might go after the end.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Coords.TextControlPosRange.Equals(JetBrains.TextControl.Coords.TextControlPosRange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.TextControl.CreateTextControlParams`1">
            <summary>
            Params for <see cref="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})"/>. See concrete inheritors for available text control types.
            </summary>
            <typeparam name="TTextControl">Type of the text control.</typeparam>
        </member>
        <member name="M:JetBrains.TextControl.CreateTextControlParams`1.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             Makes params.
             </summary>
             <param name="document">
               The document for which the text control should be created.
            </param>
             <param name="frame">The frame that hosts the text control.</param>
        </member>
        <member name="F:JetBrains.TextControl.CreateTextControlParams`1.Document">
            <summary>
            The document for the new text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CreateTextControlParams`1.Frame">
            <summary>
            The frame hosting the new text control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.CreateTextControlParams`1.TextControlType">
            <summary>
            Type of the text control to create.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.CreateWinFormsTextControlParams">
            <summary>
            Creates a homebrew WinForms text control of type <see cref="T:JetBrains.TextControl.IWinFormTextControl"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.CreateWinFormsTextControlParams.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame,JetBrains.TextControl.TextControlScheme,JetBrains.TextControl.ISyntaxHighlighting,JetBrains.TextControl.Graphics.IEditorGraphicsProvider)">
            <summary>
            Makes params.
            </summary>
            <param name="document">The document for which the text control should be created.</param>
            <param name="scheme">Scheme. Use <c>DefaultTextControlSchemeManager.Instance.GetScheme()</c> as the default.</param>
            <param name="hilite">Highlighting. Use <c>Null</c> as the default.</param>
            <param name="frame">Frame hosting the text control.</param>
            <param name="graphicsprovider">Optional provider for graphics text control. If not specified, the default provider, as given out by <see cref="T:JetBrains.TextControl.StandaloneTextControlSwitchingGraphicsProvider"/>, will be used.</param>
        </member>
        <member name="M:JetBrains.TextControl.CreateWinFormsTextControlParams.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.TextControl.DefaultTextControlSchemeManager,JetBrains.Application.IShellLocks)">
            <summary>
            Creates the text control for the document, using the default scheme and highlighting.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.Data.IRangeableContainer`1.RemovedOnDocumentChange">
            <summary>
            Fired when invalidated item is automatically removed from container due to document change
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Data.RangeableContainer`2.EnsureUpdated">
            <summary>
            Make the container updated for the recent document change, and return if the futher container modification should be reflected in <see cref="F:JetBrains.TextControl.Data.RangeableContainer`2.myDocumentChangeData"/>
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Diagnostics.TextControlDebugMonitor.ShowWindow">
            <summary>
            Shows the monitor window.
            Routed thru a signal to deactivate on disposal.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Diagnostics.TextControlDebugMonitor.InitWindow_Viewport(JetBrains.DataFlow.Lifetime,System.Windows.Window,JetBrains.Application.IShellLocks,JetBrains.Application.IApplicationDescriptor,JetBrains.TextControl.ITextControlManager)">
            <summary>
            Last focused text control viewport coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Diagnostics.TextControlDebugMonitor.ShowScrollingAndCaret(JetBrains.DataFlow.Lifetime,System.Windows.Window,JetBrains.Application.IApplicationDescriptor,JetBrains.TextControl.ITextControlManager)">
            <summary>
            Shows text control scrolling and caret info for the last-focused text control.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Diagnostics.TextControlDebugMonitor.TextControlDebugMonitor_ShowAction.JetBrains#ActionManagement#IActionHandler#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.TextControl.Diagnostics.TextControlDebugMonitor.TextControlDebugMonitor_ShowAction.JetBrains#ActionManagement#IActionHandler#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.TextControl.DocOffsetAndVirtual">
            <summary>
            <para>Represents the (<see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.Offset"/>) in a text <see cref="T:JetBrains.DocumentModel.IDocument">document</see>, which is basically a document offset.</para>
            <para>However, this position is often derived from a <see cref="T:JetBrains.TextControl.TextControlLineColumn"/>, which is in the text control Line-Column coordinate system, and not all column indices map into document offsets. If the column index is beyond the EOL of that line, then it's said to be in the Virtual Space. <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta"/> is the offset into the Virtual Space from the nearest valid document <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.Offset"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.DocOffsetAndVirtual.myNeutralVirtualDelta">
            <summary>
            Number of virtual columns past the last real document position.
            Neutral means that it is equally presented in document and text control columns (<see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta"/>, <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.DocVirtualDelta"/>).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.#ctor(System.Int32,JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.TextControl.TextControlColumn})">
            <summary>
            Creates an offset that represents some point within the text control's virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.#ctor(System.Int32,JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocColumn})">
            <summary>
            Creates an offset that represents some point within the text control's virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.#ctor(System.Int32)">
            <summary>
            Creates an offset that corresponds to a real document offset, without any shift to the virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.DocOffsetAndVirtual.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.DocVirtualDelta">
            <summary>
            For logical positions over actual document characters this is zero. For logical positions over the Virtual Space (column indices beyond the end of line), the number of virtual space characters from the EOL.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.IsInVirtualSpace">
            <summary>
            Gets whether the point isn't over document chars, but somewhere in the virtual space of the text control.
            This means that <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.DocVirtualDelta"/> and <see cref="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta"/> are both above zero.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.Offset">
            <summary>
            For logical positions over actual document characters, the <see cref="T:JetBrains.DocumentModel.IDocument">document</see> offset. For logical positions over the Virtual Space (column indices beyond the end of line), the EOL offset.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocOffsetAndVirtual.TextControlVirtualDelta">
            <summary>
            For logical positions over actual document characters this is zero. For logical positions over the Virtual Space (column indices beyond the end of line), the number of virtual space characters from the EOL.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.DocumentMarkup.GutterMarkMenuLayouter">
            <summary>
            A factory for the gutter mark menu layouters.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.GutterMarkMenuLayouter.CreateSource(JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Creates a popup window context with a layouter for the gutter mark menu.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.GutterMarkMenuLayouter.Create(JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Creates a popup window context with a layouter for the gutter mark menu.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.GutterMarkInfoEx.OnClick(JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo,JetBrains.UI.BulbMenu.BulbMenuComponent,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,JetBrains.TextControl.ITextControl)">
            <summary>
            Handles click action on a single GutterMark.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.EditBoxTextControl.CreateEditBoxTextControlParams">
            <summary>
            Creates an editbox-based text control of type <see cref="T:JetBrains.TextControl.IWinFormTextControl"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.CreateEditBoxTextControlParams.#ctor(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             Makes params.
             </summary>
             <param name="document">
               The document for which the text control should be created.
            </param>
             <param name="frame"></param>
             
        </member>
        <member name="T:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl">
            <summary>
            A lightweight text control based on a Windows Edit Box for use in dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControl">
            <summary>
            Represents the text control, which is a view for editing an <see cref="T:JetBrains.DocumentModel.IDocument"/>.
            Most calls that modify the text control state must be made from the UI thread.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControl.EmulateEnter">
            <summary>
            Emulates pressing the Enter key in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControl.EmulateTyping(System.Char)">
            <summary>
            Emulates typing in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
            <param name="c">The character to amulate typing of.</param>
        </member>
        <member name="M:JetBrains.TextControl.ITextControl.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.</remarks>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Caret">
            <summary>
            Caret access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Coords">
            <summary>
            <para>Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.</para>
            <para>The rendered text gets from the <see cref="P:JetBrains.TextControl.ITextControl.Document">document</see>, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Lifetime">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Document">
            <summary>
            <para>Gets the document that supplies this text control with content.</para>
            <para>The rendered text gets from the document, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            Use <see cref="P:JetBrains.TextControl.ITextControl.Coords"/> to convert between various text control coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Scrolling">
            <summary>
            Gets the scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Selection">
            <summary>
            Selection access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControl.Window">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.ITextControl.BeforeDispose">
            <summary>
            Fires when the text control is being disposed of.
            As the text control lifetime is deterministic, you might want to attach to such a point.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.SyncToViewGuarded">
            <summary>
            Syncs all the models to the view.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.SyncToViewUnguarded">
            <summary>
            Switches to guarded context, calls <see cref="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.SyncToViewGuarded"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.Init_BindToDocument">
            <summary>
            Binds text in the text box to the document text, bidirectionally.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.Init_Disposes">
            <summary>
            Behavior on dispose.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#EmulateEnter">
            <summary>
            Emulates pressing the Enter key in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#EmulateTyping(System.Char)">
            <summary>
            Emulates typing in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
            <param name="c">The character to amulate typing of.</param>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.EditBox">
            <summary>
            Gets the edit box that is the text control.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.Document">
            <summary>
            <para>Gets the document that supplies this text control with content.</para>
            <para>The rendered text gets from the document, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            Use <see cref="P:JetBrains.TextControl.ITextControl.Coords"/> to convert between various text control coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Caret">
            <summary>
            Caret access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Coords">
            <summary>
            <para>Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.</para>
            <para>The rendered text gets from the <see cref="P:JetBrains.TextControl.ITextControl.Document">document</see>, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.Lifetime">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Scrolling">
            <summary>
            Gets the scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Selection">
            <summary>
            Selection access.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl.JetBrains#TextControl#ITextControl#Window">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.#ctor(JetBrains.TextControl.EditBoxTextControl.EditBoxTextControl)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.Screen_To_TextControlLineColumn(System.Drawing.Point)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Canvas_To_TextControlLineColumn(JetBrains.TextControl.Graphics.PointEx)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.TextControlLineColumn_To_Screen(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Canvas(JetBrains.TextControl.TextControlLineColumn)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.Screen_To_Viewport(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlCoordinateConversion.Viewport_To_Screen(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlScrolling.ScrollTo(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            <para>
            Explicitly sets the viewport position in the canvas (extent) coordinates.
            </para>
            <para>
            Even though you can pass pixel coodinates to <see cref="M:JetBrains.TextControl.ITextControlScrolling.ScrollTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.TextControlScrollType)"/> as well, the difference is that this method does not attempt to adjust the scrolling position for the best visibility of the desired point. The viewport left-top corner is positioned as closely to <paramref name="canvasPosition"/> as possible.
            </para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlWindow.CreateViewportAnchorCore(JetBrains.DataFlow.Lifetime)">
            <summary>
            Should create the anchoring rect core object. Do not use caching, the impl already does it instead of calling the method directly.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlWindow.FocusCore">
            <summary>
            Should cause the text control to achieve keyboard focus.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.EditBoxTextControl.EditBoxTextControlWindow.System#Windows#Forms#IWin32Window#Handle">
            <summary>
            Gets the handle to the window represented by the implementer.
            </summary>
            <returns>
            A handle to the window represented by the implementer.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.IErrorStripeDocument.IndicatorState">
            <summary>
            Flows from VsTextControlCommon.ErrorStripeIndicatorState
            Flows into IndicatorIconId
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.ourOptionDocumentUpdateInterval">
            <summary>
            Repaint error stripe no more often than this period.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.myHighlighterPositionCache">
            <summary>
            The cache of document line ratios.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.myColorCache">
            <summary>
            The cache of highlighter colors
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.MyHighlightersToShow">
            <summary>
            List of IHighlighters. Sorted in ascending order on both Ys and startoffset.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.myDocumentIsDirty" -->
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.InvalidateDocument">
            <summary>
            Marks the document as dirty.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.ObtainAllHighlighters">
            <summary>
            Must be implemented in sub-classes.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.CreateHighlighterPositionCacheInstance">
            <summary>
            Allows to override the HighlighterPositionCache.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.EnsureCaretMovement">
            <summary>
            Should be called before movement the caret in the text control.
            </summary>
            <returns>true - caret can be moved; false - caret should not be moved.</returns>
            <remarks>
            ActiPro SyntexEditor text control has a single caret for multiple text views. We may have to change the active view before caret movement.
            </remarks>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.GetIndicatorIcon(JetBrains.TextControl.ErrorStripeIndicatorState)">
            <summary>
            Returns an indicator icon id to be shown on error stripe indicator.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.GetIndicatorTooltip">
            <summary>
            Returns an indicator tooltip.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.GetIndicatorStateText">
            <summary>
            Returns standard indicator tooltip texts for standard error stripe states, otherwise returns null.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.GetMarkersToShow">
            <summary>
            Returns a list of markers to show on a error stipe. Must be called from a guarded context.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.MakeDocumentNow">
            <summary>
            Makes (re-create) the documents and fire the event for the document to be shown on an error stripe.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.OnIndicatorClickedHandler">
            <summary>
            Handles left mouse click on an error stripe indicator image.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.OnMarkersBarClickedHandler(System.Nullable{System.Double})">
            <summary>
            Handles left mouse click on an error stripe markers bar free space.
            </summary>
            <param name="position">A relative markers bar position from 0 to 1.</param>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.OnMarkerClickedHandler(JetBrains.TextControl.ErrorStripe.ErrorStripeMarker)">
            <summary>
            Handles left mouse click on an error stripe marker.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.OnMarkerTooltipRequestedHandler(JetBrains.DataFlow.InOutEventArgs{JetBrains.TextControl.ErrorStripe.ErrorStripeMarker,JetBrains.TextControl.ErrorStripe.ErrorStripeTooltip})">
            <summary>
            Returns error stripe marker tooltip.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.OnIndicatorTooltipRequestedHandler(JetBrains.DataFlow.InOutEventArgs{System.Object,JetBrains.TextControl.ErrorStripe.ErrorStripeTooltip})">
            <summary>
            Returns error stripe indicator tooltip.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.CalculateY(JetBrains.TextControl.Data.IRangeable)">
            <summary>
            Returns values in the interval [0..1]
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.CalculateViewportRange">
            <summary>
            Gets current text control view port range, converts it into position ratio [0..1] and exposes throurg the ViewportRange property.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.MarkerSlotCountInquiry">
            <summary>
            To calculate the y-coordinates, the view size must be known.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache">
            <summary>
            A cache of document line ratios.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.myFrozenValidDocLinesSorted">
            <summary>
            After <see cref="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.Freeze"/>, we can calculate new line ratios no more; build a list of valid lines for binarysearching here, and do linear approximation.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.myIsFrozen">
            <seealso cref="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.Freeze"/>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.myLineCount">
            <summary>
            Amount of actual text lines in the document.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.myVirtualLineCount">
            <summary>
            Amount of text lines in the document including virtual space at the end of the document.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.Freeze">
            <summary>
            Prohibits calculating any new cache entries.
            The cache is filled during the render, then frozen and used for tooltips, clicks, etc (because the cache data might be a bit dated, and will collide with new calculations).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.GetPositionRatio(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            Converts a document line number into a position ratio [0..1], for displaying a highlighter on the error stripe.
            The values are cached.
            </summary>
            <remarks>The mapping is nonlinear because of collapsed regions, word wrapping, and so on.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.GetTextControlPos(System.Double)">
            <summary>
            Converts a document ratio [0..1] into a document line.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.GetPositionRatioImplementation(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            Called by <see cref="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.GetPositionRatio(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})"/> in case of a cache miss. Should be doing the calculation itself.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.HighlighterPositionCache.GetPositionRatioWrapper(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            Depending on frozen state calls implementation or uses linear approximation.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.MarkerGroups">
            <summary>
            We assume that highlighters are ordered.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeDocumentBase.ErrorStripeColorCache">
            <summary>
            Caches colors of error stripe markers.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeEditorStyle">
            <summary>
            Switches the error stripe into the editor colors mode. Optionally.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeStyle">
            <summary>
            Defines the Error Stripe presentation style: whether it mimcs the editor colors, or takes the system 3D color and uses special colors for gutter marks (classic mode).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeStyle.#ctor(JetBrains.TextControl.ErrorStripe.ErrorStripeStyle.Brusher,System.Windows.Forms.AnchorStyles)">
            <summary>
            Creates a style.
            The object is frozen, create a new one to change.
            </summary>
            <param name="funcBackgroundBrusher">
            Gets the delegate that creates a brush for painting the Error Stripe background.
            The base implementation can use the system Window color only.
            </param>
            <param name="location">Error stripe placement.</param>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeStyle.CreateClassic">
            <summary>
            Creates the classic style.
            The object is frozen, create a new one to change.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.ErrorStripeStyle.BackgroundBrusher">
            <summary>
            Gets the delegate that creates a brush for painting the Error Stripe background.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.ErrorStripeStyle.Location">
            <summary>
            Gets the Error Stripe location (right, left, top or bottom).
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeStyle.Brusher">
            <summary>
            A delegate for creating brushes on-demand.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs">
            <summary>
            Used by Error stripe control.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.ClientPoint">
            <summary>
            [in] The query point, in client coordinates of the error stripe.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.SetTooltip(System.String,System.Object,System.Drawing.Rectangle)">
            <summary>
            Sets the tooltip information.
            The properties do not have individual setters so that handlers in different products were not merging together but overriding the other entirely.
            Do not call this method at all if you do not have a tooltip to provide.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.HasTooltip">
            <summary>
            Gets whether the tooltip has been assigned to this object.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.ToolArea">
            <summary>
            [out] When returning a tooltip, defines an area around the <see cref="F:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.ClientPoint"/> for which the tooltip will be the same (guaranteeed to include the <see cref="F:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.ClientPoint"/> in this case). 
            N/A when not returning tooltip.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.TooltipPlainTextContent">
            <summary>
            [out] When returning a tooltip, defines the plain text content to be displayed on the tooltip.
            Rich text might also be set to <see cref="P:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.TooltipRichContent"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.TooltipRichContent">
            <summary>
            [out] When returning a tooltip, and <see cref="P:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.TooltipPlainTextContent"/> is non-Null, optionally defines the rich content to be displayed on the tooltip.
            The supported object types are defined by the current implementation.
            Unsupported object kinds are gracefully ignored, and implementation falls back to <see cref="P:JetBrains.TextControl.ErrorStripe.ErrorStripeTooltipEventArgs.TooltipPlainTextContent"/>.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.ErrorStripeMarker">
            <summary>
            Contains information about marker to be shown on an error stripe.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.ErrorStripe.ErrorStripeMarker.MarkerId">
            <summary>
            Marker id used to hold error stripe document dependent information on a marker.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.IErrorStripeStyleService">
            <summary>
            Error Stripe customization.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ErrorStripe.IErrorStripeStyleService.Style">
            <summary>
            Gets or sets the Error Stripe Style.
            A style is frozen, create a new object to change any style property.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ErrorStripe.SErrorStripeStyleService">
            <summary>
            Provides the <see cref="T:JetBrains.TextControl.ErrorStripe.IErrorStripeStyleService"/> service instance.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ErrorStripe.SErrorStripeStyleService.GetInstance">
            <summary>
            Service instance (no service provider yet).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Graphics.Rect.Between(System.Single,System.Single,System.Single)">
            <summary>
            
            
            </summary>
            <returns>true if b is between a and c</returns>
        </member>
        <member name="M:JetBrains.TextControl.Graphics.FontAttributesHashTable.SearchCollisions(JetBrains.TextControl.FontAttributes,System.UInt32@,System.UInt32@)">
            returns index of bucket where key is found or zero if not found
        </member>
        <member name="T:JetBrains.TextControl.Graphics.FontAttributesHashTable.HashTableParams">
            <summary>
            HashTableParams class describes default behaviour of hash tables
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.Screen_To_TextControlLineColumn(System.Drawing.Point)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.Canvas_To_TextControlLineColumn(JetBrains.TextControl.Graphics.PointEx)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.TextControlLineColumn_To_Screen(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Standard impl based on the <see cref="M:JetBrains.TextControl.Coords.TextControlCoordinateConversionCore.TextControlLineColumn_To_Canvas(JetBrains.TextControl.TextControlLineColumn)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.Screen_To_Viewport(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.StandaloneTextControlCoordinateConversion.Viewport_To_Screen(System.Drawing.Point)">
            <summary>
            Helper conversion for deriving screen conversions from canvas ones.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.impl.StandaloneTextControlImmanentHighlighters">
            <summary>
            Highlighters, as needed by the standalone text control impl.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.TextControl.StandaloneTextControlSwitchingGraphicsProvider" -->
        <member name="T:JetBrains.TextControl.Impl.TextControlTypingHandlers">
            <summary>
            Manages typing handlers over text controls.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlTypingHandlers.myTypingHandlers">
            <summary>
            Copy-on-write list of handlers. Sorted backwards, because we call handlers starting from tail.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlTypingHandlers.AddTypingHandler(JetBrains.DataFlow.Lifetime,System.Action{JetBrains.TextControl.ITypingContext},System.Int32)">
            <summary>
            Priority:
            int.MinValue + x - for skipping assists
            -10 000 + x - for read-only before/after handlers, such as automatic code completion
            -1 000 + x - for modifing before/after handlers, such as synchronized changes trackers (ChangedTagNameTracker)
            0 - for usual assists
            int.MaxValue - for final handlers (VS or text control)
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITypingContext">
            <summary>
            Context information for <see cref="M:JetBrains.TextControl.Impl.TextControlTypingHandlers.AddTypingHandler(JetBrains.DataFlow.Lifetime,System.Action{JetBrains.TextControl.ITypingContext},System.Int32)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlHandlerContext.CallNext">
            <summary>
            Allows other handlers to operate.
            Handlers operate in a chain. You might do your handling before remaining handlers, after them, or instead of them, based on whether and when you <see cref="M:JetBrains.TextControl.ITextControlHandlerContext.CallNext"/>.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlHandlerContext.EnsureWritable">
            <summary>
            Requests write access for the document of the <see cref="P:JetBrains.TextControl.ITextControlHandlerContext.TextControl"/>.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlHandlerContext.TextControl">
            <summary>
            Gets the text control we're typing in.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITypingContext.Char">
            <summary>
            Gets the character that were typed.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.IRow">
            <summary>
            Represents a row of an editor
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControl2">
            <summary>
            The extended version of the text control interface.
            Historically, these members were present in the original interface. 
            However, they're only used by the implementation (mostly that of the standalone text control), and are optional for the VS-based text controls, especially DevTen.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlCanvas">
            <summary>
            Maps text control entities to the pixel coordinate system.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetColumnX(JetBrains.TextControl.IRow,JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.TextControl.TextControlColumn})">
            <summary>
            Gets the pixel coordinate of the character left point. The column is row-dependent because the in a non-fixed-width font there's no such thing as a row-independent column.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetExtentHeight">
            <summary>
            Gets the text extent height, ie the total height of the scrollable text. If the viewport is this large, there is no scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetExtentWidth">
            <summary>
            Gets the text extent width, ie the total width of the scrollable text. If the viewport is this large, there is no scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetRowHeight(JetBrains.TextControl.IRow)">
            <summary>
            Gets the height of the given row.
            // TODO: what about wordwrapping?
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetRowWidth(JetBrains.TextControl.IRow)">
            <summary>
            Gets the width of the given row.
            // TODO: what about wordwrapping?
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlCanvas.GetRowY(JetBrains.TextControl.IRow)">
            <summary>
            Gets the pixel coordinate of the row top.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ITextControlManager">
            <summary>
            Manages the text controls throughout the application.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlManager.CreateShellTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the text control of the default kind in the current application environment, and attaches it to the given document (there might be multiple text controls for the same document).</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             <para>Note that the shell text control might have limitations on which kinds of documents could be used with it.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame">
              The logical owner of the text control in the UI hierarchy.
            </param>
            <returns>The new text control.</returns>
             <remarks>
             <para>Note that Visual Studio Integration uses other methods for attaching to existing Visual Studio text controls.</para>
             </remarks>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlManager.CreateSimpleTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the simplest text control for the given document (there might be multiple text controls for the same document).</para>
             <para>The simplest and most lightweight implementation is used. Use specific <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> with the <see cref="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})"/> factory method if you care for the text control type.</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame">The logical owner of the text control in the UI hierarchy.</param>
            <returns>The new text control.</returns>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})">
            <summary>
            <para>Creates a new text control for the document (there might be multiple text controls for the same document).</para>
            <para>The document and the type of the text control created are determined by the <paramref name="param"/>, for which any <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> inheritor could be used.</para>
            </summary>
            <typeparam name="TTextControl">Type of the text control to create.</typeparam>
            <param name="param">Text control context and parameters.</param>
            <returns>The new text control.</returns>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.CurrentFrameTextControl">
            <summary>
            <para>Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed or we have left the window frame that holds the text control. May be <c>Null</c>. Changes are guarded.</para>
            <para>Note that, unlike <see cref="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl"/>, this property resets to <c>Null</c> when the focus wanders off to some tool window or another frame of such a kind.</para>
            </summary>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.FocusedTextControl"/>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl"/>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl"/>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.CurrentFrameTextControl"/>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.LastFocusedTextControl">
            <summary>
            <para>Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed. May be <c>Null</c>. Changes are guarded.</para>
            <para>Note that this property does not lose its value if focus wanders off to some tool window or another frame of such a kind.</para>
            </summary>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.FocusedTextControl"/>
            <seealso cref="P:JetBrains.TextControl.ITextControlManager.CurrentFrameTextControl"/>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.Legacy">
            <summary>
            Legacy wrappers to expose the collections and property changes as raw CLR events.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.TextControls">
            <summary>
            <para>Gets the list of all the text controls that currently exist.</para>
            <para>Could be modified on the primary thread in the guarded context only.</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.ITextControlManager.VisibleTextControls">
            <summary>
            <para>Tracks the list of <see cref="P:JetBrains.TextControl.ITextControlManager.TextControls">text controls</see> currently visible on screen. There is no specific order on the text visible controls. This collection is live.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.HasSelection(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            Tells whether the selection is non-empty.
            Otherwise, the selection range will be placed at the <see cref="P:JetBrains.TextControl.ITextControl.Caret"/> position.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.SetRange(JetBrains.TextControl.ITextControlSelection,JetBrains.Util.TextRange)">
            <summary>
            Sets selection to a range given in the document coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.RandomRange(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            With stream selection, returns the selected range. With box selection, the result is undefined. Do not use. Replace with other methods when seen (IsDisjoint, UnionOfDocRanges, OneDocRangeWithCaret).
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.IsDisjoint(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            Gets whether selection cannot be represented as a single continuous range, but is instead a set of disjoint ranges. This is a case with box ("vertical") selection in VS.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.UnionOfDocRanges(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            <para>Gets a document range spanning all of the selected characters.</para>
            <para>The range is normalized (start offset is smaller than end offset).</para>
            <para>If there is no selection, returns a zero-length range positioned at caret.</para>
            <para>If there is single selected character range, returns it normalized (caret might be at either end).</para>
            <para>If there are multiple disjoint selected ranges, returns the minimum spanning range. Caret might be at either end or inside the range.</para>
            </summary>
            <remarks>Use in features such as Comment Line where only the lines participating in the selection are important.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.OneDocRangeWithCaret(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            <para>For a possibly-disjoint selection, gets one of its ranges that contains the caret.</para>
            <para>The range is normalized (start offset is smaller than end offset).</para>
            <para>If there is no selection, returns a zero-length range positioned at caret.</para>
            <para>If there is single selected character range, returns it normalized (caret might be at either end).</para>
            <para>If there are multiple disjoint selected ranges, one of them such as that the caret is inside that range (at one of the ends, I guess, but won't bet on that).</para>
            </summary>
            <remarks>Box selection should be supported directly in most features. While this isn't the case yet, some features interested in just the selected range around caret could use this range.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.GetActivePoint(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            <para>Selection has an active and an anchor end. Active end is where you have the caret. Anchor end is the end that does not move when you do shift-selection.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.GetAnchorPoint(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            <para>Selection has an active and an anchor end. Active end is where you have the caret. Anchor end is the end that does not move when you do shift-selection.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlSelectionEx.GetSelectedText(JetBrains.TextControl.ITextControlSelection)">
            <summary>
            Returns the selected text. The list is always non-null, but might be empty if there's no selection.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.ITextControlWindowEx.ShowOrFocus(JetBrains.TextControl.ITextControlWindow,System.Boolean)">
            <summary>
            Switches between <see cref="M:JetBrains.TextControl.ITextControlWindow.Show"/> and <see cref="M:JetBrains.TextControl.ITextControlWindow.Focus"/> with a boolean param.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TextControlAnchoringRect">
            <summary>
            Represents an anchor in the text editor.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TextControlAnchoringRect.myRange">
            <summary>
            The range we track in the document. <c>Null</c> only until it's initialized by the constructor.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TextControlAnchoringRect.myRangeMarker">
            <summary>
            A marker for the <see cref="F:JetBrains.IDE.TextControlAnchoringRect.myRange"/> range.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TextControlAnchoringRect.myTextControl">
            <summary>
            The text control to which the anchor is attached.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TextControlAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl,System.Int32,JetBrains.Application.IShellLocks)">
            <summary>
            Anchors to the given range on the given text control.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TextControlAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.Application.IShellLocks)">
            <summary>
            Anchors to the given range on the given text control.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TextControlAnchoringRect.CreateBeginningOfLine(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl,System.Int32,JetBrains.Application.IShellLocks)">
            <summary>
            Creates an anchoring rectangle on the character at the beginning of the line.
            </summary>
            <param name="lifetime"></param>
            <param name="textcontrol">The text control.</param>
            <param name="offset">An offset in the text control. The beginning of the line containing this offset at the moment of the call will be tracked.</param>
            <param name="locks"></param>
        </member>
        <member name="M:JetBrains.IDE.TextControlAnchoringRect.CreateFromCaretStatic(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl,JetBrains.Application.IShellLocks)">
            <summary>
            Creates an anchoring rectangle that anchors to the place where the caret was at the instant of the call.
            “Static” means the anchor would update to accomodate for changes in the document, but won't track caret movement.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TextControlAnchoringRect.CreateFromSelectionStatic(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl,JetBrains.Application.IShellLocks)">
            <summary>
            Creates an anchoring rectangle that anchors to the place where the selection margin was at the instant of the call.
            “Static” means the anchor would update to accomodate for changes in the document, but won't track selection changes.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TextControlAnchoringRect.UpdateAnchorGuarded">
            <summary>
            Needs a read lock for manipulating the document, called from <see cref="M:JetBrains.IDE.TextControlAnchoringRect.UpdateAnchor"/> in a guarded context.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TextControlAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TextControlAnchoringRect.Range">
            <summary>
            Gets or sets the range whose rectangle is tracked.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TextControlAnchoringRect.TextControl">
            <summary>
            Gets the text control to which the range belongs.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TextControlPopupWindowContext">
            <summary>
            Implementaion of <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext"/> for <see cref="T:JetBrains.TextControl.ITextControl"/>.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.DocumentMarkup.HighlighterCustomization">
            <summary>
            Default implementation which returns the predefined values AS IS.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization">
            <summary>
            Gets highlighter attributes, much like <see cref="P:JetBrains.TextControl.DocumentMarkup.IHighlighter.Attributes"/> but with all the user customizations in the current IDE taken into account.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization.GetCustomizedHighlighterAttributes(JetBrains.TextControl.DocumentMarkup.IHighlighter)">
            <summary>
            <para>Gets highlighter attributes, much like <see cref="P:JetBrains.TextControl.DocumentMarkup.IHighlighter.Attributes"/> but with all the user customizations in the current IDE taken into account.</para>
            <para>Threading limitations may apply, as per the current IDE environment.</para>
            <para>This overload uses an instance of a highlighter over a document.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization.GetCustomizedRegisteredHighlighterAttributes(System.String)">
            <summary>
            Gets highlighter attributes, much like <see cref="P:JetBrains.TextControl.DocumentMarkup.IHighlighter.Attributes"/> but with all the user customizations in the current IDE taken into account.
            Threading limitations may apply, as per the current IDE environment.
            <para>This overload uses the attribute id from a <see cref="T:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute"/> without an actual created highlighter instance.</para>
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.HighlighterCustomization.ApplyIdeCustomizations(JetBrains.TextControl.DocumentMarkup.HighlighterAttributes,System.String)">
            <summary>
            Override this in implementations to apply customizations.
            </summary>
            <param name="sample">The predefined highlighter attributes (either retrieved from the live instance of a highlighter on a document, or from the registration attribute).</param>
            <param name="sRegisteredHighlighterAttributeId">ID of the registration attribute. This is the identity by which you could query for the customizations in the current IDE.</param>
        </member>
        <member name="T:JetBrains.TextControl.DocumentMarkup.IGutterMark">
            <summary>
            A gutter mark is rendered to the left of the text view line and displays information such as base/drived types, unit testing glyph, etc.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.IGutterMark.GetGutterMarkInfo(JetBrains.TextControl.DocumentMarkup.IHighlighter)">
            <summary>
            Default info that is used is no specific 'IGutterMarkInfo' is passed. Should be not-null for daemon marks.
            </summary>
            <param name="highlighter"></param>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo.IconId">
            <summary>
            Icon to display on gutter. When not null, it overrides the icon from BulbMenuItems.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.IHighlighterEx.GetCustomizedHighlighterAttributes(JetBrains.TextControl.DocumentMarkup.IHighlighter,JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization)">
            <summary>
            Gets highlighter attributes, much like <see cref="P:JetBrains.TextControl.DocumentMarkup.IHighlighter.Attributes"/> but wih allt the user customizations in the current IDE taken into account.
            Threading limitations may apply, as per the current IDE environment.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.ShellComponentsEx">
            <summary>
            <see cref="T:JetBrains.Application.ShellComponents"/> in this assembly.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlColumn">
            <summary>
            Type disambig for <see cref="T:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1"/>.
            Represents zero-based column indices in the text control view.
            This does not correspond directly to the document lines and columns because of the collapsed regions and other view transformations.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlExtensions.ShowAtCaret(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.DataFlow.Lifetime,System.String,JetBrains.TextControl.ITextControl,JetBrains.Application.IShellLocks,JetBrains.ActionManagement.IActionManager)">
            <summary>
            Shows a tooltip at the text control caret location.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="text"></param>
            <param name="textcontrol"></param>
            <param name="locks"></param>
            <param name="actionman"></param>
        </member>
        <member name="T:JetBrains.TextControl.TextControlLine">
            <summary>
            Type disambig for <see cref="T:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1"/>.
            Represents zero-based line indices in the text control view.
            This does not correspond directly to the document lines and columns because of the collapsed regions and other view transformations.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlLineColumn">
            <summary>
            Represents the document position in terms of Line and Column indices.
            Note that this has nothing to do with screen pixels, for which there's the Canvas Rectangle and the <see cref="T:JetBrains.TextControl.Graphics.Rect"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlLineColumn.GetStartOfRow">
            <summary>
            Gets a new visual position located at the same row as the original one, but in the first column.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlLineColumn.OffsetHorizontally(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.TextControl.TextControlColumn})">
            <summary>
            Returns a new position with the same row and an offset column.
            Does not change the current object.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange">
            <summary>
            A range between two <see cref="T:JetBrains.TextControl.TextControlLineColumn"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.ToNormalized">
            <summary>
            Normalizes the range so that its start position went before the end position.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.TextControlLineColumnRange.Equals(JetBrains.VsIntegration.TextControl.TextControlLineColumnRange)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.TextControl.TextControlMouseEventArgs">
            <summary>
            Arguments for text control events.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlMouseEventArgs.#ctor(JetBrains.TextControl.ITextControl,System.Drawing.Point)">
            <summary>
            Create. Point is known, keys/button states are queried from system.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlMouseEventArgs.#ctor(JetBrains.TextControl.ITextControl,System.Nullable{JetBrains.Interop.WinApi.KeyStateMasks},System.Drawing.Point)">
            <summary>
            Create.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.IsHandled">
            <summary>
            Set to <c>True</c> if you'd like to prevent default handlers from processing the message.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.KeysAndButtons">
            <summary>
            Which keyboard modifier keys and mouse buttons were pressed when the event was fired.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.ScreenPosition">
            <summary>
            Mouse cursor position, in screen coordinates. Might be outside text control if the event is keyboard-induced.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlMouseEventArgs.TextControl">
            <summary>
            The originating text control.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlMouseEventArgs.FromCurrentPositionAndState(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets the arguments corresponding to the current mouse position onscreen and keyboard state.
            Might be outside the text control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.TextControl.TextControlMouseEventArgs.FromCurrentPositionAndStateIfOverTextControl(JetBrains.TextControl.ITextControl)" -->
        <member name="P:JetBrains.TextControl.TextControlScheme.HasErrorStripe">
            <summary>
            Whether the error stripe should be shown in the Text Control.
            The error stripe marks are added thru the document markers API, and the error stripe indicator state is specified right in the text control, with its <see cref="P:JetBrains.TextControl.ITextControl.ErrorStripeIndicatorState"/>.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlScrollType">
            <summary>
            Applies when the text control is scrolled to reveal a certain <see cref="T:JetBrains.TextControl.Coords.ITextControlPos">position</see>.
            Defines how the desired position will be accomodared inside the viewport area.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.DontCare">
            <summary>
            Scrolls so that the position is visible anywhere in the viewport.
            There're no other guarantees or heuristics applied.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.CenterInView">
            <summary>
            Scrolls so that the position were at about the center of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.TopOfView">
            <summary>
            Scrolls so that the position were at about the top of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.UpperHalf">
            <summary>
            Scrolls so that the position were in the upper half of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.LowerHalf">
            <summary>
            Scrolls so that the position were in the lower half of the viewport.
            The view is scrolled even if the position is already visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.Smart">
            <summary>
            <para>Smart scrolling mode. Should be used in most cases.</para>
            <para>Does minimal scrolling (or none at all) required to place the position into the viewport not too close to its edges.</para>
            </summary>
            <remarks>
            <para>If the position is already visible in the view and is not too close to the edges, no scrolling is performed. This fits for navigating adjacent occurences without the view jumping.</para>
            <para>Otherwise, places the position above the viewport center if it were above the viewport, and vice versa.</para>
            </remarks>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.SmartDirectionalUp">
            <summary>
            A flavor of <see cref="F:JetBrains.TextControl.TextControlScrollType.Smart"/> for special cases. Relaxes the “not too close to the edge” constraint: would not scroll against the direction if the target is at least visible.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlScrollType.SmartDirectionalDown">
            <summary>
            A flavor of <see cref="F:JetBrains.TextControl.TextControlScrollType.Smart"/> for special cases. Relaxes the “not too close to the edge” constraint: would not scroll against the direction if the target is at least visible.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.ErrorStripeAttributes.ErrorStripeColorHighlighterAttributeId">
            <summary>
            <para>If this highlighter, when applied to a document, is to be shown on the error stripe, defines the ID of another <see cref="T:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute"/> whose foreground color gives the error stripe mark color.</para>
            <para>When not set, an empty string is used here (and never <c>Null</c>).</para>
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.IHighlighter.Attributes">
            <summary>
            Gets the highlighter attributes, as defined by the highlighter registration.
            NO user customizations are reflected here. Use <see cref="M:JetBrains.TextControl.DocumentMarkup.IHighlighterEx.GetCustomizedHighlighterAttributes(JetBrains.TextControl.DocumentMarkup.IHighlighter,JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization)"/> to take user customizations into account.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Impl.Painting.TextPainter">
            <author>dsl</author>
        </member>
        <member name="M:JetBrains.TextControl.Impl.Painting.TextPainter.Attrs.Equals(JetBrains.TextControl.Impl.Painting.TextPainter.Attrs)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.TextControl.Impl.Painting.TextPainter.Attrs.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Impl.Painting.TextPainter.Attrs.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.TextControl.Impl.RowImpl.Compare(System.Object,System.Object)">
            <summary>
            Compares columns for search
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.TextControl.Impl.StandaloneErrorStripeDocument">
            <summary>
            Document (model + some of the controller) for the standalone text control version.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlImpl.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.Impl.TextControlImpl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.Impl.TextControlImpl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.</remarks>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlImpl.CanvasToNearestVisual(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            Note(H): once this used to be an <see cref="T:JetBrains.TextControl.ITextControl"/> member, but as it has no xmldoc, no usages, and no VS implementation, I've pushed it out to standalone impl only.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.TextControlImpl.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlImpl.Coords">
            <summary>
            Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlImpl.JetBrains#TextControl#ITextControl#Lifetime">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.WindowModelImpl.FocusTest">
            <summary>
            Emulats text control focus in tests.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.Impl.WindowModelImpl.CreateViewportAnchorCore(JetBrains.DataFlow.Lifetime)">
            <summary>
            Should create the anchoring rect core object. Do not use caching, the impl already does it instead of calling the method directly.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="T:JetBrains.TextControl.DocumentMarkup.IDocumentMarkupManager">
            <summary>
            Document markup factory.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.DocumentMarkup.DocumentMarkupModifiedEventArgs.IsInSync">
            <summary>
            Determines whether highlighter change is done in synchonized state of document and text editor. TODO: Think of better place to handle this state. 
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.IDocumentMarkup.AddHighlighter(JetBrains.Util.Key,JetBrains.Util.TextRange,JetBrains.TextControl.DocumentMarkup.AreaType,System.Int32,System.String,JetBrains.TextControl.DocumentMarkup.ErrorStripeAttributes,JetBrains.TextControl.DocumentMarkup.IHighlighterTooltipProvider,JetBrains.TextControl.DocumentMarkup.IGutterMarkInfo)">
            <summary>
            Adds highlighter with attributes from HighlighterAttributeRegistry
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.DocumentMarkup.IDocumentMarkup.BatchChangeCookie">
            <summary>
            Indicates that inside this disposable massive markup model change is expected. 
            Changed event will be fired upon cookie dispose
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.IDocumentMarkup.Document">
            <summary>
            Gets the document highlighted by this markup.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.DocumentMarkup.IDocumentMarkup.Changed">
            <summary>
            Fired when highlighter set is modified
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.TextControl.DocumentMarkup.DocumentMarkupManagerBase" -->
        <member name="M:JetBrains.TextControl.DocumentMarkup.DocumentMarkupBase.IsInSync">
            <summary>
            Document may be not synchronized with host document (VS). Ins this case we can not handle this change correctly in
            objects that operate on VS document (like VS Tagger).
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.DocumentMarkupBase.Document">
            <summary>
            Gets the document highlighted by this markup.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute.ForegroundColor">
            <summary>
            List of colors, delimited by ':'
            In case of VS2003 first COLORINDEX color will be used
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute.BackgroundColor">
            <summary>
            List of colors, delimited by ':'
            In case of VS2003 first COLORINDEX color will be used
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute.EffectColor">
            <summary>
            List of colors, delimited by ':'
            In case of VS2003 first COLORINDEX color will be used
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute.ErrorStripeColorHighlighterAttributeId">
            <summary>
            If this highlighter, when applied to a document, is to be shown on the error stripe, defines the ID of another <see cref="T:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute"/> whose foreground color gives the error stripe mark color.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.RunningTextControls">
            <summary>
            Maintains the list of currently opened text controls.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.RunningTextControls.TextControls">
            <summary>
            Gets the list of all the text controls that currently exist.
            Could be modified on the primary thread in the guarded context only.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.TextControlCreator">
            <summary>
            Can create text controls of various kinds.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlCreator.CreateShellTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the text control of the default kind in the current application environment, and attaches it to the given document (there might be multiple text controls for the same document).</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame">
              The logical owner of the text control in the UI hierarchy.
            </param>
            <returns>The new text control.</returns>
             <remarks>
             <para>Note that Visual Studio Integration uses other methods for attaching to existing Visual Studio text controls.</para>
             </remarks>
        </member>
        <member name="M:JetBrains.TextControl.TextControlCreator.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})">
            <summary>
            Creates a new text control for some document (there might be multiple text controls for the same document).
             The document and the type of the text control created are determined by the <paramref name="param"/>, for which any <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> inheritor could be used.
            </summary>
            <typeparam name="TTextControl">Type of the text control to create.</typeparam><param name="param">Text control context and parameters.</param>
            <returns>
            The new text control.
            </returns>
        </member>
        <member name="T:JetBrains.TextControl.TextControlManager">
            <summary>
            Base implementation for <see cref="T:JetBrains.TextControl.ITextControlManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlManager.myTypingHandlers">
            <summary>
            Aggregate. Manages adding/removing typing handlers and executing typing on them.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.#ctor(JetBrains.TextControl.TextControlCreator,JetBrains.TextControl.Impl.TextControlTypingHandlers,JetBrains.TextControl.Impl.TextControlProperties,JetBrains.TextControl.RunningTextControls,JetBrains.TextControl.Impl.TextControlManagerDerivativesLegacy,JetBrains.TextControl.DefaultTextControlSchemeManager)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.TextControlManager.TextControlInWindowFrame">
            <summary>
            In the <see cref="T:JetBrains.UI.WindowManagement.WindowFrame">window frame</see> <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.Bag">bag</see>, identifies the text control attached to the window frame.
            Guarded set/clear.
            </summary>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.CreateShellTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the text control of the default kind in the current application environment, and attaches it to the given document (there might be multiple text controls for the same document).</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame"></param>
            <returns>The new text control.</returns>
             <remarks>
             <para>Note that Visual Studio Integration uses other methods for attaching to existing Visual Studio text controls.</para>
             </remarks>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.CreateSimpleTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the simplest text control for the given document (there might be multiple text controls for the same document).</para>
             <para>The simplest and most lightweight implementation is used. Use specific <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> with the <see cref="M:JetBrains.TextControl.ITextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})"/> factory method if you care for the text control type.</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame"></param>
            <returns>The new text control.</returns>
        </member>
        <member name="M:JetBrains.TextControl.TextControlManager.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})">
            <summary>
            Creates a new text control for some document (there might be multiple text control for the same document).
            The document and the type of the text control created are determined by the <paramref name="param"/>, for which any <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> inheritor could be used.
            </summary>
            <typeparam name="TTextControl">Type of the text control to create.</typeparam>
            <param name="param">Text control context and parameters.</param>
            <returns>The new text control.</returns>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.CurrentFrameTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed or we have left the window frame that holds the text control. May be <c>Null</c>. Changes are guarded.
            Note that, unlike <see cref="P:JetBrains.TextControl.TextControlManager.LastFocusedTextControl"/>, this property resets to <c>Null</c> when the focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.LastFocusedTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed. May be <c>Null</c>. Changes are guarded.
            Note that this property does not lose its value if focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.Legacy">
            <summary>
            Legacy wrappers to expose the collections and property changes as raw CLR events.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.TextControls">
            <summary>
            Gets the list of all the text controls that currently exist.
            Could be modified on the primary thread in the guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.TextControlManager.VisibleTextControls">
            <summary>
            <para>Tracks the list of <see cref="P:JetBrains.TextControl.TextControlManager.TextControls">text controls</see> currently visible on screen. There is no specific order on the text visible controls. This collection is live.</para>
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Impl.TextControlProperties">
            <summary>
            Aggregates properties on the <see cref="T:JetBrains.TextControl.RunningTextControls"/>, such as the list of text controls currently visible, the text control to currently have focus, etc.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlProperties.CurrentFrameTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed or we have left the window frame that holds the text control. May be <c>Null</c>. Changes are guarded.
            Note that, unlike <see cref="F:JetBrains.TextControl.Impl.TextControlProperties.LastFocusedTextControl"/>, this property resets to <c>Null</c> when the focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlProperties.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlProperties.LastFocusedTextControl">
            <summary>
            Gets the text control that most recently had the keyboard focus, unless that text control has been destroyed. May be <c>Null</c>. Changes are guarded.
            Note that this property does not lose its value if focus wanders off to some tool window or another frame of such a kind.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlProperties.VisibleTextControls">
            <summary>
            Tracks the list of <see cref="F:JetBrains.TextControl.RunningTextControls.TextControls">text controls</see> currently visible on screen.
            </summary>
        </member>
        <member name="F:JetBrains.TextControl.Impl.TextControlProperties.myListFocusedTextControls">
            <summary>
            As the text control focus events are delayed for guarding, it may so happen that at some moment more than one text control reports having focus. Keep track of all the textcontrols claiming to have focus.
            Note: List not Hash because sometimes VS fails to fire an event (or we to catch it) and we erronousely consider some text control to still have focus. In this case we'd take the most-recently-focused text control from the list.
            </summary>
        </member>
        <member name="T:JetBrains.TextControl.Impl.TextControlManagerDerivativesLegacy">
            <summary>
            Like <see cref="T:JetBrains.TextControl.Impl.TextControlProperties"/>, but hosts legacy stuff like plain event and property wrappers for the retained-state data points.
            </summary>
        </member>
        <member name="P:JetBrains.TextControl.Impl.TextControlManagerDerivativesLegacy.FocusedTextControl">
            <summary>
            Gets the text control that currently has the keyboard focus. May be <c>Null</c>. Changes are guarded.
            </summary>
        </member>
        <member name="E:JetBrains.TextControl.Impl.TextControlManagerDerivativesLegacy.CaretMoved">
            <summary>
            Fires when the caret moves in the focused text control.
            Note: there're no caret move arguments because the event is also fired when the active text control changes.
            </summary>
        </member>
    </members>
</doc>
