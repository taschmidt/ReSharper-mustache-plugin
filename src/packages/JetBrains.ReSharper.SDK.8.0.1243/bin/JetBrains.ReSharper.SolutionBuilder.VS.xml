<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.SolutionBuilder.VS</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+Aborted}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.Aborted))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = SolutionBuilderVisualStudioThemedIcons.Aborted.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(SolutionBuilderVisualStudioThemedIcons.Aborted), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.Aborted&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Aborted">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Aborted Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Aborted.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+Aborted}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.Aborted))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.Aborted.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.Aborted&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Aborted.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Aborted Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Aborted"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+Aborted}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.Aborted))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.Aborted.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.Aborted&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildPending">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildPending Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildPending.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildPending}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildPending))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildPending.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildPending&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildPending.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildPending Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildPending"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildPending}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildPending))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildPending.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildPending&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningError">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildRunningError Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningError.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildRunningError}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildRunningError))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildRunningError.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildRunningError&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningError.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildRunningError Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningError"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildRunningError}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildRunningError))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildRunningError.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildRunningError&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildRunningWarning Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildRunningWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildRunningWarning Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildRunningWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildRunningWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildStatusFailed Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusFailed}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildStatusFailed Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusFailed}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusFailed&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildStatusSuccess Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusSuccess}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildStatusSuccess Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusSuccess}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusSuccess&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildStatusUpToDate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusUpToDate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildStatusUpToDate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusUpToDate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusUpToDate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildStatusWarning Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildStatusWarning Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+BuildStatusWarning}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.BuildStatusWarning&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.ClearSolution2">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ClearSolution2 Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.ClearSolution2.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+ClearSolution2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.ClearSolution2))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.ClearSolution2.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.ClearSolution2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.ClearSolution2.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ClearSolution2 Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.ClearSolution2"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+ClearSolution2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.ClearSolution2))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.ClearSolution2.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.ClearSolution2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Excluded">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Excluded Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Excluded.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+Excluded}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.Excluded))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.Excluded.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.Excluded&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Excluded.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Excluded Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.Excluded"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+Excluded}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.Excluded))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.Excluded.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.Excluded&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+RunBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.RunBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.RunBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.RunBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+RunBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.RunBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.RunBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.RunBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunningBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunningBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunningBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+RunningBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.RunningBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.RunningBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.RunningBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunningBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunningBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.RunningBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+RunningBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.RunningBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.RunningBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.RunningBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.StopBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the StopBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.StopBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+StopBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.StopBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.StopBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.StopBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.StopBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the StopBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.StopBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+StopBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.StopBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.StopBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.StopBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.TrackBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TrackBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.TrackBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+TrackBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.TrackBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.TrackBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.TrackBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.TrackBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TrackBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons.TrackBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.SolutionBuilder.VS.Resources.SolutionBuilderVisualStudioThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolutionBuilderVisualStudioThemedIcons+TrackBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolutionBuilderVisualStudioThemedIcons.TrackBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolutionBuilderVisualStudioThemedIcons.TrackBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolutionBuilderVisualStudioThemedIcons.TrackBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.BuildFileUtil.DeleteFile(JetBrains.Util.FileSystemPath)">
            <summary>
            delete 
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.BuildFileUtil.RemoveShadowFiles(JetBrains.Util.FileSystemPath)">
            <summary>
            used to remove shafow files created in DeleteFile function
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.BuildFileUtil.DeleteFile(JetBrains.Util.FileSystemPath,System.Boolean,System.Boolean)">
            <summary>
            selete file 
            </summary>
            <param name="file"></param>
            <param name="force">delete all if true</param>
            <param name="justLocked">delete just locked file if true</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.BuildFileUtil.DeleteFile(JetBrains.Util.FileSystemPath,System.Boolean)">
            <summary>
            selete file 
            </summary>
            <param name="file"></param>
            <param name="force">delete all if true</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.MSBuildFileHelper.ourXmlnsMsbuild">
            NOTE: namespace could be extracted from C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild\Microsoft.Build.Core.xsd file 
             
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.MSBuildFileHelper.Misc">
            <summary>
            this types used for parse xml file with
            solution build configuration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSMSBuildHostObjectHelper.ProcessProjectHost(JetBrains.ProjectModel.IProject,System.Action{JetBrains.ProjectModel.IProject,Microsoft.Build.BuildEngine.Target,Microsoft.Build.BuildEngine.BuildTask})">
            <summary>
            used to make cicle on projects host for task and target
            </summary>
            <param name="project"></param>
            <param name="action">action should be make for each target-task pair</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.EnumerateSolutionContexts(System.Boolean,System.Action{EnvDTE.SolutionContext})">
            <summary>
            call VSShell to enumerate solution contexts
            </summary>
            <param name="sync">make Invoke or BeginInvoke to enumerate (synchronous or asynchronous call)</param>
            <param name="contextHandler">this handler will be called for cincrete SolutionBuildApi</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.SafeShellCallAsync(System.Action)">
            <summary>
            Asynchro call in Main thread
            Locks are not performed
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.SafeShellCallAsyncWithLock(System.Action)">
            <summary>
            Asynchro call in main thread and get ReadLock
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.SafeShellCallSync(System.Action)">
            <summary>
            sunchro call in Main Thread
            Locks are not performed
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.LogComExceptionForFunc(System.Func{System.Int32})">
            <summary>
            log problem with call of COM interop (decode HRESULT and log its like CLR exception)
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.SafeEx(JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.VoidDelegate)">
            <summary>
            used to safe attach to VS events
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.RunVSCommand(JetBrains.VsIntegration.VSStd97CmdID)">
            <summary>
            run CS command from defined in VSConstants.GUID_VSStandardCommandSet97 command set
            </summary>
            <param name="cmdID"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Helpers.VSShellHelper.VoidDelegate">
            void delegate for SafeEx
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildUIManager">
            <summary>
            used to manipulate by build GUI
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType">
            <summary>
            This enumeration declares the types of log entries that can be used for activity
            log. We use this types instead of __ACTIVITYLOG_ENTRYTYPE constants.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem">
            <summary>
            This class defines an activity log entry with its all possible user defined
            properties.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.#ctor">
            <summary>
            Creates an empty log entry using default property values.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.#ctor(System.String)">
            <summary>
            Creates a log entry with the specified message.
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.#ctor(System.String,System.String)">
            <summary>
            Creates a log entry with the specified source and message.
            </summary>
            <param name="source">Source string</param>
            <param name="message">Message string</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.#ctor(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String)">
            <summary>
            Creates a log entry with the specified type and message.
            </summary>
            <param name="type">Type of the log entry</param>
            <param name="message">Message string</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.#ctor(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String)">
            <summary>
            Creates a log entry with the specified type, source and message.
            </summary>
            <param name="type">Type of the log entry</param>
            <param name="source">Source string</param>
            <param name="message">Message string</param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.Guid">
            <summary>
            Gets or sets the PaneGUID of the log entry.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.Hr">
            <summary>
            Gets or sets the HRESULT of the log entry.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.Message">
            <summary>
            Gets or sets the message of the log entry.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.Path">
            <summary>
            Gets or sets the path of the log entry.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.Source">
            <summary>
            Gets or sets the source of the log entry.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem.Type">
            <summary>
            Gets or sets the type of the log entry.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog">
            <summary>
            This static class provides methods to create VS activity log entries.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogItem)">
            <summary>
            Creates an activity logentry by the specified ActivityLogItem instance.
            </summary>
            <param name="item">Instance describing the log enrty properties</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String)">
            <summary>
            Creates an activity log entry with the specified source and message.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String,System.Guid)">
            <summary>
            Creates an activity log entry with the specified source, message and PaneGUID.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String,System.Guid,System.Int32)">
            <summary>
            Creates an activity log entry with the specified source, message, PaneGUID 
            and HRESULT.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
            <param name="hr">HRESULT of the entry</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String,System.Int32)">
            <summary>
            Creates an activity log entry with the specified source, message and HRESULT.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="hr">HRESULT of the entry</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String,System.Guid,System.Int32,System.String)">
            <summary>
            Creates an activity log entry with the specified source, message, PaneGUID, 
            HRESULT and path.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
            <param name="hr">HRESULT of the entry</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String,System.Guid,System.String)">
            <summary>
            Creates an activity log entry with the specified source, message, PaneGUID
            and path.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates an activity log entry with the specified source, message, HRESULT 
            and path.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="hr">HRESULT of the entry</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(System.String,System.String,System.String)">
            <summary>
            Creates an activity log entry with the specified source, message and path.
            </summary>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String)">
            <summary>
            Creates an activity log entry with the specified type, source and message.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String,System.Guid)">
            <summary>
            Creates an activity log entry with the specified type, source, message 
            and PaneGUID.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String,System.Guid,System.Int32)">
            <summary>
            Creates an activity log entry with the specified type, source, message, PaneGUID 
            and HRESULT.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
            <param name="hr">HRESULT of the entry</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String,System.Int32)">
            <summary>
            Creates an activity log entry with the specified type, source, message 
            and HRESULT.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="hr">HRESULT of the entry</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String,System.Guid,System.Int32,System.String)">
            <summary>
            Creates an activity log entry with the specified type, source, message, PaneGUID, 
            HRESULT and path.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
            <param name="hr">HRESULT of the entry</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String,System.Guid,System.String)">
            <summary>
            Creates an activity log entry with the specified type, source, message, PaneGUID
            and path.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="guid">PaneGUID of the entry</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates an activity log entry with the specified type, source, message, HRESULT 
            and path.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="hr">HRESULT of the entry</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLog.Print(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ActivityLogType,System.String,System.String,System.String)">
            <summary>
            Creates an activity log entry with the specified type, source, message 
            and path.
            </summary>
            <param name="type">Entry type</param>
            <param name="source">Event source</param>
            <param name="message">Event message</param>
            <param name="path">Path of the message</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.BoolAttribute">
            <summary>
            This abstract class defines an attribute with a simple boolean value.
            </summary>
            <remarks>
            The class is intended to derive new attributes having a simple bool value. 
            Do not use this class to add other properties to the attribute!
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.BoolAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of this attribute and sets its initial value.
            </summary>
            <param name="value">Initial attribute value.</param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.BoolAttribute.Value">
            <summary>
            Gets the value of this attribute.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.LaunchPadHelper.ParsePlainStringForTaskItem(System.String,System.String[]@,System.UInt32[]@,System.String[]@,System.Int32[]@)">
            <summary>
            parse string and save its details in out parameters
            </summary>
            <param name="buildMessage">message to parse</param>
            <param name="fileName"></param>
            <param name="lineNumber"></param>
            <param name="taskItemText"></param>
            <param name="taskItemFound"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.OutputPaneHandling">
            <summary>
            This class defines how output window pane exceptions should be handled.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.OutputPaneHandling.Silent">
            <summary>
            Exceptions should be caught and never raised.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.OutputPaneHandling.ThrowException">
            <summary>
            Exceptions should be raised.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.OutputPaneHandling.RedirectToGeneral">
            <summary>
            In case of exceptions, output should be redirected to the General pane.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.OutputPaneHandling.RedirectToDebug">
            <summary>
            In case of exceptions, output should be redirected to the Debug pane.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.StringAttribute">
            <summary>
            This abstract class defines an attribute with a simple string value.
            </summary>
            <remarks>
            The class is intended to derive new attributes having a simple string value. 
            Do not use this class to add other properties to the attribute!
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.StringAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of this attribute and sets its initial value.
            </summary>
            <param name="value">Initial attribute value.</param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.StringAttribute.Value">
            <summary>
            Gets the value of this attribute.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.WindowPaneNotFoundException">
            <summary>
            This class defines an exception describing that a Windows pane has not been found.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.WindowPaneNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of the exception with the specified message.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.WindowPaneNotFoundException.#ctor(System.Type)">
            <summary>
            Creates a new instance of the exception with a message related to the specified
            type.
            </summary>
            <param name="type">Type related to the exception</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.WindowPaneNotFoundException.#ctor(System.Type,System.Exception)">
            <summary>
            Creates a new instance of the exception with a message related to the specified
            type and an inner exception..
            </summary>
            <param name="type">Type related to the exception</param>
            <param name="innerException">Inner exception instance.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.WindowPaneNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the exception with the specified message and inner
            exception.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception instance.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.WindowPaneNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor for the exception instance.
            </summary>
            <param name="info">Serialization information</param>
            <param name="context">Streaming context information</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.Core.WindowPaneNotFoundException.MessageString(System.Type)">
            <summary>
            Creates a message string for the specified type.
            </summary>
            <param name="type">Type to create a message for.</param>
            <returns>Exception message.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.PaneNameAttribute">
            <summary>
            This attribute declares the name of the output window pane.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.InitiallyVisibleAttribute">
            <summary>
            This attribute declares the initial visibility of the output window pane.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ClearWithSolutionAttribute">
            <summary>
            This attribute declares if the output window pane should be cleared when the
            current solutiopn is closed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.ThreadSafeAttribute">
            <summary>
            This attribute declares if writes to the output window panes should be thread 
            safe or not.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition">
            <summary>
            This abstract class is intended to be a base class for uotput window pane 
            definitions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition.#ctor">
            <summary>
            Creates an instance of the class by obtaining the attributes decorating the 
            class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition.ClearWithSolution">
            <summary>
            Gets the flag indicating if the output window pane is to be cleared when the
            current solution is closed.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition.InitiallyVisible">
            <summary>
            Gets the flag indicating if the output window pane is initially visible or not.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition.IsSilent">
            <summary>
            Gets or internally sets the flag indicating if this output window pane is a 
            silent pane or not.
            </summary>
            <remarks>
            Silent panes do not provide output.
            </remarks>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition.Name">
            <summary>
            Gets the default name of the output window pane.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition.PaneGUID">
            <summary>
            Gets the PaneGUID of the output window pane.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition.ThreadSafe">
            <summary>
            Gets the flag indicating if writes to the output window pane are thread safe
            or not.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter">
            <summary>
            This static class is responsible for obtaining built-in output window panen and
            managing (creating, obtaining and deleting) window panes through output pane 
            definition types.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.CreatePane(System.Type)">
            <summary>
            Creates an output window pane according to the specified definition type.
            </summary>
            <param name="type">Pane definition type.</param>
            <returns>
            The newly created window pane.
            </returns>
            <remarks>
            The pane definition type should be a type deriving from WindowPaneDefinition.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.GetPane(System.Type)">
            <summary>
            Gets the output window pane according to the specified definition type.
            </summary>
            <param name="type">Pane definition type.</param>
            <returns>
            The newly created window pane.
            </returns>
            <remarks>
            The pane definition type should be a type deriving from WindowPaneDefinition.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.RemovePane(System.Type)">
            <summary>
            Deletes an output window pane according to the specified definition type.
            </summary>
            <param name="type">Pane definition type.</param>
            <returns>
            True, if the window pane is successfully deleted; otherwise, false.
            </returns>
            <remarks>
            The pane definition type should be a type deriving from WindowPaneDefinition.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.CreatePaneDefinition(System.Type)">
            <summary>
            Creates a pane definition type instance.
            </summary>
            <param name="type">Pane definition type.</param>
            <returns>
            Pane definition instance.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.CreateWindowPane(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition)">
            <summary>
            Creates an output window pane by using the SVsOutputWindow service.
            </summary>
            <param name="paneDef">Pane definition instance.</param>
            <returns>HRESULT indicating the success or failure.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.DeleteWindowPane(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition)">
            <summary>
            Deletes an output window pane by using the SVsOutputWindow service.
            </summary>
            <param name="paneDef">Pane definition instance.</param>
            <returns>HRESULT indicating the success or failure.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.GetWindowPane(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane@)">
            <summary>
            Gets an output window pane by using the SVsOutputWindow service.
            </summary>
            <param name="paneDef">Pane definition instance.</param>
            <param name="pane">Pane instance</param>
            <returns>HRESULT indicating the success or failure.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.HandleError(System.Type)">
            <summary>
            Handles the error related to the specified window pane definition type.
            </summary>
            <param name="type">Window pane definition type.</param>
            <returns>
            Output window pane to redirect the output to.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.Build">
            <summary>
            Gets the Build window pane instance.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.Debug">
            <summary>
            Gets the Debug window pane instance.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.General">
            <summary>
            Gets the General window pane instance.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.OutputPaneHandling">
            <summary>
            This property defines how output pane management exceptions should be handled.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.Silent">
            <summary>
            Gets a virtual output window pane that does not show any output.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.OutputWindowInstance">
            <summary>
            Gets the SVsOutputWindow service instance.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.BuildPane">
            <summary>
            This class is a definition for the Build output window pane.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.DebugPane">
            <summary>
            This class is a definition for the Debug output window pane.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.GeneralPane">
            <summary>
            This class is a definition for the General output window pane.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowAdapter.SilentPane">
            <summary>
            This class is a definition for the Silent virtual output window pane.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter">
            <summary>
            This class is a wrapper class around an IVsOutputWindowPane instance to manage
            output handling for the window pane.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.#ctor(JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputPaneDefinition,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Creates an output pane instance using the specified output pane definition and 
            IVsOutputWindowPane instance.
            </summary>
            <param name="paneDef">Pane definition instance</param>
            <param name="pane">Physical output window pane</param>
            <remarks>
            This constructor is to be used only by the OutputWindowAdapter class.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.Activate">
            <summary>
            Activates this output window pane, shows the pane in the output window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.Hide">
            <summary>
            Hides this output window pane, undisplays it in the output window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.Clear">
            <summary>
            Clears the content of the output window pane.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.Print(System.String)">
            <summary>
            Writes the specified string to the output of this window pane.
            </summary>
            <param name="output">String to send to the output.</param>
            <remarks>
            This operation is thread safe or not according to the ThreadSafe property. If
            the output window pane is silent, output is not send to any physical pane.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.Print(System.String,System.Object[])">
            <summary>
            Writes the specified formatted string to the output of this window pane.
            </summary>
            <param name="format">Format string to describe the output.</param>
            <param name="parameters">
            Parameters to be substituted into the format string.
            </param>
            <remarks>
            This operation is thread safe or not according to the ThreadSafe property. If
            the output window pane is silent, format is not send to any physical pane.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.Print(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the specified formatted string using the specified provider to the 
            output of this window pane.
            </summary>
            <param name="provider">Format provider</param>
            <param name="format">Format string to describe the output.</param>
            <param name="parameters">
            Parameters to be substituted into the format string.
            </param>
            <remarks>
            This operation is thread safe or not according to the ThreadSafe property. If
            the output window pane is silent, format is not send to any physical pane.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.PrintLine(System.String)">
            <summary>
            Writes the specified string and a new line character to the output of this 
            window pane.
            </summary>
            <param name="output">String to send to the output.</param>
            <remarks>
            This operation is thread safe or not according to the ThreadSafe property. If
            the output window pane is silent, output is not send to any physical pane.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.AddErrorListItem(System.String)">
            <summary>
            Add specifiedn formatted string to output and parse the string 
            for check its line and other properties for putting it to the error list window
            </summary>
            <param name="output">>String to send to the output.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.PrintLine(System.String,System.Object[])">
            <summary>
            Writes the specified formatted string and a new line character to the output 
            of this window pane.
            </summary>
            <param name="format">Format string to describe the output.</param>
            <param name="parameters">
            Parameters to be substituted into the format string.
            </param>
            <remarks>
            This operation is thread safe or not according to the ThreadSafe property. If
            the output window pane is silent, format is not send to any physical pane.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.PrintLine(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the specified formatted string and a new line character using the 
            specified provider to the output of this window pane.
            </summary>
            <param name="provider">Format provider</param>
            <param name="format">Format string to describe the output.</param>
            <param name="parameters">
            Parameters to be substituted into the format string.
            </param>
            <remarks>
            This operation is thread safe or not according to the ThreadSafe property. If
            the output window pane is silent, format is not send to any physical pane.
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.OutputString(System.String)">
            <summary>
            Outputs the specified string to this window pane.
            </summary>
            <param name="output">String to send to the output.</param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.DTEPane">
            <summary>
            represent DTE2 output pane 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.IsVirtual">
            <summary>
            Checks if this output pane is virtual or not.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.Name">
            <summary>
            Gets or sets the name of the output window pane.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter.ThreadSafe">
            <summary>
            Gets or sets the flag indicating if writes to the output window pane are 
            thread safe or not.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.VSVirtualOutputImpl.OutputTaskItemStringEx2(System.String,Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY,System.String,System.Int32,System.String,System.UInt32,System.UInt32,System.String,System.String,System.String)">
            <summary>
            now not implemented interface
            cause the supported VS is 2005
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.BuildTaskEndArg.#ctor(JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildTask,System.Boolean)">
            <summary>
            Task end handler parameters
            </summary>
            <param name="cmd"></param>
            <param name="result"></param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.BuildTaskEndArg.Result">
            <summary>
            result of the task execution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.BuildTaskEndArg.SourceTask">
            <summary>
            Task ref that completed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction">
            <summary>
            Runs the target application that is specified in the active configiration of the startup project in the current solution.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.ourSpawnedProcesses">
            <summary>
            The list of processes spawned by us. They should be killed when doing build-and-run.
            To be accessed from the UI thread only.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.CloseSpawnedProcesses">
            <summary>
            Sends a close control to the processes we have spawned that are still running.
            The processes are not killed, ie any “do you want to close” windows will hold them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.StartProcess">
            <summary>
            Starts the startup project process.
            Reports to the user and returns <c>Null</c> on failures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.OnSpawnedProcessExited(System.Object,System.EventArgs)">
            <summary>
            The process has exited, unwatch it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.NotifyTargetProcessStarted">
            <summary>
            Gets whether to notify of target process started.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.WaitForTargetProcess">
            <summary>
            Gets whether to wait for the target process to exit before running the build-and-run action.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.WaitProcessPopup">
            <summary>
            Popups up a window that says which processes we're waiting for, and closes when done waiting.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.WaitProcessPopup.WaitFor(System.Collections.Generic.ICollection{System.Diagnostics.Process})">
            <summary>
            Spawns the popup, returns whether to go on building.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.WaitProcessPopup.CheckProcesses">
            <summary>
            Re-check the running processes.
            Update text, close if done.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.WaitProcessPopup.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closing"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.RunStartupProjectAction.WaitProcessPopup.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.BuildAndRunSolutionAction">
            <summary>
            Builds the solution using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.BuildAndRunActionBase">
            <summary>
            Builds either the solution or the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.BuildAndRunActionBase.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.BuildAndRunActionBase.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.BuildAndRunActionBase.BuildThruHandler">
            <summary>
            Waits for the build to complete.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.BuildAndRunActionBase.ProjectOrSolution">
            <summary>
            Specifies what to build.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Actions.BuildAndRunProjectAction">
            <summary>
            Builds the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.ProjectBuildUIState">
            <summary>
            used to save information about project build state in time of building
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuilderBrowserPresenter.GetBuildImage(JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.ProjectBuildUIState)">
            <summary>
            get images correspond to current build state and error status
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildStatusPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Option.SolutionBuilderPage.Commit">
            <summary>
            Fires when the page is committed with OK.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Option.SolutionBuilderPage.PageCreate">
            <summary>
            Fires when the SolutionBuilderPage is shown.
            Allows to add more controls to it (as a stack panel). Sink <see cref="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.Option.SolutionBuilderPage.Commit"/> to save on OK.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildBrowserDescriptor.myIsAborted">
            <summary>
            aborted flag
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildBrowserDescriptor.CheckMessageVisibility(JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildMessageParsed)">
            <summary>
            check if the message should be visible in view by flags
            </summary>
            <param name="msg"> messahe to check</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildBrowserDescriptor.OnSolutionBuilderPropertiesChanged(System.Object,System.EventArgs)">
            <summary>
            occurs when solution builder special properties are changed
            to eneble and disble out combo box
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildBrowserDescriptor.ProviderComboEnter(System.Object,System.EventArgs)">
            <summary>
            event from providers combo
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildBrowserDescriptor.AddMessageToModel(JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.ProjectBuildUIState,JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildMessageParsed)">
            <summary>
            add message with its path to project
            </summary>
            <param name="state"></param>
            <param name="messageParsed"></param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IDE.UI.SolutionBuildBrowserDescriptor.CurrentBuildStatus">
            <summary>
            return current status of the all build
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildOptimizer">
            <summary>
            used to optimize building files 
            use information that some projects are uptodate
            
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.IVSProjectBuildListeners">
            <summary>
            this i-dace used for make call to listeners that want to make some operation with projects in build time
            like a patchers or optimisers
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuildProvider">
            <summary>
            used to control build process, to run and stop builds
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuildProvider.RunOperation(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            run operation on solution
            </summary>
            <param name="operation"></param>
            <returns>true if executed and false in other case</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuildProvider.RunOperation(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,JetBrains.ProjectModel.IProject)">
            <summary>
            run operation on project
            </summary>
            <param name="operation"></param>
            <param name="project"></param>
            <returns>true if executed and false in other case</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuildProvider.AbortOperation">
            <summary>
            Abort current executed operation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuildProvider.IsBuildRunning">
            <summary>
            return true in case of handling build operation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.RunOperation(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,JetBrains.ProjectModel.IProject)">
            <summary>
            Run operation and on its referenced projects
            </summary>
            <param name="operation"></param>
            <param name="project"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.RunOperation(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            run operation on solution
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.FinishBuild">
            <summary>
            handler that catch tasks chain execution complete
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.InternalBuildOp(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,System.Func{System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject}})">
            <summary>
            internal operation call
            </summary>
            <param name="operation"></param>
            <param name="projectBuildListCreator"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.RunTaskBuild(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            this function called for build next available project build task
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.GetProjectsToBuild(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject})">
            <summary>
            list of projects to build
            used to get list of projects that has to be build on next level
            </summary>
            <returns>return list of projects to build</returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.OptSolutionBuilderProvider.IVSProjectBuildListeners">
            <summary>
            this i-dace used for make call to listeners that want to make some operation with projects in build time
            like a patchers or optimisers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildOptimizer.BuildOperationCheck(JetBrains.ProjectModel.IProject)">
            <summary>
            implemented functionality for checking build projects
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildOptimizer.AfterProjectBuildFinish(JetBrains.ProjectModel.IProject)">
            <summary>
            check if project successefully build, if true then save its signature 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildOptimizer.AfterProjectBuildStart(JetBrains.ProjectModel.IProject)">
            <summary>
            before build clear signatures
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildOptimizer.Manager">
            <summary>
            uset to get signature manager component
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildTask.ExecuteAsync(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,System.Action{JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.BuildTaskEndArg})">
            <summary>
            async execution of the project operation
            </summary>
            <param name="operation">operation performed on project</param>
            <param name="endHadler">this handler will be called when task completed</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildTask.CreateProjectBuildAdapter(JetBrains.ProjectModel.IProject)">
            <summary>
            Used to add project under control for its build
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildTask.Build">
            <summary>
            simple build of project
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildTask.EndHandlerInvoke">
            <summary>
            call in any case when command is end
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildTask.PreBuildActions">
            <summary>
            used to make some actions before build
            </summary>
            <returns>continue build or not</returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildTask.Result">
            <summary>
            result of command execution
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSSolutionBuilderProvider.RunOperation(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            run operation on solution
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSSolutionBuilderProvider.RunOperation(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,JetBrains.ProjectModel.IProject)">
            <summary>
            run operation on project
            </summary>
            <param name="operation"></param>
            <param name="project"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSSolutionBuilderProvider.GetProjectUniqueName(JetBrains.ProjectModel.IProject)">
            <summary>
            helper function to get project unique name
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildMessageParsed.Parse(JetBrains.ReSharper.SolutionBuilder.VS.BuildMessageWildArgs)">
            <summary>
            parse message from VS output
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildMessageParsed.ProjectFile">
            <summary>
            return project file where error is located
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.SignatureManager">
            <summary>
            This class used to common  work with signatures in stanalone component
            the signatures function can be used in different cases
            for tests, in build agent and in Build providers also
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.SignatureManager.RemoveSinature(JetBrains.ProjectModel.IProject)">
            <summary>
            clear project signature
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.SignatureManager.CheckProjectSignature(JetBrains.ProjectModel.IProject,System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath}@)">
            <summary>
            check project for its signature and return status and collection of the libraries which should be copied to output
            </summary>
            <param name="project"></param>
            <param name="libFilesToCopy"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.IEnvBuildAgent">
            this i-face used for controllers that listen environment
            for detect build operation
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Impl.MSBuildConfiguration.myConfiguration">
            <summary>
            Defines the two-component build configuration.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.MSBuildConfiguration.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.MSBuildConfiguration.ApplyConfiguration(Microsoft.Build.BuildEngine.BuildPropertyGroup)">
            <summary>
            Applies the build configuration to the MSBuild project properties group.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.MSBuildConfiguration.ListOfProjectToBuildByLevels">
            <summary>
            this field contains list of the project to build
            sorted by levels
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildHostObjectController">
            <summary>
            in this fuction host object for the tasks are replaced by our custom
            for correct build MSBUild task
            IsRealBuild method should be overriden
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildHostObjectController.AfterProjectBuildStart(JetBrains.ProjectModel.IProject)">
            <summary>
            in this fuction host object for the tasks are replaced by our custom
            for correct build MSBUild task
            IsRealBuild method should be  overriden
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildHostObjectController.AfterProjectBuildFinish(JetBrains.ProjectModel.IProject)">
            <summary>
            in this fuction host object for the tasks are removed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildHostObjectController.IsHostToReplace(Microsoft.Build.Framework.ITaskHost)">
            <summary>
            check host object to determine if is it neccesary to replece host object
            Now the IVsMSBuildTaskFileManager.IsRealBuildOperation critical for us
            therefore this host shpould be replaced or
            this method should return true for our build operations
            </summary>
            <param name="host">host obejct of the project task pairs</param>
            <returns>TRUE if should be replaced</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildHostObjectController.RestoreOriginalHost(JetBrains.ProjectModel.IProject)">
            <summary>
            restore original host objects
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildHostObjectController.HostObjectInfo.#ctor(Microsoft.Build.Framework.ITaskHost,Microsoft.Build.Framework.ITaskHost)">
            <summary>
            create host object information storage
            </summary>
            <param name="originalHostObject">original host</param>
            <param name="temporaryHostObject">temp host object</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildHostObjectController.HostObjectInfo.HostObjectLocationInfo">
            <summary>
            used to save infromation about location of the host object
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildProjectsController">
            <summary>
            this class used for control MSBuild project
            because there are some problems with its build
            for example we have to control Host objects and output targets
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.MSBuildProjectsController.AfterProjectBuildFinish(JetBrains.ProjectModel.IProject)">
            <summary>
            now just this method is overrided because we have to set TargetPath for project that already built
            if don't set it therefore all depenedent projects will not find its binary pathes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.MSBuildProjectTransformer">
            <summary>
            Runs searches and transformations on an MSBuild project.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.MSBuildProjectTransformer.ParseSolutionFileLevels(System.Xml.XmlDocument)">
            <summary>
            In a solution-induced project files, looks for per-config build levels.
            The outer list contains levels.
            The inner list contains project identities.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.ReferencesProjectsOrderer.GetOrderedProjectList(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject})">
            <summary>
            return list of projects reference,
            the less index has project that does not reference other objects in list
            used for dependent build
            </summary>
            <param name="initialList"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildAgent.myBuildEvents">
            <summary>
            build events of the VS
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildAgent.GetOrCreateIProjectStatus(System.String)">
            <summary>
            get project status and if it is not created then add anew
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildAgent.GetOperationByVSBuildAction(EnvDTE.vsBuildAction)">
            <summary>
            Convert from vsBuildState to our internal enum foir the operations types
            </summary>
            <param name="vsBuildAction">vs typed build action</param>
            <returns>build action converted to PerformingOperation enum type</returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSRootProjectBuildListCreator">
            <summary>
             get list of projects to build from 
            VC solution configuration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSRootProjectBuildListCreator.GetList(JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.IProject,System.Func{JetBrains.ProjectModel.ISolution,System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject}})">
            <summary>
            interface implementations
            get list projects to build used the root project to collect all its references
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSRootProjectBuildListCreator.GetList(JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.IProject)">
            <summary>
            interface implementations
            get list projects to build used the root project to collect all its references
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSRootProjectBuildListCreator.ProcessProjectToList(System.Collections.Generic.ICollection{JetBrains.ProjectModel.IProject},System.Collections.Generic.IDictionary{JetBrains.ProjectModel.IProject,System.Boolean},JetBrains.ProjectModel.IProject)">
            <summary>
            used to enumerate all project references to
            create list of projects needed to build
            like a chain from root project
            </summary>
            <param name="projectsDictionary">dictionary off all existing projects</param>
            <param name="rootProject">root project for curent recursive branch</param>
            <param name="outProjects">out list of projects</param>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi">
            <summary>
            This class used to get information about all builds
            and to inform builder about actions performed by VS(via Agent) or by BuildProviders
            It is a backend of the SolutionBuilder2
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.GetInstance(JetBrains.ProjectModel.ISolution)">
            <summary>
            get solution builder instance
            </summary>
            <param name="solution"></param>
            <returns></returns>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.BuildAborted">
            <summary>
            fired when build aborted
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.OutputLine">
            <summary>
            called when output line appear
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.ProjectBuildFinished">
            <summary>
            Fired when project build finished
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.ProjectBuildStarted">
            <summary>
            Fired when project build started
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.SolutionBuildFinished">
            <summary>
             Fired when solution build finished
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.SolutionBuildStarted">
            <summary>
             Fired when solution build started
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.IsSolutionBuilderActive">
            <summary>
            return proprty that correspond to active or inactive state of this solution builder
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.SelectedSolutionBuildProviderName">
            <summary>
            return property described selected solutionbuilder build provider
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.SolutionBuildProvidersList">
            <summary>
            return list of the names for existing solution build providers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.GetProjectBuildApi(JetBrains.ProjectModel.IProject)">
            <summary>
            get project build API
            this function used to get information about pointed project status(error and operational)
            and then make change it  state (inform about operations performed on objects, see IProjectBuildApi) 
            </summary>
            <param name="project">searched project</param>
            <returns>return project API</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.RaiseWriteBuildMessage(JetBrains.ProjectModel.IProject,System.String)">
            <summary>
            Write message to output
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.RaiseStartSolutionBuild(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject})">
            <summary>
            call to inform builder that solution build is started (it's mean build in gloabal mind)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.RaiseFinishSolutionBuild(System.Boolean)">
            <summary>
            call to inform builder that solution build is end
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.RaiseAbort">
            <summary>
            call when build is aborting
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.BuiltProjects">
            <summary>
            enum of projects already built
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.ErrorState">
            <summary>
            error state of the solution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.PerformingOperation">
            <summary>
            Get information about build operation processed in current moment
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilderWithApi.ProjectsToBuild">
            <summary>
            enumeration of projects that should be build
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.myProjects">
            <summary>
            used internally to collect info about project that processed
            and will be processed
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.mySelectedProvider">
            <summary>
            back field for selected provider
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.#ctor(JetBrains.ProjectModel.ISolution)">
            <summary>
            Init builder
            MAIN constructor for project build Information
            used as context for processing projects
            </summary>
            <param name="solution"> solution in which our builder will live</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.Abort">
            <summary>
            call to abort build
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.GetProjectBuildApi(JetBrains.ProjectModel.IProject)">
            <summary>
            get project status and if it is not created then add anew
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.RaiseAbort">
            <summary>
            invoke event about aborting
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.RaiseFinishSolutionBuild(System.Boolean)">
            <summary>
            fire End build for solution event
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.RaiseStartSolutionBuild(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation,System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject})">
            <summary>
            call to inform builder that solution build is started (it's mean build in gloabal mind)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.TypesLoaded(System.Collections.Generic.ICollection{System.Type})">
            <summary>
            load all solution build provider types
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.RaiseProjectBuildStarted(JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi)">
            <summary>
            call to inform contex that project build is started
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.RaiseProjectBuildFinished(JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi)">
            <summary>
            call to inform contex that build of project is end
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.PreBuildOperations(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            make prebuild operations
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.BuildProjectOp(JetBrains.ProjectModel.IProject,JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            method used to run operation by handler of build
            PerformingOperation performed on project
            </summary>
            <param name="project"></param>
            <param name="operation"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.BuildSolutionOp(JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            method used to run operation by handler of build
            PerformingOperation performed on project
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.ActivateOutputWindow">
            <summary>
            Used to activate output window in VS
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.GetIProjectBuildApiInternal(JetBrains.ProjectModel.IProject)">
            <summary>
            used to get project status and create it if not exist
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.ProjectsList">
            <summary>
            assing simple collection to internal dictionary
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.Solution">
            <summary>
            solution ref
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.BuildAborted">
            <summary>
            fired when build aborted
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.OutputLine">
            <summary>
            called when output line appear
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.ProjectBuildFinished">
            <summary>
            Fired when project build ended
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.ProjectBuildStarted">
            <summary>
            Fired when project build started
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.SolutionBuildFinished">
            <summary>
             Fired when solution build ended
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl.SolutionBuildStarted">
            <summary>
             Fired when solution build started
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSSolutionBuildListCreator">
            <summary>
            get list of projects from  VC solution configuration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildAdapter.StopBuild(System.Boolean)">
            <summary>
            stop project build
            </summary>
            <param name="async">if tru then call will be async is false then sync</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildAdapter.BuildProject">
            <summary>
            run build project
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildAdapter.IsUpToDate">
            <summary>
            Check if project is uptodate
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildAdapter.QueryBuildStatus">
            <summary>
            get build status
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.ProjectBuildStatusArg">
            <summary>
            used to catch info about project build events
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.IBuilderProjectInfo">
            <summary>
            used to get information about project
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.IBuilderProjectInfo.AllOutputFiles">
            <summary>
            return collection of the all output files of the project
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.IBuilderProjectInfo.AssemblyOutputFiles">
            <summary>
            return enumeration of the assembly output files (usually bin catalog)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.IBuilderProjectInfo.IntermediateOutputFiles">
            <summary>
            return enumeration of the assembly intemediate files (usually Debug or Release catalog)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.IBuilderProjectInfo.IsManagedProject">
            <summary>
            return true if project is has managed configuration
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.IBuilderProjectInfo.OutputAssemblyBinaryFilePath">
            <summary>
            get path to the output binary of the project
            only for management projects
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.IBuilderProjectInfo.Project">
            <summary>
            project info
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.MarkProjectUpToDate">
            <summary>Mark project that is up to date</summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.ExcludeFromBuild">
            <summary>Say project to not build</summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.AbortOnProject">
            <summary>Say that project build is aborted</summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.RaiseStartProjectBuild">
            <summary>Used to say Solution builder that project build is started</summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.RaiseFinishProjectBuild(JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus)">
            <summary>Used inform that project build is end</summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.ErrorStatus">
            <summary>Error status of the build</summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.Project">
            <summary>Project reference</summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.SolutionBuildApi">
            <summary>API of the build operation</summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.IProjectBuildApi.State">
            <summary>State of the current project</summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.ProjectBuildApiImpl">
            <summary>
            This class used for provide information about status of project in build time
            and change state of the project
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.ProjectBuildApiImpl.#ctor(JetBrains.ProjectModel.IProject,System.Int32,JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSSolutionBuilderImpl)">
            <summary>
            constructor for ProjectBuildApiImpl
            Create and initialize internal variables
            </summary>
            <param name="project"></param>
            <param name="index">index for build</param>
            <param name="globalInfoProvider"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.ProjectBuildApiImpl.ExcludeFromBuild">
            <summary>
            say project to not build
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.ProjectBuildApiImpl.RaiseStartProjectBuild">
            <summary>
            used to inform context that project build is started
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.ProjectBuildApiImpl.RaiseFinishProjectBuild(JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus)">
            <summary>
            used t inform context that project build is end
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.ProjectBuildApiImpl.SolutionBuildApi">
            <summary>
            get context of the build operation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Signature.IBuildProjectSignature.WriteSignature(System.IO.StreamWriter)">
            <summary>
            write signature to stream
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Signature.IBuildProjectSignature.ReadSignature(System.IO.StreamReader)">
            <summary>
            read signature from stream
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Signature.IBuildProjectSignature.CheckBuildStatus(JetBrains.ReSharper.SolutionBuilder.VS.Signature.IBuildProjectSignature,System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath}@)">
            <summary>
            main method
            used to check if rebuild is needed
            compare signatures
            </summary>
            <param name="old">old signature to compare</param>
            <param name="libFilesToCopy">return list of libraries to copy to output</param>
            <returns>return action taht should be made</returns>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.IBuildProjectSignature.ProjectName">
            <summary>
            return project name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.IBuildProjectSignature.SignatureVersion">
            <summary>
            version of signature
            realize ti check different version if signature implementation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.VSBuildProjectSignature.#ctor(System.IO.StreamReader)">
            <summary>
            construct signature from file
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.VSBuildProjectSignature.CheckBuildStatus(JetBrains.ReSharper.SolutionBuilder.VS.Signature.IBuildProjectSignature,System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath}@)">
            <summary>
            main method
            used to check if rebuild is needed
            change action taht should be made
            </summary>
            <param name="old"></param>
            <param name="libFilesToCopy">return list of libraries to copy to output</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.VSBuildProjectSignature.CreateSignature(System.IO.StreamReader)">
            <summary>
            create signature from file
            </summary>
            <param name="reader"> reader where signature is stored</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.VSBuildProjectSignature.AddFile(JetBrains.Util.FileSystemPath,System.DateTime)">
            <summary>
            internal function to save depenedent file
            </summary>
            <param name="path"></param>
            <param name="timeStamp"></param>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Signature.Impl.VSBuildProjectSignature.CollectedFiles">
            <summary>
            Collected by file collector.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSBuildProjectInfo.myOutputFileNames">
            <summary>
            save list of possible output of assembly
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSBuildProjectInfo.AllOutputFiles">
            <summary>
            return collection of the all output files of the project
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSBuildProjectInfo.AssemblyOutputFiles">
            <summary>
            return enumeration of the assembly output files (usually bin catalog)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.VS.Impl.VSBuildProjectInfo.IntermediateOutputFiles">
            <summary>
            return enumeration of the assembly intemediate files (usually Debug or Release catalog)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus">
            <summary>
            Whether the project has errors, warnings, etc, or not.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus.Clean">
            <summary>
            No errors, no warnings.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus.Warnings">
            <summary>
            The project has some warnings (but no errors).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus.Errors">
            <summary>
            The project has some errors (maybe also warnings).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus.UpToDate">
            <summary>
            The project was up-to-date and was not built, so the error/warning count is irrelevant.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.ProjectBuildState.Excluded">
            <summary>
            Will not be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.ProjectBuildState.Pending">
            <summary>
            Will be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.ProjectBuildState.Running">
            <summary>
            Is currently being built.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.ProjectBuildState.Completed">
            <summary>
            Has been built (or skipped due to being up-to-date, see error status).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.ProjectBuildState.Aborted">
            <summary>
            Has been aborted
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger">
            <summary>
            This class used for log messages thats VS generate in build time
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger">
            <summary>
            this i-face used for get information from some source of message logs source
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger.StartListenMessages">
            <summary>
            start listen messages from providers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger.StopListenMessages">
            <summary>
            stop listen messages
            </summary>
            <returns>returns filled global messages</returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger.StartListenProjectMessages(JetBrains.ProjectModel.IProject)">
            <summary>
            add project as messages source
            </summary>
            <param name="project"> project to listen</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger.StopListenProjectMessages(JetBrains.ProjectModel.IProject)">
            <summary>
            stop listen project messages and
            get messages coresponded to project for final its processing
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger.IsListenProject(JetBrains.ProjectModel.IProject)">
            <summary>
            check if logger already subscribed on project
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger.LogBuildMessage(System.String,System.String,System.Object[])">
            <summary>
            used to log build message
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.ISolutionBuilderLogger.LogBuildMessage(System.String,System.String)">
            <summary>
            used to log build message
            </summary>
            <param name="projectName">project name for which message appear</param>
            <param name="msg">message to log</param>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.myMultyProcIDToProjectCache">
            used to identify message
             first name of projec, secin id that will be used with message
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.myEvents">
            <summary>
            used to subscribe on output events
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.AddMessagesCollection">
            <summary>
            in this function messages are added to correspond message collection
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.OnNewMessage(JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.ProjectMessage)">
            <summary>
            new message arrive 
            process it
            </summary>
            <param name="msg">message</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.StartHandling">
            <summary>
            start handling messages in output pane
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.GetMessageItems">
            <summary>
            internal function that process mesages for current project
            messages come from output pane
            Should be called in GUI thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.StartListenMessages">
            <summary>
            used for attach to events from output window
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.StopListenProjectMessages(JetBrains.ProjectModel.IProject)">
            <summary>
            get messages coresponded to project for final its processing
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.IsListenProject(JetBrains.ProjectModel.IProject)">
            <summary>
            check if logger already subscribed on project
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.LogBuildMessage(System.String,System.String)">
            <summary>
            simply call new message add
            </summary>
            <param name="projectName"></param>
            <param name="msg">message to log</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.OnPaneClearing(EnvDTE.OutputWindowPane)">
            <summary>
            fired when pane is cleared
            </summary>
            <param name="pPane"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.Components.VSBuildLogger.OnPaneUpdated(EnvDTE.OutputWindowPane)">
            <summary>
            occures when some information shown in output window
            </summary>
            <param name="pPane"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildAdapter.#ctor(JetBrains.ProjectModel.IProject)">
            <summary>
            create adapter with output pane equal standart Build pane
            call other constructor!!! to init all internal props
            </summary>
            <param name="project">project for which adapter will be created</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildAdapter.#ctor(JetBrains.ProjectModel.IProject,JetBrains.ReSharper.SolutionBuilder.VS.IDE.VSWindows.Impl.VSWindowsTool.OutputWindowPaneAdapter)">
            <summary>
            Create adapter for project and with output forwarded to passe pane
            </summary>
            <param name="project">project to adapt</param>
            <param name="paneAdapter">for output of build if null the default Buil pane will be used</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildAdapter.BuildProject">
            <summary>
            run build project
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildAdapter.IsUpToDate">
            <summary>
            Check if it is project is uptodate
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildAdapter.Init(JetBrains.ProjectModel.IProject)">
            <summary>
            should be called in main thread
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.VSProjectBuildAdapter.QueryBuildStatusSync">
            <summary>
            snync version of the query build status function
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.Impl.BuildProviders.ProjectAdapterBuildEventArgs">
            <summary>
            class used in events handlers
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuildFinishedStatusArg">
            <summary>
            used to catch info about solution build events
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuildFinishedStatusArg.#ctor(JetBrains.ReSharper.SolutionBuilder.VS.BuildErrorStatus,System.Int32,JetBrains.ReSharper.SolutionBuilder.VS.SolutionBuilder2.Operation)">
            <summary>
            main constructor 
            </summary>
            <param name="result">result of build</param>
            <param name="projectsBuiltCount">count of project that already built</param>
            <param name="operation">operation performed</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.VS.IProcessRunnerHostController.Run">
            <summary>
            sync call
            return result of run
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder">
            <summary>
            Invokes Visual Studio to build the projects.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.myIsReportingErrors">
            <summary>
            This is a supplementary component to wind up VS builds and track their progress.
            Therefore, most of its warnings are non-fatal, even though we should be aware of them and should try to fix them.
            Set up by Ctor, tells whether we're reporting non-fatal errors.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.CreateBuildSessionFromVsSolution(JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a session by adding all the projects from the solution.
            // TODO: toposort
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.ProtoGetProjectLayers(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject})">
            <summary>
            [PROTOTYPE IMPLEMENTATION, INTERNAL USE ONLY]
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.InitAttachDevenv">
            <summary>
            Listen to the DEVENV events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.InitSelfPromotion">
            <summary>
            Promotes self as the active implementation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.BeginRun(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.ReSharper.SolutionBuilder.ISolutionBuilder.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.CreateSession(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.VS.SolutionBuilder.VsSolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
    </members>
</doc>
