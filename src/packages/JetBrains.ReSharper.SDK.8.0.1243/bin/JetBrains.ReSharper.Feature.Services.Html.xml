<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Feature.Services.Html</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Feature.Services.Html.resources.HtmlResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.resources.HtmlResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.resources.HtmlResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.resources.HtmlResources.HtmlDescriptions">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesHtmlThemedIcons+HtmlTagAttributeIcon}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ServicesHtmlThemedIcons.HtmlTagAttributeIcon))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesHtmlThemedIcons.HtmlTagAttributeIcon.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ServicesHtmlThemedIcons.HtmlTagAttributeIcon), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesHtmlThemedIcons.HtmlTagAttributeIcon&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeIcon">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlTagAttributeIcon Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeIcon.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesHtmlThemedIcons+HtmlTagAttributeIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesHtmlThemedIcons.HtmlTagAttributeIcon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesHtmlThemedIcons.HtmlTagAttributeIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesHtmlThemedIcons.HtmlTagAttributeIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeIcon.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlTagAttributeIcon Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeIcon"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesHtmlThemedIcons+HtmlTagAttributeIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesHtmlThemedIcons.HtmlTagAttributeIcon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesHtmlThemedIcons.HtmlTagAttributeIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesHtmlThemedIcons.HtmlTagAttributeIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlTagAttributeValueIcon Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesHtmlThemedIcons+HtmlTagAttributeValueIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlTagAttributeValueIcon Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesHtmlThemedIcons+HtmlTagAttributeValueIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesHtmlThemedIcons.HtmlTagAttributeValueIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagIcon">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlTagIcon Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagIcon.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesHtmlThemedIcons+HtmlTagIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesHtmlThemedIcons.HtmlTagIcon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesHtmlThemedIcons.HtmlTagIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesHtmlThemedIcons.HtmlTagIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagIcon.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlTagIcon Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons.HtmlTagIcon"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Html.Resources.ServicesHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesHtmlThemedIcons+HtmlTagIcon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesHtmlThemedIcons.HtmlTagIcon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesHtmlThemedIcons.HtmlTagIcon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesHtmlThemedIcons.HtmlTagIcon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.CodeCompletion.HtmlFooterItem.Image">
            <summary>
            Gets item image
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Html.CodeStructure.HtmlCodeStructureElement`1.GetPresentation(JetBrains.UI.TreeView.PresentationState)">
            <summary>
            
            </summary>
            <returns>Triple of image, main text and additional description</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Html.HtmlEntities.HtmlEntitiesWalker.#ctor(JetBrains.ReSharper.Psi.Html.Parsing.IHtmlTokenNodeTypes,JetBrains.ReSharper.Feature.Services.Html.HtmlEntities.HtmlEntitiesNodeTypeSet)">
            <summary>
            Html entities iterator
            </summary>
            <param name="tokenTypes"></param>
            <param name="htmlEntitiesNodeTypeSet"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.HtmlEntities.HtmlEntity.IsNumeric">
            <summary>
            Is original passed entity was numeric
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Html.Navigation.HtmlDeclarationSearch">
            <summary>
            Removes go-to-delcaration feature for some html specific declared elements...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Html.SelectEmbracingConstruct.HtmlTokenPartSelection`1.GetParentCalculationData(JetBrains.ReSharper.Psi.Parsing.TokenNodeType,System.String)">
            <returns>
            prefix length, suffix length, is token selection allowed
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlLexerUtils.GetHeaderByFooter(JetBrains.ReSharper.Psi.Parsing.CachingLexer,JetBrains.ReSharper.Psi.Html.Parsing.IHtmlTokenNodeTypes,JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlLexerUtils.TagNameContainerInfo)">
            <summary>
            Position lexer at header's tag name. Return true if successful. Lexer position otherwise is undefined.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlLexerUtils.GetFooterByHeader(JetBrains.ReSharper.Psi.Parsing.CachingLexer,JetBrains.ReSharper.Psi.Html.Parsing.IHtmlTokenNodeTypes,JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlLexerUtils.TagNameContainerInfo)">
            <summary>
            Position lexer at footer's tag name. Return true if successful. Lexer position otherwise is undefined.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Html.TypingAssist.HtmlLexerUtils.SkipAnotherLanguageInjects(JetBrains.ReSharper.Psi.Parsing.CachingLexer,JetBrains.ReSharper.Psi.Html.Parsing.IHtmlTokenNodeTypes)">
            <summary>
            Skips injects backwards
            Returns if injects contain only another language tokens or text/spaces/errors
            Also returns true if no injects found
            If inject contains other tokens (for example, ASP directive can contain eq, attribute names and values),
            stops processing and return false
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.TypingAssist.TagMarkers.TagName">
            <summary>
            Tag name as it was before changes (used for undoing changes on Escape)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.TypingAssist.TagMarkers.ChangedTagName">
            <summary>
            Tag name with all changes to it
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.TypingAssist.TagMarkers.FirstTagNameRange">
            <summary>
            Header or footer tag name range, according to FirstTagIsHeader. This is the range where user is typing.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Html.TypingAssist.TagMarkers.SecondTagNameRange">
            <summary>
            Footer or header tag name range. This is the other side of modified tag.
            </summary>
        </member>
    </members>
</doc>
