<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Features.SolBuilderDuo.UI</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuild}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuild&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoBuildSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoBuildSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoBuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoBuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoCancel Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCancel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCancel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCancel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoCancel Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCancel"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCancel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCancel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCancel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCancel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoClean Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoClean}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoClean))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoClean&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoClean Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoClean"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoClean}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoClean))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoClean.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoClean&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoCleanSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCleanSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoCleanSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoCleanSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoCleanSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoDebug Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoDebug Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebug"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoDebugDontBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoDebugDontBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoDebugSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoDebugSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoDebugSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoDebugSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEnableHeuristics Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEnableHeuristics}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEnableHeuristics Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEnableHeuristics}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEnableHeuristics&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilter Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilter Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowAll Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowAll Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowConsole Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowConsole}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowConsole Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowConsole}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowConsole&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowErrors Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowErrors Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowErrorsOnly Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrorsOnly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowErrorsOnly Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowErrorsOnly}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowErrorsOnly&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowOutput Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowOutput}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowOutput Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowOutput}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowOutput&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowService Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowService}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowService Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowService}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowService&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowWarnings Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowWarnings Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarnings}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarnings&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoEventsViewFilterShowWarningsAndErrors Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarningsAndErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoEventsViewFilterShowWarningsAndErrors Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoEventsViewFilterShowWarningsAndErrors}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoEventsViewFilterShowWarningsAndErrors&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRebuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRebuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRebuildSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRebuildSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRebuildSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRebuildSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRepeat Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRepeat}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRepeat))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRepeat&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRepeat Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRepeat"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRepeat}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRepeat))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRepeat.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRepeat&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRun Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRun))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRun Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRun"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRun))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRun.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRunDontBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRunDontBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunDontBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunDontBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SolBuilderDuoRunSelection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SolBuilderDuoRunSelection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.Res.SolBuilderDuoThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:SolBuilderDuoThemedIcons+SolBuilderDuoRunSelection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;SolBuilderDuoThemedIcons.SolBuilderDuoRunSelection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction">
            <summary>
            Builds either the solution or the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Notifier">
            <summary>
            Notifies that the build is over and the target process is starting.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Notifier.ShowWhenReady(System.Diagnostics.Process)">
            <summary>
            Waits for the process to start pumping, then calls <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.Notifier.ShowOnAllDesktops"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunAction.ProjectOrSolution">
            <summary>
            Specifies what to build.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunProjectAction">
            <summary>
            Builds the current project using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.BuildAndRunSolutionAction">
            <summary>
            Builds the solution using the solution-builder, then runs the target application.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction">
            <summary>
            Runs the target application that is specified in the active configiration of the startup project in the current solution.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.mySpawnedProcesses">
            <summary>
            The list of processes spawned by us. They should be killed when doing build-and-run.
            To be accessed from the UI thread only.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.CloseSpawnedProcesses">
            <summary>
            Sends a close control to the processes we have spawned that are still running.
            The processes are not killed, ie any “do you want to close” windows will hold them.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.StartProcess">
            <summary>
            Starts the startup project process.
            Reports to the user and returns <c>Null</c> on failures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.OnSpawnedProcessExited(System.Object,System.EventArgs)">
            <summary>
            The process has exited, unwatch it.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.NotifyTargetProcessStarted">
            <summary>
            Gets whether to notify of target process started.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitForTargetProcess">
            <summary>
            Gets whether to wait for the target process to exit before running the build-and-run action.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup">
            <summary>
            Popups up a window that says which processes we're waiting for, and closes when done waiting.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.WaitFor(System.Collections.Generic.ICollection{System.Diagnostics.Process})">
            <summary>
            Spawns the popup, returns whether to go on building.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.CheckProcesses">
            <summary>
            Re-check the running processes.
            Update text, close if done.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closing"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.RunStartupProjectAction.WaitProcessPopup.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.Execute(JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.ItemDesc,JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.IProject[])">
            <summary>
            Isolated build action implementation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.GetSelection(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Gets the selected projects to build (for the build actions that run on selection).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.RunPostBuild(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.ItemDesc.RunOrDebug,JetBrains.Threading.IThreading,JetBrains.VsIntegration.ProjectModel.VSSolutionManager,Microsoft.VisualStudio.Shell.Interop.IVsDebugger2)">
            <summary>
            Runs the post-build action on the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.JetBrains#ActionManagement#IActionHandler#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderBuildActions.JetBrains#ActionManagement#IActionHandler#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderCancelAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderCancelAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderTempActions.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuilderTempActions.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.myIsExclusive">
            <summary>
            Whether all other kinds should be suppressed when selecting this one.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.myKinds">
            <summary>
            Kinds corresponding to this filter.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.Actions.SolBuildEventsFilterActions.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.EntryPoint">
            <summary>
            A class for quickly test-running the subsystem.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence">
            <summary>
            A textual occurence for presenting the build results messages.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.InitCommon(JetBrains.ProjectModel.IProjectFile,JetBrains.Util.TextRange,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            Common init for both location-bound and location-unbound events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.InitWithLocation(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ProjectModel.IProjectModelElement,JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            Try using the location info from the event, if available and valid.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.InitWithoutLocation(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ProjectModel.IProjectModelElement,JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache)">
            <summary>
            No location in evt data, or failed to make use of it.
            Attach to hte project file itself.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.DocumentForFileCache">
            <summary>
            When doing subsequent events for the same file, allows to reuse the document for that file.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.FeatureFlags.TrackLocationChanges">
            <summary>
            When code is edited above the warning, its location is tracked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildEventOccurence.FeatureFlags.GroupBuildResultsByMembers">
            <summary>
            Enables grouping by project structure.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView">
            <summary>
            A build session graphical representation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.ProjectViewHeight">
            <summary>
            Specifies the uniform height for all of the project views.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.ProjectViewWidth">
            <summary>
            Specifies the uniform width for all of the project views.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.ComposeProjectColor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus)">
            <summary>
            Chooses the current color for the project, based on its current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.MonospacedTextAbbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            Fits given pixel width at given font characteristics.
            Works for monospaced fonts only =&gt; just turns pixels into charcount, and uses <see cref="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.MonospacedTextAbbreviator`1.Run(System.Collections.Generic.ICollection{`0},System.Func{`0,System.String},System.Double,System.Windows.Controls.TextBlock)">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="FItemName">The way of getting the item names.</param>
            <param name="pixelwidth">Max number of pixels of width allowed in the output.</param>
            <param name="renderer">Gives the font properties and margins, serves as the measurer.</param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            Treats just string length.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.Run(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String},System.Int32)">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="FItemName">The way of getting the item names.</param>
            <param name="nChars">Max number of characters allowed in the output.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.IsCaps(System.Char)">
            <summary>
            Tells whether the char is CAPS, in our terms.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.CreateData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initial data.
            Just limits all items to the given maxlen (at most).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.GetDefaultAbbreviation(JetBrains.DataFlow.PropertyBag)">
            <summary>
            Take <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.myCharsLimit"/> chars at most (this includes as many caps as possible).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.GetNameParts(`0)">
            <summary>
            Gets the item name, splits it into parts by the Caps.
            Each part is a property bag.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.GetResult">
            <summary>
            Reverses the internal map to make it item-to-name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.ResolveConflicts_ChooseUniqueChars">
            <summary>
            When shortening the abbreviations, we've taken the first chars from each capsed part.
            Try taking some non-first chars instead, if they help making the abbr unique.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.StringAbbreviator`1.ResolveConflicts_DisambigChars">
            <summary>
            Appends disambig chars to the end of the abbreviation, as a last resort.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.Dashboard.Dim.Base.InactiviyDimFactor">
            <summary>
            Add this much shade to simulate inactive color on an active one.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.MinPreferredRowHeight">
            <summary>
            Add more rows as the rowheight is above this limit (this tradess off indicator height for its width, which is good for reading its text)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.NaturalIndicatorHeight">
            <summary>
            Having constant pixel sizes of borders etc at any scale looks bad, let's render it at this height and than scale to any size required (downscaling included).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.GetRowCountApproxFromFactor(System.Double,System.Windows.Size,System.Int32)">
            <summary>
            An inverse to <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorAspect"/>.
            As there's the <see cref="M:System.Math.Ceiling(System.Double)"/> function that can't exactly be inverted, it has been ignored here. Round the rowcount up or down, depending on the conditions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.RowCountCeiling(System.Double,System.Int32)">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.RowCountFloor(System.Double,System.Int32)">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.RowCountRoundCore(System.Int32,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Round the number of rows to the closest meaningful integer (not any number of rows is meaningful, it must be a divider of the indicators count).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.Run_ChooseRowCount(System.Windows.Size,System.Int32)">
            <summary>
            Optimizes the count of project indicator rows (total rows is greater by one).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetFullRowIndicatorLogicalSize">
            <summary>
            Same as <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/>, just for an indicator that occupies the whole row (like solution indicator does).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorAspect">
            <summary>
            Indicator width-to-height factor in both logical and visual sizes.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize">
            <summary>
            Logical indicator size (the only size the indicator control knows about; always have the same height to preserve line-thickness-to-body-size proportions when the view is resized).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorVisualHeight">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.ViewSize"/>, as seen on screen.
            <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/> is render-transformed to become this.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorVisualSize">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.ViewSize"/>, as seen on screen.
            <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/> is render-transformed to become this.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorVisualWidth">
            <summary>
            Indicator size as it sits in the <see cref="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.ViewSize"/>, as seen on screen.
            <see cref="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.DashboardLayoutCalculator.CalculatedLayout.GetIndicatorLogicalSize"/> is render-transformed to become this.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Empty">
            <summary>
            Project build hasn't started yet.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.NoChanges">
            <summary>
            Project wasn't built because it's up-to-date.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.NonBreakingChanges">
            <summary>
            Project wasn't built because it has non-breaking changes, but copy-outputs might has been executed for it (and had no warnings).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Ok">
            <summary>
            Project was built, and had no errors or warnings.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Warnings">
            <summary>
            Project was built and had some warnings, but no errors.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.BuildSessionView2.ProjectIndicatorData.ProjectBuildMessageStatus.Errors">
            <summary>
            Project build was run and had some errors.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1">
            <summary>
            Creates short abbreviated names for the entities.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.Run(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.String})">
            <summary>
            Produces abbreviated names for the given set of items.
            </summary>
            <param name="items">The list of items to process.</param>
            <param name="funcItemName">The way of getting the item names.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.IsCaps(System.Char)">
            <summary>
            Tells whether the char is CAPS, in our terms.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.CreateDataWithThreeCaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initial data.
            All items to three caps (at most).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.GetNameParts(`0)">
            <summary>
            Gets the item name, splits it into parts by the Caps.
            Each part is a property bag.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.GetResult">
            <summary>
            Reverses the internal map to make it item-to-name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.Run">
            <summary>
            Central operating method.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.StageResolveWithCaps">
            <summary>
            Resolve conflicts by letting more letters, but only caps.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.Infra.Abbreviator`1.StageResolveWithUniqueNoncaps">
            <summary>
            Add unique non-caps letters to the caps.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView">
            <summary>
            Renders the projects, organized in build-levels.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.ProjectViewHeight">
            <summary>
            Specifies the uniform height for all of the project views.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.ProjectViewWidth">
            <summary>
            Specifies the uniform width for all of the project views.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.SetContent(JetBrains.DataFlow.Lifetime,System.Collections.Generic.List{System.Collections.Generic.List{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject}})">
            <summary>
            Removes the old content, fills with the new set of projets.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.ComposeProjectColor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectBuildState,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProjectErrorStatus)">
            <summary>
            Chooses the current color for the project, based on its current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.ProjectsByLevelsView.CreateLevelView(System.Action{System.Windows.UIElement})">
            <summary>
            Creates a view for the level of projects.
            Returns the means for adding projects to the level.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.KillOldProcesses">
            <summary>
            Kills all of the processes previosly started from building this solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.StartProcess">
            <summary>
            Starts the startup project process.
            Reports to the user and returns <c>Null</c> on failures.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.GetStartupInfo">
            <summary>
            Gets the process start info (executable, cmdline args, and working folder) for the startup project of the solution.
            Throws on fatal errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.GetStartupProject">
            <summary>
            Gets the VS Project for the startup project in the solution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.OnAfterGetStartupInfo_HackPlatformProduct(System.Diagnostics.ProcessStartInfo)">
            <summary>
            When running a platform product, see which product we currently have registered for VS.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.View.RunStartupProject.WaitForTargetProcess">
            <summary>
            Gets whether to wait for the target process to exit before running the build-and-run action.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuilderDuoAutoShowResults">
            <summary>
            Shows the build results when build finishes.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuilderDuoStatusBarIndicator">
            <summary>
            Tracks build progress in the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuilderDuoView.CurrentSession">
            <summary>
            The most-recently-used build session.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor">
            <summary>
            Opens the Find Results View with the build events from the session.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.myFuncDomainFilter">
            <summary>
            Filters down the set of events displayed down to some domain, eg events of a single project.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.myFuncPriorityFilter">
            <summary>
            Filters down the set of events displayed based on their priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.myKindFilter">
            <summary>
            If the specific item is present, then the filter passes that kind of events.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.#ctor(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean},JetBrains.ReSharper.Psi.IPsiServices,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Ctor.
            </summary>
            <param name="session">Session that gives the events to show.</param>
            <param name="solution">Current solution, just in case.</param>
            <param name="funcDomainFilter">Allows to limit down the set of <paramref name="session"/> events to show. All-<c>True</c> by default.</param>
            <param name="psiServices"></param>
            <param name="settings"></param>
            <param name="threading"></param>
            <param name="uiTaskExecutor"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.Show(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean},JetBrains.ReSharper.Psi.IPsiServices,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Opens the Find Results View with the build events from the session.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.ShowIfNeeded(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Psi.IPsiServices,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Opens the Find Results View with the build events from the session, if there are any significant items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.ShowIfNeeded(JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSession,JetBrains.ProjectModel.ISolution,System.Func{JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.SolBuildEvent,JetBrains.ReSharper.SolutionBuilder.SolBuilderDuo.BuildSessionProject,System.Boolean},JetBrains.ReSharper.Psi.IPsiServices,JetBrains.Application.Settings.ISettingsStore,JetBrains.Threading.IThreading,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Opens the Find Results View with the build events from the session, if there are any significant items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.GetEventsFilteredButKind">
            <summary>
            Gets the list of events (solution+project), filtered by domain and priority, but not filtered by kind.
            Here only invariant-thru-life-of-view filters are applied (kind filter might change).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.Init_SelectDefaultKindFilter">
            <summary>
            Based on what we have (errors? only warnings? neither?), select the initial by-kind filter value.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.Init_SetItemsOnFilterChange(JetBrains.Threading.IThreading,JetBrains.Application.Settings.ISettingsStore,JetBrains.ProjectModel.ISolution,JetBrains.UI.Application.Progress.UITaskExecutor)">
            <summary>
            Initially, and then when user changes the filter, fill in with items.
            </summary>
            <param name="threading"></param>
            <param name="settings"></param>
            <param name="solution"></param>
            <param name="uiTaskExecutor"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.HasSignificantEvents">
            <summary>
            Gets whether there are occurences significant enough to be shown.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext">
            <summary>
            Build event, plus additional data.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext.BuildProject">
            <summary>
            The owning build project, or <c>Null</c> if it's solution-owned.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext.Container">
            <summary>
            The owning project model elem: either <see cref="T:JetBrains.ProjectModel.IProject"/> or <see cref="T:JetBrains.ProjectModel.ISolution"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.SolBuildEventsBrowserDescriptor.EventWithContext.Event">
            <summary>
            Event itself.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1">
            <summary>
            Operates a filter that sets or removes individual items.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.myEffective">
            <summary>
            Items currently in effect.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.Apply(System.Boolean,`0[])">
            <summary>
            Applies the new filter.
            </summary>
            <param name="isExclusive">Whether all other kinds should be off. Otherwise, works as Toggle.</param>
            <param name="kinds">Kinds corresponding to this filter.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.IsIncluded(System.Boolean,`0[])">
            <summary>
            Checks if the particular filter is currently in effect.
            </summary>
            <param name="isExclusive">Whether all other kinds should be off.</param>
            <param name="kinds">Kinds corresponding to this filter.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.SetExclusively(`0[])">
            <summary>
            Sets these items on the filter, resets all else.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.Toggle(`0[])">
            <summary>
            Toggles the given items.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.SolBuilderDuo.View.TogglingFilter`1.Effective">
            <summary>
            Gets the filter effective at the moment.
            </summary>
        </member>
    </members>
</doc>
