<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Product.VisualStudio.Internal</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesVisualStudioInternalThemedIcons+InternalPage}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesVisualStudioInternalThemedIcons.InternalPage))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesVisualStudioInternalThemedIcons.InternalPage.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(FeaturesVisualStudioInternalThemedIcons.InternalPage), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesVisualStudioInternalThemedIcons.InternalPage&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons.InternalPage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the InternalPage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons.InternalPage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesVisualStudioInternalThemedIcons+InternalPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesVisualStudioInternalThemedIcons.InternalPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesVisualStudioInternalThemedIcons.InternalPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesVisualStudioInternalThemedIcons.InternalPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons.InternalPage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the InternalPage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons.InternalPage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Product.VisualStudio.Internal.Resources.FeaturesVisualStudioInternalThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesVisualStudioInternalThemedIcons+InternalPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesVisualStudioInternalThemedIcons.InternalPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesVisualStudioInternalThemedIcons.InternalPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesVisualStudioInternalThemedIcons.InternalPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Actions.StdAfxAction.Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Actions.StdAfxAction.Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, ExecuteAsync
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Actions.CheckBoxSample7">
            <summary>
            CheckBoxSample7
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Actions.CheckBoxSample7.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Actions.UserControl666">
            <summary>
            Interaction logic for UserControl666.xaml
            </summary>
            <summary>
            UserControl666
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Actions.UserControl666.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView">
            <summary>
            Provides a customizable presentation for a declared element that can be used in runs of text.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.myDeclaredElementEnvoy">
            <summary>
            Helps tracking the <see cref="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.DeclaredElementProperty"/> value across document changes.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.myIsInternalDeclaredElementChange">
            <summary>
            Raised when changing the <see cref="F:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.DeclaredElementProperty"/> due to a change in the envoy.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.AttachEnvoy(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Creates a new envoy for the new declared element.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.OnGotoDeclaredElement(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When the hyperlink is clicked, navigates to the target.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.UpdateChildren">
            <summary>
            Updates the visual presentation of the object.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Common.UI.DeclaredElementView.DeclaredElement">
            <summary>
            Gets or sets the declared element presented by this instance.
            The declared element tries to track changes in the document and remain valid as long as possible.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Components.SolutionWatchdog">
            <summary>
            Watches for any leaked solutions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Components.SolutionWatchdog.SolCompo.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Product.VisualStudio.Internal.ErrorStripeProto.ErrorStripeProtoOptionsPage">
            <summary>
            <see cref="T:JetBrains.TextControl.ErrorStripe.ErrorStripeEditorStyle"/> internal settings.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.VSI.Misc.LocalProj">
            <summary>
            Runs some of the <c>Local.Proj</c> tasks.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.VSI.Misc.LocalProj.RegisterAndDevenvSetup">
            <summary>
            Does local registration and runs devenv/setup. Returns the success flag.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.VS.OptionPages.InternalPage.PageCreate">
            <summary>
            Fires when the internal page is shown.
            Allows to add more controls to it (as a stack panel). Sink <see cref="F:JetBrains.ReSharper.VS.OptionPages.InternalPage.Commit"/> to save on OK.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.VS.OptionPages.InternalPage.Commit">
            <summary>
            Fires when the page is committed with OK.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.myOutputLine">
            <summary>
            Fires when the compiler sends a line to the output.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.PublishInstance">
            <summary>
            Publishes the implementation instance into the public interface.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.OutputLine">
            <summary>
            Fires when the compiler sends a line to the output.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger">
            <summary>
            A logger that captures the MSBuild log events (status, error, warnings) and directs them into the SolutionBuilder log system.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Initialize(Microsoft.Build.Framework.IEventSource)">
            <summary>
            Subscribes loggers to specific events. This method is called when the logger is registered with the build engine, before any events are raised.
            </summary>
            
            <param name="eventSource">The events available to loggers.</param>
        </member>
        <member name="M:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Shutdown">
            <summary>
            Releases the resources allocated to the logger at the time of initialization or during the build. This method is called when the logger is unregistered from the engine, after all events are raised. A host of  typically unregisters loggers immediately before quitting.
            </summary>
            
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Parameters">
            <summary>
            Gets or sets the user-defined parameters of the logger. 
            </summary>
            
            <returns>
            The logger parameters.
            </returns>
            
        </member>
        <member name="P:JetBrains.ReSharper.SolutionBuilder.Impl.MSBuild.MSBuildCompilerImpl.MSBuildLogger.Verbosity">
            <summary>
            Gets or sets the level of detail to show in the event log.
            </summary>
            
            <returns>
            One of the enumeration values. The default is <see cref="F:Microsoft.Build.Framework.LoggerVerbosity.Normal"></see>.
            </returns>
            
        </member>
    </members>
</doc>
