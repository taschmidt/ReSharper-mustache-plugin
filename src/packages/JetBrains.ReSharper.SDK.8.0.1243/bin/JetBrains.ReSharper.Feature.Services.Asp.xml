<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Feature.Services.Asp</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCode}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCode))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesAspThemedIcons.AspCode.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ServicesAspThemedIcons.AspCode), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCode&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCode">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspCode Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCode.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCode}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCode))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCode.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCode&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCode.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspCode Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCode"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCode}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCode))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCode.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCode&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeDataBinding">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspCodeDataBinding Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeDataBinding.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeDataBinding}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeDataBinding))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeDataBinding.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeDataBinding&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeDataBinding.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspCodeDataBinding Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeDataBinding"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeDataBinding}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeDataBinding))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeDataBinding.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeDataBinding&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeExpression">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspCodeExpression Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeExpression.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeExpression}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeExpression))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeExpression.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeExpression&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeExpression.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspCodeExpression Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeExpression"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeExpression}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeExpression))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeExpression.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeExpression&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspCodeHtmlEncodedDataBinding Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeHtmlEncodedDataBinding}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspCodeHtmlEncodedDataBinding Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeHtmlEncodedDataBinding}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeHtmlEncodedDataBinding&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncoding">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspCodeHtmlEncoding Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncoding.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeHtmlEncoding}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeHtmlEncoding))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeHtmlEncoding.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeHtmlEncoding&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncoding.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspCodeHtmlEncoding Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeHtmlEncoding"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeHtmlEncoding}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeHtmlEncoding))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeHtmlEncoding.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeHtmlEncoding&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeRegular">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspCodeRegular Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeRegular.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeRegular}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeRegular))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeRegular.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeRegular&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeRegular.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspCodeRegular Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.AspCodeRegular"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+AspCodeRegular}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.AspCodeRegular))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.AspCodeRegular.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.AspCodeRegular&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.ScopeAsp">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ScopeAsp Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.ScopeAsp.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+ScopeAsp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.ScopeAsp))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.ScopeAsp.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.ScopeAsp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.ScopeAsp.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ScopeAsp Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons.ScopeAsp"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Asp.Resources.ServicesAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesAspThemedIcons+ScopeAsp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesAspThemedIcons.ScopeAsp))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesAspThemedIcons.ScopeAsp.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesAspThemedIcons.ScopeAsp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.GetRelatedDeclarations(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield break
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.GetRelatedAndFilterHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield return declaration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.IsHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Works on auto-generated code-behind classed. By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.IsCodeBehindClass(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.IsUserTextDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Works on auto-generated type members. By default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.CanContainSeveralClasses(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.CanImplementInterfaces(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.CanHaveConstructors(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.SuperClassCanBeChanged(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.SuperClassNameMustBeFull(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.GetNamespaceForElementsMovedToExternalScope(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - typeElement.GetContainingElement&lt;INamespaceDeclaration&gt;(false);
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.GetFolderForElementsMovedToExternalScope(JetBrains.ProjectModel.IProjectFile,System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - projectFile.Location.Directory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.GetPrettyName(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,System.Boolean)">
            <summary>
            Default - element.DeclaredName
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.AspFileTypeSpecificOwnerUtil.GetMvcViewWithModelBaseTypes">
            <summary>
            Default - empty
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Caches.IMvcCacheProcessor">
            <summary>
            Detecting ASP.NET MVC layout and ASP.NET MVC 4 Display Modes changes
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.Caches.MvcCache.GetData(JetBrains.ReSharper.Psi.IPsiSourceFile,System.Boolean)">
            <param name="sourceFile"></param>
            <param name="full"><c>false</c> - rough search for candidates, <c>true</c> - accurate search with resolve</param>
            <returns></returns>
            <remarks>ViewLocationFormats converted to windows path format for optimization in MvcViewReference resolve</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcViewResolver">
            <remarks>Attention! All paths must be normalized (windows format)</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.Search.IMvcSearchSupported">
            <summary>
            Marker interafce says that specified PsiLanguageType is supported in MVC references search.
            Must be implemented with LangugeSpecificAttribute.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CodeStructure.AspRenderBlockCodeStructureElement.GetNestedLevel(JetBrains.ReSharper.Psi.Asp.Tree.IAspRenderBlock)">
            <summary>
            Nested level of codeblock
            First - minimu level, Second - last level (right)
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReference`1.InternalBindTo(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns>element holds reference (new one, if rebinded, or old one - if not binded) </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.IMvcActionControllerReference.Controllers">
            <summary>
            Collection of tuples of area, controller name and controller's class
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewReference`2.ParseLocationFormatString(System.String,JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcKind,System.String,System.String)">
            <paramref name="locationFormat"/> must be normalized (windows path format)
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcViewReference`2.GetReferenceSymbolTable(JetBrains.ReSharper.Psi.IPsiServices,System.String,System.String,System.String,JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcKind,JetBrains.ProjectModel.IProject,System.Version)">
            <summary>
            Get views symbol table
            </summary>
            <param name="psiServices" />
            <param name="area">Area name</param>
            <param name="controller">Controller name</param>
            <param name="view">View name. Can be just name (View), relative path (Views/Bla/View.aspx) and rooted path (~/Views/Bla/View.aspx)</param>
            <param name="mvcKind">Type of target - masterpage, view or template</param>
            <param name="project">Project</param>
            <param name="version">MVC version</param>
            <returns>Symbol table</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil.GetAvailableControllers(JetBrains.ReSharper.Psi.Modules.IPsiModule,JetBrains.ReSharper.Psi.Search.ISearchDomain,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext,System.Boolean,JetBrains.ReSharper.Psi.ITypeElement)">
            <summary> Get all available controllers in module</summary>
            <remarks>TODO: [derigel] Caching...</remarks>
            <param name="module"></param>
            <param name="searchDomain"></param>
            <param name="context"></param>
            <param name="includingIntermediateControllers">Including abstract controllers, not ending 'Controller' suffix and etc</param>
            <param name="baseClass">Base class for controllers to check, by default <c>System.Web.Mvc.IController</c> or <c>System.Web.Http.Controllers.IHttpController</c> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil.GetControllers(JetBrains.ReSharper.Psi.Tree.IArgumentsOwner)">
            <summary>
            Get controller names and their resolved types (explicit or implicit) for specified method invocation
            </summary>
            <param name="argumentsOwner"></param>
            <returns>Collection of tuples of area, controller name, controller's determination kind, and controllers' classes corresponded to name</returns>
            <remarks>Controller name can be null, indicating this way that controller's name is calculated at runtime</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil.DetermineActionParameters(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <returns>First is return type, rest - arguments types</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcUtil.DeterminationKind">
            <summary>
            Enum telling how controllers/actions have been determined
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcReferenceProvider`3.#ctor(System.Version)">
            <param name="version">Version of MVC assembly</param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Asp.CodeCompletion.Rules.MvcActionTransformationRule`1">
            <summary>
            Rule to remove trailing parenthesis in action methods
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCustomReferencesSettingsEx.IsApplied(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.ProjectModel.IProjectItem)">
            <summary>
            Check if any ASP.NET MVC activity should be done
            </summary>
            <param name="enabled">MVC settings' <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCustomReferencesSettings.Enabled"/> property</param>
            <param name="projectItem"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCustomReferencesSettingsEx.IsApplied(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.ProjectModel.IProjectItem,System.Version@)">
            <summary>
            Check if any ASP.NET MVC activity should be done
            </summary>
            <param name="enabled">MVC settings' <see cref="F:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCustomReferencesSettings.Enabled"/> property</param>
            <param name="projectItem"></param>
            <param name="version">Version of referenced MVC assembly</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCustomReferencesSettingsEx.IsApplied(JetBrains.ReSharper.Feature.Services.Asp.CustomReferences.MvcCustomReferencesSettings,JetBrains.ProjectModel.IProjectItem)">
            <summary>
            Check if any ASP.NET MVC activity should be done
            </summary>
            <param name="settings">MVC settings</param>
            <param name="projectItem"></param>
        </member>
    </members>
</doc>
