<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Feature.Services</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.IconsForIconThemeSelectionSamplePsiServices">
            <summary>
            Generic PSI-Services theme-sample icons.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileStorage}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileStorage))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesThemedIcons.FileStorage.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ServicesThemedIcons.FileStorage), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesThemedIcons.FileStorage&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FileStorage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileStorage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileStorage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileStorage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileStorage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FileStorage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileStorage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileStorage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileStorage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileStorage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FileTemplate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FileTemplate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the LiveTemplate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+LiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.LiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.LiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.LiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the LiveTemplate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+LiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.LiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.LiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.LiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates">
             <summary>
              <para>
                <para>Autogenerated identifier class for the PersonalSolutionTemplates Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PersonalSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PersonalSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PersonalSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PersonalSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the PersonalSolutionTemplates Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PersonalSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PersonalSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PersonalSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PersonalSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates">
             <summary>
              <para>
                <para>Autogenerated identifier class for the PredefinedTemplates Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PredefinedTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PredefinedTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PredefinedTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PredefinedTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the PredefinedTemplates Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PredefinedTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PredefinedTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PredefinedTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PredefinedTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ScopeGlobal Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScopeGlobal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScopeGlobal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScopeGlobal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScopeGlobal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ScopeGlobal Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScopeGlobal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScopeGlobal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScopeGlobal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScopeGlobal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SharedSolutionTemplates Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SharedSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SharedSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SharedSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SharedSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SharedSolutionTemplates Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SharedSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SharedSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SharedSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SharedSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SurroundTemplate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SurroundTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SurroundTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SurroundTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SurroundTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SurroundTemplate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SurroundTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SurroundTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SurroundTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SurroundTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ArchitectureModel.Graph.IArchitectureGraph.CreateEdgeFromProjectModel(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Creates Edge and correctly adds it to graph.
            </summary>
            <param name="element"></param>
            <returns>Return added edge, if something fails - return null</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ArchitectureModel.Graph.IArchitectureGraph.CreateNodeFromProjectModel(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Creates Node and correctly adds it to graph.
            </summary>
            <param name="element"></param>
            <returns>Return created node, if something fails - return null</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ArchitectureModel.Impl.Graph.ArchitectureGraphNodeBase.RemoveIncomingEdge(JetBrains.ReSharper.Feature.Services.ArchitectureModel.Graph.IArchitectureGraphEdge)">
            <summary>
            Delete edge from IArchitectureGraphNode.Outcoming and set edge.Source to null 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ArchitectureModel.Impl.Graph.ArchitectureGraphBase.AddEdge(JetBrains.ReSharper.Feature.Services.ArchitectureModel.Graph.IArchitectureGraphEdge)">
            <summary>
            Adds edge to graph Edges and if edge.Source exist to edge.Source.Edges
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ArchitectureModel.Impl.Graph.ArchitecturePersistentGraph.RemoveEdge(JetBrains.ReSharper.Feature.Services.ArchitectureModel.Graph.IArchitectureGraphEdge)">
            <summary>
            Remove edge from graph  and if edge.Source exist from edge.Source
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper">
            <summary>
            Helper methods for bookmarks.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper.GetBookmarkCoordsOffset(JetBrains.DocumentModel.IDocument,JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Returns offset of bookmark in specified document, corrected by real document content structure.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper">
            <summary>
            Helper to work with <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper.GetChildElements(System.Xml.XmlNode)">
            <summary>
            Return all child <see cref="T:System.Xml.XmlElement"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper.GetChildElements(System.Xml.XmlNode,System.String)">
            <summary>
            Return all child <see cref="T:System.Xml.XmlElement"/> with specified name.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.IsAvailable(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Precise check of code clenup execution availability for <see cref="!:range"/> in <see cref="!:sourceFile"/>
            </summary>
            <param name="sourceFile">File being cleaned up</param>
            <param name="range">Range beain cleaned up, Invalid in case of whole file</param>
            <returns>True, if available</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.IsSuitableFile(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Roughly checks whether code cleanup may be executed over <see cref="!:projectFile"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesBefore">
            <summary>
            psiModules which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesAfter">
            <summary>
            psiModules which shoud follow this
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.SetDefaultSetting(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.DefaultProfileType)">
            <summary>
            Get default setting for given profile type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailable(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Check if this module can handle given project file
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Process(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.DocumentModel.IRangeMarker,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Process clean-up on file. if <paramref name="rangeMarker"/>
            is <see cref="F:JetBrains.DocumentModel.DocumentRange.InvalidRange"/>, then process the whole file
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.LanguageType">
            <summary>
            Get the language this module can operate
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Descriptors">
            <summary>
            Get the collection of option descriptors
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailableOnSelection">
            <summary>
            Check if this module is available on selection, or on the whole file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.IsAvailable(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile)">
            <summary>
            Check if this cleanup item is available according to profile
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.IsValid">
            <summary>
            Check if corresponding tree elements are valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.Execute">
            <summary>
            Proceed with cleanup
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.AutocompletionBehaviour">
            <summary>
            Enumerates possible autoinsert mode foced by context
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionSession">
            <summary>
            Represents one session of using code completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase">
            <summary>
            Class for implementing advanced lookup items
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem">
            <summary>
            Represents a lookup item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.AcceptIfOnlyMatched(JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAcceptanceContext)">
            <summary>
            Gets flag indicating whether this item should be automatically completed if it is the only in a list
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Match(System.String,JetBrains.TextControl.ITextControl)">
            <summary>
            Returns value indicating whether the item matches a given prefix
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Accepts the item at the specified range.
            nameRange is a part of a corresponding document range, not a tree!
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Shrink">
            <summary>
            Shrinks lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Unshrink">
            <summary>
            Restores unshrinked lookup item presentation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Image">
            <summary>
            Gets lookup item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.DisplayName">
            <summary>
            Gets lookup item display name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.DisplayTypeName">
            <summary>
            Gets type display name 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.CanShrink">
            <summary>
            Determines whether the item can decrease its width
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.OrderingString">
            <summary>
            Gets string used to arrange items in lookup list. If it is null, <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.DisplayName"/> is used.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.Multiplier">
            <summary>
            Gets or sets the code completion multiplier used with this lookup item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.IsDynamic">
            <summary>
            Indicates whether this item is dynamic and needs to be re-calculated on typing
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem.IgnoreSoftOnSpace">
            <summary>
            Indicates whether this lookup item does not require soft lookup on space
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Shrink">
            <summary>
            Shrinks the name of the item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Unshrink">
            <summary>
            Cancels shrink of the name
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Completes the item at the specified range.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.GetPrefixMatcherEx(System.String,JetBrains.TextControl.ITextControl)">
            <summary>
            TODO: remove this hack...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.Image">
            <summary>
            Gets item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItemBase.DisplayTypeName">
            <summary>
            Name of the type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IDescriptionProvidingLookupItem">
            <summary>
            Interface for providing descriptions from lookup lists or other places
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.DeclaredElementLookupItem">
            <summary>
            Declared element code completion context item
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IParameterInfoProvidingLookupItem">
            <summary>
            Interface for providing parameter info contexts from lookup lists or other places
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings">
            <summary>
            Maintains code completion options for 6.0 version
            This settings class is obsolete. Use <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey"/> settings tree.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupAfterDot">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupAfterNew">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupOnIdentifier">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteBasicCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteClassNameCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteSmartCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupDelay">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.MiddleMatchingCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/> for general usage
            For use in code completion get it from: <seealso cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext.IdentifierMatchingStyle"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.CodeCompletionContextProviderBase.CalculateDefaultRanges(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext)">
            <summary>
            Calculates ranges analysing letters and '_' to the left and to the right of the caret.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.SpecificCodeCompletionContext.Language">
            Language for item provider for this context.
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.ICodeCompletionHost.InvokeHostCodeCompletion">
            <summary>
            Invokes host completion in active text control
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.ILookupItemsPreference.FilterItems(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Lookup.ILookupItem})">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.Impl.DeclaredElementLookupItem`2.CustomCaretOffset">
            <summary>
            Where to move caret after completion. Leave equal to -1 to allow default behavior.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.Impl.DeclaredElementLookupItem`2.Suffix">
            <summary>
            Suffix to playback. Is set only after completion.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithReplaceRange(JetBrains.Util.TextRange)">
            <summary>
            Creates new instance of ranges class with new value of the 'replaceRange'
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithInsertRange(JetBrains.Util.TextRange)">
            <summary>
            Creates new instance of ranges class with new value of the 'insertRange'
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.ReplaceRange">
            <summary>
            Range that is replaced when replace completion is applied
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.InsertRange">
            <summary>
            Range that is replaced when insert completion is applied
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.LanguageSpecificIntellisenseManager.GetIntellisenseEnabled(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Returns value of language specific 'enable' setting when global intellesense flag is set to per-technology value. 
            </summary>
            <param name="boundSettingsStore"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.LanguageSpecificIntellisenseManager.GetAutoppopupEnabled(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Checks:
            1. Global intellisense enable property
            2. Language specific intellisense enable property
            3. Global autopopup enable property
            </summary>
            <param name="contextBoundSettingsStore"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TextLookupItem">
            <summary>
            Code completion result item which simply completes some text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Descriptions.IDeclaredElementDescriptionProvider.GetElementDescription(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionStyle,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.ReSharper.Psi.Modules.IPsiModule)">
            <summary>
            This method should return description according to the style but excluding obsolete description, or null if there is no description for a given element.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionPresenter">
            <summary>
            DeclaredElementDescriptionPresenter can fetch descriptions and obsolete flags for declared elements from various sources: XML docs, CLR attributes, external documentation.
            To add a new source of information, implement IDeclaredElementDescriptionProvider in a solution-level component.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.CodeInspectionWiki">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;CodeInspectionWiki&gt;
              &lt;Item Id=&quot;ForControlVariableIsNeverModified&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/&apos;for&apos;+loop+control+variable+is+never+modified&quot;/&gt;
              &lt;Item Id=&quot;ValueParameterNotUsed&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/%27value%27+parameter+is+not+used&quot;/&gt;
              &lt;Item Id=&quot;AccessToStaticMemberViaDerivedType&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/Access+to+a+static+member+of+a+type+via+a+derived+type&quot;/&gt;
              &lt;Item [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder">
            <summary>
            Modifies context  
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionsProvider">
            <summary>
            Provides options for user
            </summary>
            <remarks>
            Global options are displayed on first page and applies to every element (or is default value)
            Element options are specific settings for each elements, available on Advanced page
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.IsAvaliable(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>
            Checks if this builder will produce any output in the specified context
            </summary>
            <param name="context">Context</param>
            <returns>true if builder can work with context, false otherwise</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.Process(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>
            Runs on context and modifies PSI
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.HasProcessableElements(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElement})">
            <summary>
            Tells if builder will produce any output elements
            </summary>
            <param name="context"></param>
            <param name="elements"></param>
            <returns>true if elements will be produced, false otherwise</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.GetPossibleValues">
            <summary>Gets possible values for given output element in the given context</summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.IsValidValue(System.String)">
            <summary>Gets possible values for given output element in the given context</summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.ID">
            <summary>Option identity</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Title">
            <summary>Title text</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Kind">
            <summary>UI presention kind</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Persist">
            <summary>Indicates if value should be saved across generate sessions</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Value">
            <summary>Value for this option</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.OverridesGlobalOption">
            <summary>Global option value does not propagate to this option</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.HasDependentOptions">
            <summary>If this property is true, options are refreshed on change</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionFromSettings.LoadOption(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>Loads persistent option value.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionFromSettings.SaveOption(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>Saves persistent option value.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider">
            <summary>
            Provides elements 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider.Populate(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>
            Collects elements for builder
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ExtensionLocationView">
            <summary>
            ExtensionLocationView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ExtensionLocationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.src.LiveTemplates.FileTemplates.RelativeLocationView">
            <summary>
            RelativeLocationView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.src.LiveTemplates.FileTemplates.RelativeLocationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LazyLookupItemPainter">
            <summary>
            Represents lazy item painter, which doesn't measure, shrink ALL items, 
            but do it for visible only. Side effect of this painter is MaxItemWidth occurs 
            to be determined during user operations, so it's required to track current 
            MaxItemWidth provided by this painter to accomadate realted UI.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter">
            <summary>
            Paints code completion items
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IListItemPainter`1">
            <summary>
            Interface for painters used in conjunction with ListForm
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myItems">
            <summary>
            List of items
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myListBoxControl">
            <summary>
            The list box to use
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myLeftAlign">
            <summary>
            The flag indicating whether to align types to the left
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myMaxNameWidth">
            <summary>
            Maximum left size width
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.myRenderParams">
            <summary>
            The lookup item text rendering aspect.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.ShrinkLookupListItemNameToWidth(JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem,System.Int32,System.Drawing.Graphics)">
            <summary>
            Shrinks name text to the given width.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.LeftAlign">
            <summary>
            Gets or sets the left align flag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemPainter.RenderParams">
            <summary>
            Gets the rendering aspect for the lookup list items.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ILookup">
            <summary>
            Interface for creating lookup windows
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Solution">
            <summary>
            Solution the window is executed within
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.BeforeShownItemsUpdated">
            <summary>
            Event is raised before items list is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.CurrentItemChanged">
            <summary>
            Event which is raised when the current item changes
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.ItemCompleted">
            <summary>
            Raised when an item is completed
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Closed">
            <summary>
            Raised when the window is closed
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Typing">
            <summary>
            Raised when typing happens
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupBase.mySortedItems">
            <summary>
            The complete list of lookup items sorted by name
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.LookupBase.ItemCompleted">
            <summary>
            Raised when an item is completed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Options.HostAutoFormatSettings">
            <summary>
            Host (e.g. VS) autoformat (e.g. Pretty Listing) settings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocHeaderPresenter.Present(System.Text.StringBuilder,JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Modules.IPsiModule)">
            <summary>
            Presents the declared element as a header for HTML quick doc
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconSettings">
            <summary>
            Settings for the <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and Themed Icons subsystem.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect">
            <summary>
            Standard PSI icon theme aspect values.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsIdea">
            <summary>
            JetBrains IDEA lookalike icon set, for better migration.
            Manual only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs08">
            <summary>
            VS8-friendly icon set. Mostly the same as Visual Studio Classic, but with more than 16 colors.
            In use with VS 8-9-10.
            Autoselected with VS 8-9-10.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11Color">
            <summary>
            VS11-friendly metro-style color-painted icon set. Based on VS11 own icons, but with added color.
            Autoselected in non-VS environments.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11Gray">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons in light theme.
            Autoselected with VS 11 with light background.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11GrayDark">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons dark theme.
            Autoselected with VS 11 with dark background.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback">
            <summary>
            The aspect itself (as in outer class), plus lower-priority aspect entries for fallback options specific for the theme.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsIdea_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs08_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11Color_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11GrayDark_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11Gray_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.Demote(JetBrains.UI.Icons.IconThemeAspect,System.Int32)">
            <summary>
            Slightly demotes an aspect in priority to implement fallback in case of missing theme image.
            </summary>
            <param name="aspect"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.Automatic">
            <summary>
            <para>This is the default. A theme is selected based on the current environment.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs08">
            <summary>
            VS8-friendly icon set. Mostly the same as Visual Studio Classic, but with more than 16 colors.
            In use with VS 8-9-10.
            Autoselected with VS 8-9-10.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsIdea">
            <summary>
            JetBrains IDEA lookalike icon set, for better migration.
            Manual only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11Gray">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons in light theme.
            Autoselected with VS 11 with light background.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11Color">
            <summary>
            VS11-friendly metro-style color-painted icon set. Based on VS11 own icons, but with added color.
            Autoselected in non-VS environments.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11GrayDark">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons dark theme.
            Autoselected with VS 11 with dark background.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelectionControlAutomation">
            <summary>
            Icon theme selection control for Options.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelectionControlAutomation.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.Options.OptionsSettingsSmartContext,JetBrains.Threading.IThreading,JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap,JetBrains.Util.ILogger)">
            <summary>
            .ctor for automatic factoring in Options.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelectionControlAutomation.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.IContextBoundSettingsStoreLive,JetBrains.Threading.IThreading,JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap,JetBrains.Util.ILogger,System.Int32)">
            <summary>
            .ctor for manual factoring or factoring outside Options.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSettingsLoader">
            <summary>
            Loads and publishes as the theme aspect the psi symbol icon theme settings.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.ITodoContentsProvider.GetTokenContentsRange(System.String,JetBrains.Util.TextRange,JetBrains.ReSharper.Psi.Parsing.TokenNodeType)">
            <summary>
            Used by todo manager to extract contents from tokens, e.g. remove slashes from comments. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternStorage.UpdateHash">
            <summary>
            Recalculates hash and returns true if it has not changed
            </summary>
            <returns>true if has not changed</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.TypingAssist.IActionContext.ActionId">
            <summary>
            Gets the character that were typed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.TypingAssist.SkippingTypingAssist">
            <summary>
            This typing assist skips (overtypes) string that is set in the document data by code completion or other typing assist.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetRelatedDeclarations(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield break
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetRelatedAndFilterHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield return declaration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Works on auto-generated code-behind classed. By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsCodeBehindClass(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsUserTextDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Works on auto-generated type members. By default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanContainSeveralClasses(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanImplementInterfaces(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanHaveConstructors(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.SuperClassCanBeChanged(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.SuperClassNameMustBeFull(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetNamespaceForElementsMovedToExternalScope(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - typeElement.GetContainingElement&lt;INamespaceDeclaration&gt;(false);
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetFolderForElementsMovedToExternalScope(JetBrains.ProjectModel.IProjectFile,System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - projectFile.Location.Directory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetPrettyName(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,System.Boolean)">
            <summary>
            Default - element.DeclaredName
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetDocumentRangeForPartiallyUnmappedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - InvalidRange
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.ITreeRange)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanDeclarationBeOverloaded(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetMvcViewWithModelBaseTypes">
            <summary>
            Default - empty
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclaration">
            <summary>
            Returns target declaration. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclarationFile">
            <summary>
            Returns target declaration file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.GetVariableResult(System.String)">
            <summary>
            Gets variable result by its name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.IsFinished">
            <summary>
            Returns value indicating whether the template result is finished 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression">
            <summary>
            A variable evaluation expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates quick result for expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Execute custom action on expanding this expression
            </summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition">
            <summary>
            Represents macro function definition that can be used by Live Template's.
            Implementation of this interface should be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroDefinitionAttribute"/> attribute
            to be automatically recognized by ReSharper.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition.GetPlaceholder(JetBrains.DocumentModel.IDocument,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue})">
            <summary>
            <para>
            Placeholder value is inserted into the text on the very initial step of template expansion
            and is needed for proper template text reformatting when real values cannot be calculated yet.
            </para>
            <para>
            More precisely, the following steps are performed:
            <list type="bullet">
              <item>placeholder values for all template fields are inserted into the text</item>
              <item>the resulting text is reformatted</item>
              <item><see cref="!:GetLookupItems"/> is used to evaluate and insert values for all fields.</item>
            </list>
            </para>
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation">
            <summary>
            Represents macro function implementation
            Implementation of this interface should be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroImplementationAttribute"/> attribute
            to be automatically recognized by ReSharper.
            Instances of the macro implementation components are created per-session. The macro parameters, hotspot session and any required components can be injected into component's contructor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Execute custom action on expanding this macro
            </summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates list of lookup items to show
            </summary>
            <returns>
            List of lookup items to show in order of preference.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates "quick result" for this macro.
            Unlike the result returned by <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> method, 
            quick result is re-evaluated on each typing and so its implementation should be very quick.
            If the macro cannot provide any result that can be evaluated very quickly, it should return null.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.FileMaskScopeConfig">
            <summary>
            FileMaskScopeConfig
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.FileMaskScopeConfig.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContext">
            <summary>
            Context where a template can be executed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorControl">
            <summary>
            ScopeSelectorControl
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorDialog">
            <summary>
            ScopeSelectorDialog
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.Shrink">
            <summary>
            Shrinks lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.Unshrink">
            <summary>
            Restores unshrinked lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.Image">
            <summary>
            Gets lookup item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.DisplayName">
            <summary>
            Gets lookup item display name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.CreateLocalVariableLookupItemBase.DisplayTypeName">
            <summary>
            Gets type display name 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.AutomaticCodeCompletionStrategyEx.MatchText(JetBrains.ReSharper.Feature.Services.CodeCompletion.IAutomaticCodeCompletionStrategy,JetBrains.TextControl.ITextControl,System.Int32,System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            Matches text to the left of the caret.
            Length of string passed to <paramref name="matcher"/> is guaranted to be <paramref name="length"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateLookupItem.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Completes the item at the specified range.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateLookupItem.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager">
            <summary>
            Maintains layouters per text controls.
            // TODO: when we got text control components, make layouters text control components, and drop this component altogether.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.myMapTextControlToLayouters">
            <summary>
            Demand-created, destroyed when the text control is closed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.GetForTextControl(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets the collection of text controls, from which you should select the one you want the layouters for.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls">
            <summary>
            Gets the collection of text controls out of which you can get a layouter for the specific text control.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls">
            <summary>
            Implements the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls.Item(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets an object that will create the layouters for the given text control.
            Note: do not store the instance you get, because it may expire. You should get a new instance thru this indexer each time you need it.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType">
            <summary>
            Represents an unresolved type name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Candidates">
            <summary>
            Gets collection of possible resolution candidates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Resolution">
            <summary>
            Gets or sets resolution for this unresolved type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectEmbracingConstructUtil.TryFindRangeSeparatedByEmptyLines``1(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean})">
            <summary>
            Try to find a group of statements separated by blank lines
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ISelectedTreeRange">
            <summary>
            If an ISelectedRange in implemented on a PSI it should imlement this interface in order to be used in combined features 
            i.e. ASP extend selection
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IImplicitReference">
            <summary>
            Implicit references, which target determined by context (not always in this file), not owner itself
            Also, <see cref="M:JetBrains.ReSharper.Psi.Resolve.IReference.BindTo(JetBrains.ReSharper.Psi.IDeclaredElement)"/> has no effect on this reference
            </summary>
            <remarks>Such reference will be always selected in <see cref="M:JetBrains.ReSharper.Psi.Services.CandidatesUtil.SelectGoodReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Resolve.IReference})"/></remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.ImageUtil.AdjustBrightness(System.Drawing.Image,System.Int32)">
            <summary>
            changes the brightness of an image.
            </summary>
            <param name="image">input image</param>
            <param name="value">brightness value, should be between -255 and 255</param>
            <returns>output image</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionType">
            <summary>
            Defines possible code completion types
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionUtil.IterateStaticMembers(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext,JetBrains.ReSharper.Psi.IDeclaredType,JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Psi.Resolve.ISubstitution,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType},System.Func{JetBrains.ReSharper.Psi.ITypeMember,System.Boolean})">
            <summary>
            Enumerate static members in given type element, which type is given,
            and which are visible from given source point
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager">
            <summary>
            Tracks statistics of choosing members in completion.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.ItemStatistics.#ctor(JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityStringList)">
            <summary>
            API for settings upgrade...
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityStringList.myPriorities">
            <summary>
            Maps items to their priorities
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityStringList.#ctor(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            API for setttings upgrade...
            </summary>
            <param name="priorities"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityStringList.IncreasePriority(System.String)">
            <summary>
            Increases priority of the specified item by 1
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.NamesCorellationUtil">
            <summary>
            Completion policy for smart completion. Takes into account name corellation, etc.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.GetBlockComment(JetBrains.ReSharper.Psi.Parsing.CachingLexer)">
            <summary>
            Identifies block comment range, even if it is not a single token.
            Lexer pos will be saved and resored by the caller
            </summary>
            <param name="lexer"></param>
            <returns>Invalid range if lexer is not positioned in block comment</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.NestedStartBlockCommentMarker">
            <summary>
            string used to replace nested block comments to make the code syntactically correct while commenting
            and restore comments while uncommenting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext">
            <summary>
            Context in which generation occures
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Kind">
            <summary>
            Gets context kind, like constructor, property, delegating members, etc
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Language">
            <summary>
            Language in which generation should occur
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.PresentationLanguage">
            <summary>
            Language in which generated items should be presented, may be
            different from <see cref="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Language"/> (codebehind language, for example)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.ProjectFileType">
            <summary>
            File type of project item in which generation should occur
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Root">
            <summary>
            Root of the operation, usually ITypeDeclaration
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Anchor">
            <summary>
            Anchor of the operation, place where to put elements
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.ProvidedElements">
            <summary>
            Elements provided as possible sources for generation (shown on first page)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.InputElements">
            <summary>
            Elements selected by user as source of generation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.OutputElements">
            <summary>
            Elements built by builder
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.GlobalOptions">
            <summary>
            Options configured on Element Selection page, which will be applied to every suitable element. This options are persisted.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.InputElementOptions">
            <summary>
            Options configured on Advanced page per input element. This options are not persisted.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.OutputElementOptions">
            <summary>
            Options configured on Advanced page per output element. This options are not persisted.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Project">
            <summary>
            Project in which generation occures
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.PsiModule">
            <summary>
            Psi Module
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorWorkflow.GenerateAndFinish(System.String,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Generates code and commits transaction (for non-advanced scenario)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorWorkflow.Finish(System.String)">
            <summary>
            Commits transaction
            </summary>
            <param name="commandName">Name of command for Undo</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorWorkflow.Generate(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Starts transaction, generates code, build Options.Output
            </summary>
            <returns>object to Dispose to rollback transaction, e.g. on Cancel</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.GenerateAndFinish(System.String,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Generates code and commits transaction (for non-advanced scenario)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.Finish(System.String)">
            <summary>
            Commits transaction
            </summary>
            <param name="commandName">Name of command for Undo</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.Generate(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Starts transaction, generates code, build Options.Output
            </summary>
            <returns>object to Dispose to rollback transaction, e.g. on Cancel</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myActiveTextControl">
            <summary>
            Text control in which hyperlinks are currently enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myClickCommit">
            <summary>
            Makes sure we async-run no more than one click.
            Makes sure we cancel a pending click when we're turned off / closed / etc.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myHyperlinkLifetimesSequence">
            <summary>
            Alive while a hyperlink is visible, also ensures the prev hyperlink is not visible when a new one is created.
            Must be guarded and readlocked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myCurrentStateLifetime">
            <summary>
            Terminated when exiting current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.OnHoverDocumentsCommitted">
            <summary>
            Async-commit requested by HoverChoosing has completed. Get the actual hyperlink object.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.OnMouseOrKeyboardMove(JetBrains.TextControl.TextControlMouseEventArgs)">
            <summary>
            Mouse moved or key state changed.
            </summary>
            <param name="args">Params. <c>Null</c> means mouse not in text control.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.TryEnterHoverState(JetBrains.TextControl.TextControlMouseEventArgs)">
            <summary>
            Enters the state if there're providers for the current keystate.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.State.Idle">
            <summary>
            Not active. No highlighting.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.StubbornAsyncCommitClient">
            <summary>
            Retries async commit on interruption until it completes.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.UpdateArgumentsDelegate">
            <summary>
            Provides new arguments for existing attribute
            </summary>
            <param name="instance">existing attribute  info</param>
            <returns>desired attribute arguments or null to ignore</returns>    
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.MutliDocumentNameExpression">
            <summary>
            Name expression. Updates not only declaration name but source reference.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IntentionLanguageSpecific.ToExtensionMethod(JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration)">
            <summary>
            Makes method extension method.
            For C#: add this to first parameters
            For VB: add ExtensionAttribute to method declaration
            
            No any checks (ex. class and method are static) are performed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IntentionLanguageSpecific.IsVoidMethodDeclarationHasTypeUsage">
            <summary>
            Returns true for VB and false for C#
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.ActionUtil.CommitAndWaitForCaches(JetBrains.ReSharper.Psi.IPsiServices,JetBrains.ActionManagement.IActionHandler)">
            <summary>
            When a PSI-consuming action is about to be executed, commits the documents and waits for the caches to become idle, displaying the cancelable modal UI progress.
            </summary>
            <param name="psiServices">PSI manager to wait for, identifies the solution.</param>
            <param name="actionhandler">Action handler from which the action name is retrieved, to display in the progress UI.</param>
            <returns>Whether the caches are, finally, idle (the wait might be cancelled).</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.ActionUtil.ExecuteWithCachesReady(JetBrains.ReSharper.Psi.IPsiServices,System.String,System.Action)">
            <summary>
            When a PSI-consuming action is about to be executed, commits the documents and waits for the caches to become idle, displaying the cancelable modal UI progress.
            </summary>
            <param name="psiServices">PSI manager to wait for, identifies the solution.</param>
            <param name="action">Activity to execute if the caches are ready OK.</param>
            <param name="title">Progress title.</param>
            <returns>Whether the caches are, finally, idle (the wait might be cancelled).</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Title">
            <summary>
            Gets UI title
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.ContextOptionsUI">
            <summary>
            Gets control presenting context options UI
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.TemplateContext">
            <summary>
            Gets template context matching current settings in the UI
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Valid">
            <summary>
            Gets flag indicating whether the UI is valid
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.ValidChanged">
            <summary>
            Event which is raised when the <see cref="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Valid"/> property changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.TemplateAcceptanceContext">
            <summary>
            Represents neccessary context for accepting different kind of templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.EnterNameForm">
            <summary>
            Summary description for EnterNameForm.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.EnterNameForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesContextForm">
            <summary>
            Summary description for FileTemplatesContextForm.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesContextForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UidUsed(System.Guid)">
            <summary>
            Checks if the specified uid is already used for a template of the family
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.PredefinedStorage">
            <summary>
            Gets storage of predefined templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UserStorage">
            <summary>
            Gets storage of user templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.TemplateStorages">
            <summary>
            Gets all registered template storages
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesManager.CreateFileFromTemplate(System.String,JetBrains.ProjectModel.IProjectFolder,JetBrains.ReSharper.LiveTemplates.Templates.Template,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Creates file with specified name in target folder using file template.
            </summary>
            <param name="fileNameNoExtension">If name is null or empty, dialog to create name is shown</param>
            <param name="targetFolder"></param>
            <param name="template"></param>
            <param name="init"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.Hotspot">
            <summary>
            Represents a hot spot in live template expansion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext">
            <summary>
            Implements the IExpressionContext interface
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext">
            <summary>
            Expression evaluation context
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext.HotspotSession">
            <summary>
            Gets the template result
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionContext">
            <summary>
            Implementation of ITemplateContext
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext">
            <summary>
            Context where a template can be executed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.Solution">
            <summary>
            Gets the project a template is executed in
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.StartOffset">
            <summary>
            Gets the position in editor a template is executed at
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController">
            <summary>
            Template result context based on template field infos
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionExecutor">
            <summary>
            Controller for the insert live template action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi">
            <summary>
            Represents a live template session
            </summary>  
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotService">
            <summary>
            Language-specific hotspot service
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController">
            <summary>
            Template result context based on template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Init(System.String,JetBrains.TextControl.ITextControl,System.Int32@,JetBrains.ProjectModel.ISolution,System.String)">
            <summary>
            Initializes within a context
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.NameSuggestionsExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(JetBrains.ReSharper.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Executes template with inserting text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(System.String,JetBrains.ReSharper.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Executes template with inserting text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.GetPrefix(JetBrains.DocumentModel.IDocument,System.Int32)">
            <summary>
            Generic template prefix (not context specific)
            </summary>
            <param name="document"></param>
            <param name="caretOffset"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue">
            <summary>
            A parameter of live template macro
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TypeLookupItem">
            <summary>
            Lookup item for type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter">
            <summary>
            A string constant expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroParser">
            <summary>
            Parses live template macros 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter">
            <summary>
            Expression which is evaluated to a variable value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.QuickList">
            <summary>
            Quick list implementation
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.UserStorage">
            <summary>
            Storage for user-level templates
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.Accepts(JetBrains.ProjectModel.IProject)">
            <summary>
            Checks if a project is supported
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.Name">
            <summary>
            Gets name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.LiveTemplates.Templates.Template.Text">
            <summary>
            Gets the template text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.LiveTemplates.TemplateKind">
            <summary>
            Enumerates possible kinds of templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.LiveTemplates.Templates.TemplateTokenType">
            <summary>
            Describes tokens which are specific for templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateUtil">
            <summary>
            Contains utility methods for template execution
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker">
            <summary>
            Tracks keyboard commands and maintains prefix
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker.ContextChanged">
            <summary>
            Event is raised when the tracker changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor">
            <summary>
            Interface for creating custom list items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.RichText">
            <summary>
            The presentation rich text
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Tag">
            <summary>
            The custom tag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.CurrentItemBounds">
            <summary>
            Gets bounds of the current item, in client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.Bounds">
            <summary>
            Gets bounds of the window
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.ShowBefore">
            <summary>
            Event which is raised immediately before the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.ShowAfter">
            <summary>
            Event which is raised immediately after the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.WindowClose">
            <summary>
            Event which is raised before the lookup window closes
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.WindowHidden">
            <summary>
            Event which is raised before the lookup window is hidden
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.Scrolled">
            <summary>
            Event which is raised when lookup window is scrolled
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookupWindow.WindowResized">
            <summary>
            Event which is raised when lookup window is resized
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IKeywordLookupItem">
            <summary>
            Marker interface mainly for overriding of keywords by live templates.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.Lookup">
            <summary>
            Form which is used to display list of lookup items
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.Lookup.CurrentItemChanged">
            <summary>
              Event which is raised when the current item changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters">
            <summary>
            A class that implements the coupled layouters for the lookup window and parameter info tooltip.
            Create a new layouter through the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.OptionParameterInfoBelow">
            <summary>
            Whether the default parameter info disposition is above or below the line.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.TextControl">
            <summary>
            Gets the text controls instance for which the layouters can be created.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl)">
            <summary>
            Creates an instance, registers it in the list.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupTooltipLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup-list-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateParameterInfoLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the text-editor-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.GetAvailDispositions(JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds)">
            <summary>
            Gets the dispositions that can be used for running each of the layouters.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLayouter(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds,JetBrains.UI.IAnchoringRect,System.Boolean)">
            <summary>
            Creates any of the layouters.
            </summary>
            <param name="lifetime"></param>
            <param name="id">Which layouter to create.</param>
            <param name="anchor">Anchor for the layouter.</param>
            <param name="bAllowNonStrictRecursion">With Option Strict OFF, sometimes the disposal of an already-used layouter causes the whole instance to dispose. In this case, make a recursive call over a new instance. This param prevents from infinite recursion.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.DirtyHackLookupAndParameterInfoDispositions">
            <summary>
            Dirty Hack for the Parameter Info and Lookup tooltips.
            Initially, ParamInfo is displayed below the line, which occupies the space of the lookup window. As lookup shows, move param-info up.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.UpdateLayout">
            <summary>
            Recalculates the layout.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.AnchoringRect">
            <summary>
            Anchoring rectangles for the coupled layouters.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.StickyDisposition">
            <summary>
            Stores the sticky dispositions for layouting each of the entities.
            This makes sure that if the parameter info has been switched up after completion was shown wouldn't jump back down after completion is closed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.Layouter">
            <summary>
            The coupled layouters controlled by this instance.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds">
            <summary>
            IDs for the layouters and anchors.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupHighlightingTracker">
            <summary>
            Tracks replacement highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect">
            <summary>
            Tracks dynamically the currently selected item bounds within the given lookup window, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.Lookup.ILookup)">
            <summary>
            Creates the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="lookup">Lookup window whose selection to track.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupItemAnchoringRect.Lookup">
            <summary>
            The owning lookup window.
            May be <c>Null</c> if already disposed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myImage">
            <summary>
            The image
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myNameText">
            <summary>
            The rich presentation of name
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myTypeText">
            <summary>
            Rich presentation of the type
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.myItem">
            <summary>
            The associated context item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.CancelShrink">
            <summary>
            Cancels all shrinks
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.Shrink">
            <summary>
            Shrinks the name a bit.
            </summary>
            <returns>Whether there was any shrinking. The <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupListItem.RichText"/> width must decrease if <c>True</c>.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.AsyncLookupParameterInfoHandler">
            <summary>
            Parameter info handler for lookup lists
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider">
            <summary>
            Interface for creating parameter info handlers for different contexts
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.CreatePopupWindowContext(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a popup window context.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.Context">
            <summary>
            Gets the current context provided by the handler.
            </summary>
            <value>
            The current context or <c>null</c> if the context is not available and session 
            is finished.
            </value>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.ContextChanged">
            <summary>
            Event which is raised when context changes
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.HideFlags">
            <summary>
            Gets flags indicating when to close the window
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupUtil">
            <summary>
            Contains utility methods for lookup management
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow">
            <summary>
            UI-related part of lookup form
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.myLookupListItemsCache">
            <summary>
            Caches lookup list items created for lookup items. This allows caching size for them in list item painter.
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.Scrolled">
            <summary>
            Event which is raised when lookup window is scrolled
            </summary> 
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.BeforeShownItemsUpdated">
            <summary>
            Event is raised before items list is shown
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.CurrentItemBounds">
            <summary>
            Gets bounds of the current item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindow.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindowManagerImpl">
            <summary>
            Manages currently shown lookup window
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupWindowManagerImpl.IsExternalDocumentChangeAllowed">
            <summary>
            If this flag is set, any document change doesn't cancel code completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.MethodsLookupItem">
            <summary>
            Code completion item which consists of several methods
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.Suffix.Playback(JetBrains.TextControl.ITextControl)">
            <summary>
            Emulates typing of the suffix in given text control
            </summary>
            <param name="textControl"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.TypeNameCodeCompletionLookupItem">
            <summary>
            Code completion result item for type name completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.VariableComparer">
            <summary>
            Comparer which prefers local variables to fields and properties. 
            Note that for preference policy the "0" return value doesn't
            mean that items are equal - it means that the comparer can say nothing about the items.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.MatchingBrace.ISimpleMatchingBraceProvider">
            <summary>
            Provides token-level information about matching braces
            </summary>
            <remarks>
            <see cref="T:System.Collections.Generic.IComparer`1"/> must be implemented according to the following rules:
            <list type="disc">
              <item>It is defined on brace pairs, result for open and close brace of the same pair is the same</item>
              <item>If one brace pair is "greater" than another that means that balance of "lesser" brace pair outside of "greater" brace pair doesn't count inside the "greater" brace pair</item>
            </list>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher">
            <summary>
            A preofix matcher that features an additional freehand filter not based on the regex.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher.Matcher">
            <summary>
            Gets the underlying matcher.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Argument">
            <summary>
            Argument under cursor
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.NamedArguments">
            <summary>
            Each array element contains argument name (if argument is named) or null or empty otherwise.
            Length of the array equals to number of arguments or 0.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.DefaultCandidate">
            <summary>
            Candidate, that is resolved, -1 otherwise
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Candidates">
            <summary>
            Candidates available
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Range">
            <summary>
            Invocation range. EndOffset == -1 if no right bound specified
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.IsIntellisenseEnabled(JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Quick check whether intellisense is enabled by settings. Necessary to fallback to Visual Studio intellisense if desabled.
            </summary>
            <param name="solution">Current solution</param>
            <param name="contextBoundSettingsStore">Settings store bound to current context</param>
            <returns>True if enabled</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.CreateContext(JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.IDocument,System.Int32,System.Int32,System.Char,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Creates parameter info context.
            </summary>
            <param name="solution">Current solution</param>
            <param name="document">Current document</param>
            <param name="caretOffset">Caret position in the document</param>
            <param name="expectedLParenthOffset">Expected position of closing parenthesis if any. Used to close parameter info if caret moved out of arguments range</param>
            <param name="invocationChar">Character that triggered parameter info</param>
            <param name="contextBoundSettingsStore">Settings store bound to current context</param>
            <returns>Parameter info context or null if cannot create</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.ShouldPopup(JetBrains.DocumentModel.IDocument,System.Int32,System.Char,JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Checks whether parameter info should pop up when specific character is typed in the document
            </summary>
            <param name="document">Current document</param>
            <param name="caretOffset">Caret position in the document</param>
            <param name="c">Character typed</param>
            <param name="solution">Current solution</param>
            <param name="contextBoundSettingsStore">Settings store bound to current context</param>
            <returns>True if should pop up</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.Language">
            <summary>
            Language for which the factory is applicable. Used for quick check of availability
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.ImportantChars">
            <summary>
            Characters that may trigger automatic popup of parameter info provided by the factory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.FilterOut(System.Int32)">
            <summary>
            Filters out an invocation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Argument">
            <summary>
            Gets number of parameter we're standing at
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Range">
            <summary>
            Gets the left parenthesis offset
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoPopupController">
            <summary>
            Interface for component which controls automatic parameter info popup
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoPopupController.PopupParameterInfo(JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Int32,JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Shows parameter info in the specified text control with specified expected left parenthesis offset and highlights
            the specified signature
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings">
            <summary>
            This settings class is obsolete. Use <see cref="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoSettingsKey"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.ShowOneCandidate">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.DelegatesAsLambdas">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.UseArrowsForSignatureNavigation">
            <summary>
            Gets or sets flag indicating whether use arrows instead of Control+P in parameter info popup.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.AutopopupOn">
            <summary>
            Gets or sets flag indicating whether automatic parameter info popup is enabled.
            </summary> 
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.AutopopupDelay">
            <summary>
            Gets or sets delay to automatically show parameter info popup in.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.TypeArgumentCandidate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.DotSelection`1.GetParentInternal(JetBrains.ReSharper.Psi.Tree.ITokenNode)">
            <summary>
            Implements special processing of some tokens
            </summary>
            <param name="tokenNode"></param>
            <returns>null, if no special processing required</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.BracketMatcher.FindMatchingBracket(JetBrains.ReSharper.Psi.Parsing.CachingLexer,System.Int32@)">
            <summary>
            Try to find the corresponding matching bracket for the given
            </summary>
            <param name="cachingLexer">Caching lexer positioned at the source bracket</param>
            <param name="pos">position of paired bracket (or -1 if none)</param>
            <returns>true if matching bracket was found. If returns false, the pos may contain position of incorrect bracket</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.CodeInsightUtil">
            <summary>
            Contains utility methods for code insight features
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory">
            <summary>
            Performs validation of <see cref="T:JetBrains.DataFlow.IProperty`1"/> in the aspect of valid language names, and such.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer{JetBrains.ReSharper.Psi.IDeclaredElement},System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.IDeclaredElement,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.PsiLanguageType,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
    </members>
</doc>
