<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Feature.Services.Navigation</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+FinalRec}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.FinalRec))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesNavigationThemedIcons.FinalRec.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ServicesNavigationThemedIcons.FinalRec), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.FinalRec&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.FinalRec">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FinalRec Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.FinalRec.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+FinalRec}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.FinalRec))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.FinalRec.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.FinalRec&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.FinalRec.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FinalRec Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.FinalRec"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+FinalRec}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.FinalRec))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.FinalRec.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.FinalRec&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestBaseMethodCall Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestBaseMethodCall}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestBaseMethodCall))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestBaseMethodCall&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestBaseMethodCall Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestBaseMethodCall}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestBaseMethodCall))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestBaseMethodCall&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestInterfaceQualification Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInterfaceQualification}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInterfaceQualification))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInterfaceQualification&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestInterfaceQualification Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInterfaceQualification}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInterfaceQualification))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInterfaceQualification&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestInvocationUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInvocationUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInvocationUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInvocationUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestInvocationUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInvocationUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInvocationUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInvocationUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestReadUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestReadUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestReadWriteUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestReadWriteUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestWriteUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestWriteUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageBase">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageBase Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageBase.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageBase}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageBase))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageBase.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageBase&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageBase.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageBase Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageBase"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageBase}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageBase))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageBase.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageBase&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageInterface">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageInterface Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageInterface.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInterface}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInterface))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageInterface.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInterface&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageInterface.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageInterface Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageInterface"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInterface}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInterface))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageInterface.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInterface&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageTest">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageTest Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageTest.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTest}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTest))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageTest.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTest&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageTest.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageTest Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons.UsageTest"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Navigation.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTest}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTest))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageTest.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTest&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider">
            <summary>
            Overrides refactoring action (Ex: Inline rename overrides basic rename for local variables)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider.HideOtherActions(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Returns if all other refactorings should be hidden in this context...
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflow`1.ActionId">
            <summary>
            Id of an action that does the same as workflow. Used to present shortcut string and track activity
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflow`1.ShortActionId">
            <summary>
            Id of short action that overrides VS command. Used for presentation purposes only
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SolutionFeaturePartsContainer">
            <summary>
            Container for getting ALL (not only leaf) applicable components
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ShellFeaturePartsContainer">
            <summary>
            Container for getting ALL (not only leaf) applicable components
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.IRequestContextSearch`1.GetElementsAndSearchRequest(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            returns IEnumerable of candidates and a delegate to be used when one of the candidates will be chosen
            If the tuple contains an empty list of declaredElements but has non empty search request - then this search request will be executed.
            This is done for some rare cases when we need search requests working on non-declaredelement entities
            </summary>
            <param name="dataContext"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.BaseSearches.ContextSearchBase`1.IsAvailable(JetBrains.Application.DataContext.IDataContext)">
            <remarks>At first, check special finder and if not, at second, check other specific conditions</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.BaseSearches.ContextSearchBase`1.GetSpecialFinderSearchDomain(JetBrains.ReSharper.Feature.Services.Search.ISpecialElementFinder,System.Object,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Get search domain for given special finder
            </summary>
            <returns>Return null to cancel search</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.IDeclarationSearch.GetDeclarationSearchRequest(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Gets a searchDeclarationRequest to be executed.
            </summary>
            <param name="declaredElement"></param>
            <returns>Search request to be executed (mostly in the Features layer). Null means that declarations search is incorrect for the indicated declared element</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.IMultipleCandidatesContextSearch`1.GetElementsSearch(JetBrains.Application.DataContext.IDataContext,System.Boolean)">
            <summary>
            return a delegate that might work with a multiple declared elements, i.e. 'Show All Candidates'
            </summary>
            <param name="dataContext"></param>
            <param name="searchParametersOverloads"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextNavigation.Title">
            <summary>
            Text will be shown in the context navigation menu ('Navigate from here...')
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextNavigation.ActionId">
            <summary>
            Id associated with a specific action.
            null if there is no shortcut (action) for this provider
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextNavigation.Execution">
            <summary>
            an action(if there is one) to be invoked later
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.Init_Autohide(JetBrains.DataFlow.Lifetime,JetBrains.DocumentManagers.DocumentManager,JetBrains.ActionManagement.IActionManager,JetBrains.TextControl.ITextControlManager)">
            <summary>
            Hides on user actions, or automatically by hiding policy on the custom request.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.Init_ResultLists(JetBrains.DataFlow.Lifetime,JetBrains.IDE.ResultList.ResultListManager,JetBrains.Application.IShellLocks)">
            <summary>
            Interaction with the IDE-global result list which controls the back-forward navigation.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.CustomHighlightingManagerForTextControl">
            <summary>
            Accessor for methods which are in context of a text control.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.CustomHighlightingManagerForTextControl.GetNextHighlighterFromCaret(System.Windows.Documents.LogicalDirection)">
            <summary>
            Scans from caret in the given direction. Yields <c>Null</c> when either text control has no active requests, or we're already on or beyond the last highlighter in the given direction.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingRequest.TextControl">
            <summary>
            NOTE: formally, the custom highlighting currently applies to a document, because we ain't got a layer for highlighters on text control level. The highlighters will show up in all text controls of this document.
            Historically, API binds to just one text control.
            So we'd also only track the single text control for now. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.ChainedProviders.IChainedSearchProvider.GetNextChainedScopes(JetBrains.ReSharper.Feature.Services.Goto.GotoContext,JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Goto.INavigationScope,JetBrains.Application.CheckForInterrupt)">
            <summary>
            Provides next step chained scopes
            </summary>
            <param name="gotoContext"></param>
            <param name="matcher"></param>
            <param name="containingScope"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Goto.INavigationScope">
            <summary>
            Thread-safe scope to be used by providers
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Goto.GotoContext">
            <summary>
            Container for provider-specific data
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.IOccurenceNavigationProvider.FindMatchingInfos(JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Goto.INavigationScope,JetBrains.ReSharper.Feature.Services.Goto.GotoContext,JetBrains.Application.CheckForInterrupt)">
            <summary>
            Finds matched items and returns a corresponing list of matchingInfos.
            Controller (or some other entity that will use this provider) recieves these items, scores them, sorts 
            and than invoke GetOccurences for the top scored of them.
            </summary>
            <param name="matcher">matcher to use</param>
            <param name="scope">defines a scope to search in</param>
            <param name="gotoContext"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.IOccurenceNavigationProvider.GetOccurencesByMatchingInfo(JetBrains.ReSharper.Feature.Services.Goto.MatchingInfo,JetBrains.ReSharper.Feature.Services.Goto.INavigationScope,JetBrains.ReSharper.Feature.Services.Goto.GotoContext,JetBrains.Application.CheckForInterrupt)">
            <summar> Gets occurences by given matchingInfo </summar>
            <param name="navigationInfo"></param>
            <param name="scope"></param>
            <param name="gotoContext"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.GotoProviders.ChainedScopesUtil.CalculateChainedScore(System.Collections.Generic.List{System.String},JetBrains.ReSharper.Feature.Services.Goto.MatchingInfo)">
            <remarks> words.Count should correspond with matchingInfo references depth </remarks>
            <param name="revertedWords"></param>
            <param name="matchingInfo"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Goto.IGotoEverythingProvider.ItemsPriorityFunc">
            <summary>
            The lower is result int -> the higher is the priority
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.GotoProviders.ClrGotoFileMemberProvider.GetQuickSearchTexts(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <param name="declaredElement"></param>
            <returns>collection of tuples. A = quick search text. B = whether there is a symbol to symbol matching</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.GotoProviders.TypeMemberNavigationUtil.GetPsiSourceFileTypeElements(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Return custom filtered type members from all type elements inside indicated source file.
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Goto.IChainedOccurencesProvider.FindOccurences(JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Goto.INavigationScope,JetBrains.ReSharper.Feature.Services.Search.LibrariesFlag,JetBrains.Application.CheckForInterrupt)">
            <summary>
            Implement this method if your provider can work as a secondary provider in a chained search.
            PERFORMANCE SENSITIVE!
            </summary>
            <param name="matcher"></param>
            <param name="scope"></param>
            <param name="includeLibraries"></param>
            <param name="checkCancelled"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Goto.MatchingInfo">
            <summary>
            Data class that describes all necessary info to score an item. 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData">
            <summary>
            Data class containing navigation info required to navigate to an assembly
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData.Index">
            <summary>
            -1 if not initialized
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo.UseFocusedTextControlContent">
            <summary>
            Use focused text control to search usages of declared elements
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.GoToRelated.IRelatedFilesProvider.GetRelatedFiles(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Get all related files to specified file.
            </summary>
            <param name="projectFile"></param>
            <returns>Enumeration of tuples of related project file, it's relation type to requested file, and parent file.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ProjectModel.IProjectModelElement,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <summary>
            Navigates to the project item using all applicable providers
            </summary>
            <param name="projectModelElement"></param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToVsSolutionExplorer(JetBrains.ProjectModel.IProjectItem,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <summary>
            Navigates to solution explorer using given project item
            </summary>
            <param name="projectItem"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToExternalSources(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElement"> navigates to a compiled element. To navigate inside compiled members bodies use an overload with compiledElementNavigationInfo data class</param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToExternalSources(JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElementNavigationInfo"> data class with CompiledElement (scope) to search in and a target to be searched in this scope</param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToVsObjectBrowser(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElement"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="assemblyInfoNavigationData"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ProjectModel.ProjectFileTextRange,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean,JetBrains.IDE.TabOptions)">
            <param name="projectFileTextRange"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <param name="tabOptions"></param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.IOccurenceProvider.MakeOccurence(JetBrains.ReSharper.Psi.Search.FindResult)">
            <summary>
            Makes occurence from find result. Return null if find result is incompatible with provider
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindProviders.OccurenceKind.Other">
            <summary>
            default occurence kind
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindProviders.OccurenceKindManager.GetOccurenceKinds(JetBrains.ReSharper.Feature.Services.Search.IOccurence)">
            <summary>
            gets kinds for a specific occurence
            </summary>
            <param name="occurence"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindProviders.OccurenceKindManager.GetAllOccurenceKinds">
            <summary>
            gets the set of all possible kinds from all providers
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.TextDisplayStyle.ChainedPME">
            <summary>
            Display containing Project Model Element
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.TextDisplayStyle.ChainedCME">
            <summary>
            Dispaly containing Code Model Element
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ProjectFileNavigationPoint">
            <summary>
            Project file's navigation point without cursor positioning
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Navigation.TextNavigationPoint">
            <summary>
            Project file's navigation point with cursor positioning
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurences.Presentation.DeclaredElementMenuItemFormatter">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.Presentation.DeclaredElementMenuItemFormatter.Format(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.UI.PopupMenu.IMenuItemDescriptor,JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions,System.Boolean)">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeKind.ExtensionMethodsRedundantImport">
            <summary>
            weak usage. If the corresponding namespace import will be removed, 
            removing find result's referenced psiModules won't break compilation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeKind.RedundantNamespaceImport">
            <summary>
            weak usage. <see cref="M:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeService.GetRedundantImportsToRemove``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IModule},JetBrains.ProjectModel.IProject,System.Collections.Generic.IEqualityComparer{JetBrains.ProjectModel.IModule})"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeKind.DirectUsage">
            <summary>
            strong, direct usage.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeKind.RelatedUsage">
            <summary>
            strong, compiler related usage. Removing corresponding referenced psiModules will break compilation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeKind.ExtensionMethodStrongCall">
            <summary>
            strong, compiler related usage concerned with calling extension methods and importing namespaces. 
            Removing corresponding referenced psiModules will break compilation.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeUtil.GetForwardedAssemblyReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Modules.IPsiModule},JetBrains.ProjectModel.IProject)">
            <summary>
            Gets additional project references caused by forwarding.
            </summary>
            <param name="targetPsiModules"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeSearcher.GetRelatedElements(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Resolve.IReference)">
            <summary>
            Gets related type elements associated with a given declared element. 
            'Related' are those type elements which psiModules should be refernced as well as the module of <param name="declaredElement"/>.
            </summary>
            <param name="declaredElement"></param>
            <param name="reference">some rules need a reference to get invocation context</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeService.RemoveProjectToModuleReferences(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProjectToModuleReference},JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Removes selected projectToModule references under the transaction with progress indicator. 
            Assuming that the list does not contain implicitly referenced psiModules.
            </summary>
            <param name="listToRemove"></param>
            <param name="progressIndicator"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ReferencedCode.ReferencedCodeService.RemoveRedundantUsages(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Resolve.IReference},JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Removes selected references with an indicated progress indicator. Needs to be executed under transaction.
            </summary>
            <param name="references"></param>
            <param name="progress"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ReferencedCode.SkippedTypes.IsSkippedType(JetBrains.ReSharper.Psi.IClrTypeName)">
            <summary>
            Returns if the target clrTypeName should be skipped for ReferencedCodeSearcher
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Search.SearchRequests.SearchProjectItemReferencedCodeRequest.#ctor(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProjectItem},JetBrains.ProjectModel.ISolution,System.Boolean,System.Boolean,System.Collections.Generic.List{JetBrains.ProjectModel.IModule})">
            <param name="targetElements"></param>
            <param name="solution"></param>
            <param name="includeRelated"></param>
            <param name="useRetargeting"></param>
            <param name="referencedCodeScope">Constraint for results to reference elements only from indicated modules. Use null if there is no constraint.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Search.ISpecialElementFinder.GetSearchTarget(JetBrains.ReSharper.Psi.Tree.IFile,System.Nullable{JetBrains.DocumentModel.DocumentRange},System.Nullable{System.Int32})">
            <summary>
            Get special finder's search targets
            </summary>
            <param name="file"></param>
            <param name="range">
              Range in document (selection or caret only). Can be null if invoked on project item
            </param>
            <param name="caretOffset">
              Caret position. Can be null if invoked on project item
            </param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Search.LibrariesFlag">
            <summary>
            Defines whether the libraries should be included or not when searching for items.
            </summary>
        </member>
    </members>
</doc>
