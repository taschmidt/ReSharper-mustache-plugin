<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Psi.Services</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaCollection}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaCollection))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = DfaThemedIcons.DfaCollection.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(DfaThemedIcons.DfaCollection), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;DfaThemedIcons.DfaCollection&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaCollection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaCollection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaCollection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaCollection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaCollection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaCollection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaCollection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaCollection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaCollection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaCollection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaCollection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaCollection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaCollection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaCollection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaFrom">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaFrom Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaFrom.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaFrom}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaFrom))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaFrom.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaFrom&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaFrom.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaFrom Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaFrom"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaFrom}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaFrom))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaFrom.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaFrom&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaLambda">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaLambda Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaLambda.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaLambda}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaLambda))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaLambda.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaLambda&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaLambda.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaLambda Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaLambda"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaLambda}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaLambda))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaLambda.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaLambda&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaTo">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaTo Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaTo.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaTo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaTo))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaTo.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaTo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaTo.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaTo Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons.DfaTo"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaTo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaTo))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaTo.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaTo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Empty}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Empty))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiServicesThemedIcons.Empty.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiServicesThemedIcons.Empty), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Empty&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Empty">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Empty Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Empty.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Empty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Empty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Empty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Empty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Empty.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Empty Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Empty"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Empty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Empty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Empty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Empty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasImplementations">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HasImplementations Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasImplementations.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasImplementations}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasImplementations))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasImplementations.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasImplementations&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasImplementations.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HasImplementations Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasImplementations"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasImplementations}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasImplementations))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasImplementations.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasImplementations&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasOverrides">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HasOverrides Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasOverrides.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasOverrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasOverrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasOverrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasOverrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasOverrides.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HasOverrides Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HasOverrides"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasOverrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasOverrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasOverrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasOverrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Hides">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Hides Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Hides.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Hides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Hides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Hides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Hides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Hides.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Hides Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Hides"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Hides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Hides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Hides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Hides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HidesAndImplements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HidesAndImplements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HidesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HidesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HidesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HidesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HidesAndImplements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.HidesAndImplements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HidesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HidesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HidesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HidesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Implements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Implements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Implements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Implements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Implements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Implements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Implements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Implements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Implements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Implements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Implements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Implements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Implements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Implements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Overrides">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Overrides Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Overrides.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Overrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Overrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Overrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Overrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Overrides.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Overrides Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.Overrides"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Overrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Overrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Overrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Overrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the OverridesAndImplements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+OverridesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.OverridesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.OverridesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.OverridesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the OverridesAndImplements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+OverridesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.OverridesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.OverridesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.OverridesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.QuasiImplements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the QuasiImplements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+QuasiImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.QuasiImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.QuasiImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.QuasiImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the QuasiImplements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons.QuasiImplements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+QuasiImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.QuasiImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.QuasiImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.QuasiImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.CandidatesUtil.MultiplyDeclaredElementExecutor">
            <summary>
            
            </summary>
            <param name="context">DataContext initially passed to action</param>
            <param name="declaredElements">Candidates for navigation</param>
            <param name="initialTargers"> </param>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.IDeclaredElementInstanceToDataMap`2">
            <summary>
            IDeclaredElementInstance to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.DeclaredElementInstancePointerMap`2">
            <summary>
            IDeclaredElementInstance to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.LiteralService.IsStringLiteral(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Determines whether the specified <paramref name="element"/> is string literal.
            </summary>
            <param name="element">element for test</param>
            <returns><c>true</c> - if success; otherwise - <c>false</c></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.LiteralService.IsConstantLiteral(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Determines whether the specified <paramref name="element"/> is constant literal.
            </summary>
            <param name="element">element for test</param>
            <returns><c>true</c> - if success; otherwise - <c>false</c></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.IDeclaredElementToDataMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.ElementPointerMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.ElementEnvoyMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.PsiDataRules.DeclaredElementsFromDocument(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            See <see cref="T:JetBrains.Application.DataContext.DataRule`1"/> ctor for tuple semantic comments.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.ILanguageReferenceSelector.GetBaseConstructor(JetBrains.ReSharper.Psi.IConstructor)">
            <summary>
            Get the base constructor call from given constructor
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.ILanguageReferenceSelector.GetCandidates(JetBrains.ReSharper.Psi.Resolve.IReference,JetBrains.ReSharper.Psi.Services.ReferencePreferenceKind)">
            <summary>
            Return the candidates to go to declaration action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.ReparseContext.ContextType">
            <summary>
            TODO: this enum is C# specific. Move it to C#
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IPrefferedReference">
            <summary>
            Such reference will be always selected in <see cref="M:JetBrains.ReSharper.Psi.Services.TextControlToPsi.GetReferencesAtOffset(JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.IDocument,System.Int32)"/>
            and <see cref="M:JetBrains.ReSharper.Psi.Services.CandidatesUtil.SelectGoodReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Resolve.IReference})"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Services.StructuralSearch.IElementMatcher.Words">
            <summary>
            For WordIndex lookup. Only words specific for this element, not for children or siblings.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.StructuralSearch.Impl.AssociativeMatcherUtil.Match(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Tree.ITreeNode},JetBrains.ReSharper.Psi.Services.StructuralSearch.IMatchingContext,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Services.StructuralSearch.IElementMatcher},JetBrains.Util.Graphs.BipartiteGraph{JetBrains.ReSharper.Psi.Services.StructuralSearch.IElementMatcher,JetBrains.ReSharper.Psi.Tree.ITreeNode}@,System.Collections.Generic.List{JetBrains.ReSharper.Psi.Tree.ITreeNode}@)">
            <summary>
            
            </summary>
            <remarks>
            <paramref name="operands"/> is truncated, only unmatched operands are left
            </remarks>
            <param name="operands"></param>
            <param name="context"></param>
            <param name="matchers"></param>
            <param name="graph"></param>
            <param name="matchedOperands"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.StructuralSearch.Impl.AssociativeMatcherUtil.MatchExpression(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Tree.ITreeNode},System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Services.StructuralSearch.IElementMatcher},JetBrains.ReSharper.Psi.Services.StructuralSearch.IMatchingContext,System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Tree.ITreeNode}})">
            <summary>
            Returns matched operands, <value>null</value> if not matched
            </summary>
            <param name="operands"></param>
            <param name="matchers"></param>
            <param name="context"></param>
            <param name="getOperands"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.StructuralSearch.IStructuralMatcher.GetExtendedWords(JetBrains.ProjectModel.ISolution)">
            <summary>
            Words that MAY or MAY NOT be in matched snippet, but AT LEAST ONE word from this list MUST be there.
            MUST NOT include Words (because this constaint applies after).
            When empty enumerable is returned, constraint is not applied.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Services.StructuralSearch.IStructuralMatcher.Words">
            <summary>
            ALL these words MUST be in matched snippet
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.StructuralSearch.Impl.StructuralSearchPatternValidator.Validate(JetBrains.ReSharper.Psi.Services.StructuralSearch.IStructuralSearchPattern)">
            <summary>
            Returns null if pattern is correct
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.StructuralSearch.IMetaPlaceholder">
            <summary>
            Marker interface
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.StructuralSearch.IStructuralSearchPattern.Check">
            <summary>
            Returns null if pattern is correct
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Services.StructuralSearch.SequenceMatcher`1.DeepAnalysis">
            <summary>
            Deep analysis tries all cases of possible sequence matching
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.StructuralSearch.StructuralSearchPatternParams.IgnoreEmptyStatements">
            <summary>
            Ignore empty statements.
            Useful when matching statement placeholders in C#: "$stmt$;" pattern matches even if there's no empty statement at the end.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.StructuralSearch.StructuralSearchPatternParams.TreatPostfixAndPrefixOperatorEquivalent">
            <summary>
            Only if they are not used in expressions
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.StructuralSearch.StructuralSearchPatternParams.MatchAllMembersWithoutModifiers">
            <summary>
            If this modifier is set pattern "$type$ $method$($args$) $stmt$" will match all methods no matter
            which modifiers they have (private/public, static, etc.)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.StructuralSearch.StructuralSearchPatternParams.MatchMethodParameterWithThisRefOut">
            <summary>
            If there's no ref or out or this modifier in pattern, pattern will match bare parameters as well as parameters with ref or out or this modifier.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Services.StructuralSearch.StructuralSearchPatternParams.TypePlaceholderMatchesVoid">
            <summary>
            When Type placeholder is used as a return value of a method allows or disallows match void.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.TextControlToPsi.SelectReference(JetBrains.DocumentModel.DocumentRange,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Resolve.IReference})">
            <summary>
            Selects a reference from DIFFERENT psi files that user is most likely to bear in mind
            </summary>
            <remarks>Generally, we prefer references to the right of the position</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.TextControlToPsi.SelectReference(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.DocumentModel.DocumentRange,JetBrains.ReSharper.Psi.Resolve.IReference[])">
            <summary>
            Selects a reference from the same psi file that user is most likely to bear in mind
            </summary>
            <remarks>Generally, we prefer references to the right of the position</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.FileSpecificUtil.SortDeclarationsByWritability(JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Psi.Tree.IDeclaration,JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Returns all declarations of a type where type member can be created. Preferrable declarations are first.
            Methods acts as follow:
            1. Get all declaratinos of a type.
            2. Ask language specific services for extra declarations (e.g. base type of ASP page...)
            3. Filter declarations in other languages...
            4. Try filter generated declarations... Like windows forms desiner code...
            5. Filter declarations written in languages other then required...
            6. Try use prefered declaration...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.FileSpecificUtil.SortDeclarationsByWritability(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Tree.IDeclaration},JetBrains.ReSharper.Psi.Tree.IDeclaration,JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Returns all declarations of a type where type member can be created. Preferrable declarations are first.
            Methods acts as follow:
            1. Get all declaratinos of a type.
            2. Ask language specific services for extra declarations (e.g. base type of ASP page...)
            3. Filter declarations in other languages...
            4. Try filter generated declarations... Like windows forms desiner code...
            5. Filter declarations written in languages other then required...
            6. Try use prefered declaration...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetRelatedDeclarations(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield break
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetRelatedAndFilterHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield return declaration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Works on auto-generated code-behind classed. By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsCodeBehindClass(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsUserTextDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Works on auto-generated type members. By default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanContainSeveralClasses(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanImplementInterfaces(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanHaveConstructors(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.SuperClassCanBeChanged(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.SuperClassNameMustBeFull(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetNamespaceForElementsMovedToExternalScope(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - typeElement.GetContainingElement&lt;INamespaceDeclaration&gt;(false);
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetFolderForElementsMovedToExternalScope(JetBrains.ProjectModel.IProjectFile,System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - projectFile.Location.Directory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetPrettyName(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,System.Boolean)">
            <summary>
            Default - element.DeclaredName
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetDocumentRangeForPartiallyUnmappedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - InvalidRange
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.ITreeRange)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.CanDeclarationBeOverloaded(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.IFileTypeSpecificOwnerUtil.GetMvcViewWithModelBaseTypes">
            <summary>
            Default - empty
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.ICreationTarget.GetTargetDeclaration">
            <summary>
            Returns target declaration. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.ICreationTarget.GetTargetDeclarationFile">
            <summary>
            Returns target declaration file
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Services.ValueTracking.Engine.ValueTrackingNodesRepository">
            <summary>
            Map of IElements to value tracking nodes
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Services.ValueTracking.Nodes.IPreExpandedNode.InitNode(JetBrains.Application.Progress.SubProgressIndicator)">
            <summary>
            Init data of pre-expanded node (usually calculates set of elements to search)
            May be called several times (when user cancells action)
            </summary>
        </member>
    </members>
</doc>
